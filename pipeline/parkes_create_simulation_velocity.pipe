# pipeline for  foreground clean

pipe_modules = []
pipe_processes = 1

from map import simulate_pks_signal_ycli as simulate_pks_signal
import struct
import os

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------

# This is the database key for the input map
basemap = os.getenv('MAP_PKS')
#selfile = os.getenv('SELFILE')
sim_root = os.getenv('MAP_2DF')
out_root = os.getenv('MAP_OUT')

#pks_fields = ['ra182', 'ra165', 'ran18', 'ra199', 'ra216', 'ra33']
#pks_fields = ['n1800','p1650','p1820','p1990','p2160','p3300']
#pks_fields = ['p1820',]
pks_fields = []
pks_fields.append(os.getenv('PKS_FIELD'))
opt_fields = []
opt_fields.append(os.getenv('OPT_FIELD'))

sim_root_list = []
out_root_list = []
for field in opt_fields:
    sim_root_list.append(sim_root%field)
for field in pks_fields:
    out_root_list.append(out_root%field)

simnum = 100

do_simulation = True
do_inv_diag_noise = False

#-----------------------------------------------------------------------------
# generate simulation maps for GBT and WiggleZ
#-----------------------------------------------------------------------------
if do_simulation:
    # generate the simulation maps
    pipe_modules.append((simulate_pks_signal.SimulateGbtSignal, ('sg1_', 'sg_')))
    #instance_seed = struct.unpack("I", os.urandom(4))[0]
    #print "generating simulation with seed: %d" % instance_seed

    sg1_output_root = out_root_list[0]
    sg1_sim_root = sim_root_list    
    sg1_template_file = basemap%pks_fields[0] + 'combined_clean_map_0modes.npy'
    sg1_weightfile = basemap%pks_fields[0] + 'combined_clean_weight_0modes.npy'
    #sg1_weightfile = None
    sg1_map_root = basemap%pks_fields[0]
    #sg1_seed = instance_seed
    sg1_seed_file = '/home/p/pen/ycli/workspace/script/random_seeds'
    sg1_refinement = 2
    #sg1_outfile_meansub = "sim_beammeansub_%03d.npy"
    sg1_outfile_raw = "sim_raw_%03d.npy"
    sg1_outfile_delta = "sim_delta_%03d.npy"
    sg1_outfile_optsim = "sim_optsim_%03d.npy"
    #sg1_outfile_physical = "sim_phys_%03d.npy"
    sg1_outfile_degrade = "sim_degradebeam_%03d.npy"
    sg1_outfile_pkssim = "sim_pks_%03d.npy"
    #sg1_selection_file = selfile
    sg1_outfile_beam = 'sim_beam_%03d.npy'
    sg1_simnum = simnum
    sg1_degrade = 1.4
    sg1_add_obs = True
    sg1_scenario = 'str'

