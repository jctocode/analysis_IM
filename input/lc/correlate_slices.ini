# Input file for freq_slices.FreqSlices.py

import os
import scipy as sp

## NOTE about pickling NewSlices:
## If you pickle the NewSlices object from, say, the command line after:
##     F = fs.NewSlices("input/lc/correlate_slices.ini")
##     F.execute()
## you must have:
##     from correlate import freq_slices as fs
## to be able to use `F` after loading from pickling.
## BUT if you make `fs_pickle_slices = True` here,
## you must have:
##     from correlate.freq_slices import *
## instead for `F` to be usable after pickling.
## Solution: just do both imports.


# The directory of where the input maps (usually) are.
base_dir = os.getenv('GBT10B_KM')
# "Your" directory where the final results will be saved.
out_dir = os.getenv('GBT10B_OUT')

# Select whether to save the cleaned clean maps, cleaned noise inv,
# and the modes subtracted from each map to fs_output_root.
fs_save_maps = True
fs_save_noises = True
fs_save_modes = True
# Saves the New Slices object to pickle if True. Contains ALL the information.
# Gets saved in the output root along with the above items.
fs_pickle_slices = True

# Where to get the input map and noise inv from, what they are called.
fs_input_root = base_dir + 'maps/'
fs_file_middles = ("sec_A_15hr_41-73", "sec_B_15hr_41-73", "sec_C_15hr_41-73", "sec_D_15hr_41-73")
#fs_file_middles = ("sec_15hr_41-49", "sec_15hr_49-56")
#fs_file_middles = ("sec_15hr_41-49",)
fs_input_end_map = '_clean_map_I.npy'
fs_input_end_noise = '_noise_inv_I.npy'

# Uses a ones matrix for noise inv if True, else uses input noise inv.
fs_no_weights = False

# The number of modes to subtract.
fs_modes = 15

# Where to save/load the pickled svd info from. 
pkl_output_root = out_dir + 'corr/doctest/'
# Where to save the cleaned clean maps, etc. to.
output_root = out_dir + 'corr/doctest/' # % (fs_modes)
fs_output_root = output_root

# Skips the 1st correlation and loads the svd info from file if True,
# else runs the 1st correlation to get the svd modes.
# If you already have the modes, please set to True so that the running
# time gets halved.
fs_skip_fore_corr = True
# Saves the svd info from the first correlation to file if True.
fs_save_svd_info = True
# If fore_corr is skipped, then load the svd info from this file.
# If it is not skipped, then save the svd info to this file.
# Note that this file never gets written to and read in the same run. 
fs_svd_file = pkl_output_root + 'svd_info.pkl'

# Skips the second correlation if True. Note that cleaned maps,noise invs,
# and modes are still saved, but the pickled New Slices is not.
# Useful if you only want to get the svd info and nothing else.
fs_first_pass_only = False

# Gets the maps/noise ready for processing.
fs_convolve = True
fs_factorizable_noise = True
fs_sub_weighted_mean = True

# Angular lags
# When you run the first pass only to get just the modes (svd info),
# make it only go up to 0.15 and the correlation will take only a few
# minutes, not hours.
fs_lags = tuple(sp.arange(0.002, 2.0, 0.12))

# Frequency indices to use
fs_freq = range(50,60)
if True :
  fs_freq = range(256)
  fs_freq.remove(6)
  fs_freq.remove(7)
  fs_freq.remove(8)
  fs_freq.remove(15)
  fs_freq.remove(16)
  fs_freq.remove(18)
  fs_freq.remove(19)
  fs_freq.remove(20)
  fs_freq.remove(21)
  fs_freq.remove(22)
  fs_freq.remove(37)
  fs_freq.remove(103)
  fs_freq.remove(104)
  fs_freq.remove(105)
  fs_freq.remove(106)
  fs_freq.remove(107)
  fs_freq.remove(108)
  fs_freq.remove(130)
  fs_freq.remove(131)
  fs_freq.remove(132)
  fs_freq.remove(133)
  fs_freq.remove(134)
  fs_freq.remove(237)
  fs_freq.remove(244)
  fs_freq.remove(254)
  fs_freq.remove(255)
fs_freq = tuple(fs_freq)


# Does not do anything right now.
fs_make_plots = True




