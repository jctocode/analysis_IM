#Pipeline file for guppi data

import os

from core import dir_data
import scipy as sp

# Here you choose which files to process.
field = '15hr'
dm_field_centre = (218.25, 2.0) 
#Here I'm grabbing the guppi data
file_middles = tuple(dir_data.get_data_files(range(49,57) , '15hr', type='guppi'))

pipe_modules = []
# Chime has 8 cores, but you should save a few for other people.  Use 6 max.
pipe_processes = 6

base_dir = os.getenv('GBT10B_OUT')
#raw_data_dir = os.getenv('GBT10B_DATA')
kiyo_dir = os.getenv('GBT10B_KM')
prefix = ''
map_prefix = prefix + field + '_49-56_flux_pol_cal'
IFs = ()


#Hanning smoothing skipped with guppi data.
#from time_stream import hanning 
# Comment this line to skip this step when running python pipeline/manager
#pipe_modules.append(hanning.Hanning)
ha_input_root = kiyo_dir + '/guppi_data/'
ha_file_middles = file_middles
ha_input_end = ".fits"
ha_output_root = base_dir + 'hanning/'
ha_output_end = ".fits"
ha_scans = ()
# All following steps will inherit this choice by default (because these are
# the only IF's saved to the following fits files).
ha_IFs = IFs

from time_stream import flag_data
# Comment this line to skip this step when running python pipeline/manager
pipe_modules.append(flag_data.FlagData)
#fd_input_root = ha_output_root
fd_input_root = kiyo_dir + '/guppi_data/'
fd_file_middles = file_middles
fd_input_end = '.fits'
fd_output_root = base_dir + 'flagged/'
fd_output_end = '.fits'
fd_scans = ()
fd_IFs = ()

fd_rotate = True
fd_perform_hanning = False
fd_cal_scale = True
fd_sigma_thres = 6
fd_badness_thres = 0.1
fd_time_cut = 40

from time_stream import rebin_freq
# Comment this line to skip this step when running python pipeline/manager
pipe_modules.append(rebin_freq.RebinFreq)
rf_input_root = fd_output_root
rf_file_middles = file_middles
rf_input_end = '.fits'
rf_output_root = base_dir + 'rebinned/'
rf_output_end = '.fits'
rf_scans = ()
rf_IFs = ()

rf_channel_width = 0.
rf_n_bins_combined = 64
rf_mean_instead_median = False

from time_stream import rotate_pol
# Comment this line to skip this step in pipline.
pipe_modules.append(rotate_pol.RotatePol)
rp_input_root = rf_output_root
rp_file_middles = file_middles
rp_input_end = '.fits'
rp_output_root = base_dir + 'rotated_to_I_Q/'
rp_output_end = '.fits'
rp_scans = ()
rp_IFs = ()

rp_new_pols = (1,2,3,4)
rp_average_cals = False

from time_stream import flux_pol_cal
pipe_modules.append(flux_pol_cal.Calibrate)
tc_input_root = rp_output_root
tc_file_middles = file_middles
tc_input_end = '.fits'
tc_output_root = base_dir + 'flux_pol_cal/'
tc_output_end = '.fits'
tc_scans = ()
tc_IFs = ()

tc_mueler_file = base_dir + 'mueller_params/'

from time_stream import combine_cal
# Comment this line to skip this step in pipeline
pipe_modules.append(combine_cal.CombineCal)
cc_input_root =tc_output_root
cc_file_middles = file_middles
cc_input_end = '.fits'
cc_output_root = base_dir + 'combined/'
cc_output_end = '.fits'
cc_scans = ()
cc_IFs = ()

cc_subtract_time_mean = False
cc_average_cal_states = True
#c_weights = (0.5, 0.5)
#cc_weights = (0.0, 1.0)

from map import dirty_map
pipe_modules.append(dirty_map.DirtyMapMaker)
dm_input_root = cc_output_root
dm_file_middles = file_middles
dm_input_end = '.fits'
dm_output_root = base_dir + 'maps/' + map_prefix
dm_output_end = '.fits'
dm_scans = ()
dm_IFs = (0,)

dm_map_shape = (64,32)
#dm_map_shape = (70, 45)
#dm_map_shape = (100, 80)
dm_pixel_spacing = .075
dm_noise_model = 'disjoint_scans'
dm_polarizations = ('I','V')
dm_noise_parameters_input_root = 'None'

from map import clean_map
pipe_modules.append(clean_map.CleanMapMaker)
cm_input_root = dm_output_root
cm_output_root = cm_input_root
cm_polarizations = ('I','V')

# Not actually nessesary, but good do do anyway.
del file_middles
del base_dir
del prefix
del IFs

             
