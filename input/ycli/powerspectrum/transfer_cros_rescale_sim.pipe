#########################################################################
#                                                                       #
#      This pipeline is used to get the 2side transfer function         #
#      for cros power using simulation maps                             #
#                                                                       #
#########################################################################

import os
pipe_modules = []
pipe_processes = 1
WORKROOT = os.getenv('YICHAO_WORK_PS')

import data_paths
"""  simulation maps  """

print
print "="*50
print "cros transfer function"
print

map_sim = os.getenv('MAP_SIM')
map_ssm = os.getenv('MAP_SSM')
map_cln = os.getenv('MAP_CLN')
map_wgz = os.getenv('MAP_WGZ')

map_multiplier = float(os.getenv('MAP_MULTIPLIER'))

hour = int(os.getenv('HOUR'))
mode = int(os.getenv('MODE'))

sim_num = 100
#sim_num = 5


# for clean_{sim+map}(sim+map) 
resultf = 'simmaps1'   

datadb = data_paths.DataPath()

imap_list = []
imap_root = []
nmap_list = []
nmap_root = []
tabs_list = []

imap_list_multiply = []
imap_root_multiply = []
nmap_list_multiply = []
nmap_root_multiply = []
tabs_list_multiply = []

pkc_imap_list = []
pkc_nmap_list = []

output_root = ""

for i in range(sim_num):
    output_root = WORKROOT
    print map_ssm
    if os.path.exists(map_ssm):
        imaps_a = data_paths.get_mapdict(\
            #map_ssm + 'simmapmode_simmap_%03d/'%i)
            #map_ssm + 'simmapmode_simmap_beam_%03d/'%i)
            map_ssm + 'simmapmode_simmap_beam_%03d_subreal/'%i)
    else:
        imaps_a = datadb.fetch(map_ssm + '_combined', silent=True)

    if os.path.exists(map_cln):
        output_root += 'bias/cros_%s_%d_subreal/'%(map_cln.split('/')[-2], mode)
        #output_root += 'bias/cros_%s_%d/'%(map_cln.split('/')[-2], mode)
        nmaps_a = data_paths.get_mapdict(map_cln + 'mapmode_map/')
    else:
        nmaps_a = datadb.fetch(map_cln + '_combined', silent=True)
        #output_root += 'bias/cros_%s_%d_subreal/'%(map_cln + '_combined', mode)
        output_root += 'bias/cros_%s_%d/'%(map_cln.split('/')[-2], mode)
    
    if os.path.exists(map_sim):
        imaps_b = data_paths.get_mapdict(map_sim, selection='delta')
    else:
        imaps_b = datadb.fetch(map_sim + "_delta", silent=True)

    nmaps_b = datadb.fetch(map_wgz + "_selection", silent=True)

    mappath_a = imaps_a[1]['map;%dmodes'%mode]
    imap_list.append(mappath_a.split('/')[-1])
    imap_root.append(mappath_a.replace(mappath_a.split('/')[-1], ''))

    wetpath_a = nmaps_a[1]['weight;%dmodes'%mode]
    nmap_list.append(wetpath_a.split('/')[-1])
    nmap_root.append(wetpath_a.replace(wetpath_a.split('/')[-1], ''))
    
    tabs_list.append('1_%03d_'%i)

    mappath_b = imaps_b[1]['%d'%i]
    imap_list_multiply.append(mappath_b.split('/')[-1])
    imap_root_multiply.append(mappath_b.replace(mappath_b.split('/')[-1], ''))

    wetpath_b = nmaps_b
    nmap_list_multiply.append(wetpath_b.split('/')[-1])
    nmap_root_multiply.append(wetpath_b.replace(wetpath_b.split('/')[-1], 'no'))

    tabs_list_multiply.append('1_%03d_'%i)

    print
    print mappath_a
    print wetpath_a
    print mappath_b
    print wetpath_b

    pkc_imap_list.append(['1_%03d_'%i + mappath_a.split('/')[-1], 
                          '1_%03d_'%i + mappath_b.split('/')[-1]])
    pkc_nmap_list.append(['1_%03d_'%i + wetpath_a.split('/')[-1], 
                          '1_%03d_'%i + wetpath_b.split('/')[-1]])

print pkc_imap_list
print pkc_nmap_list

if os.path.exists(map_cln):
    bc_simmap_root = WORKROOT + 'reference_cros_%s_%d/'%(map_cln.split('/')[-2],mode)
else:
    bc_simmap_root = WORKROOT + 'reference_cors_%s_%d/'%(map_cln, mode)
    

cutlist = []
if hour==15:
    cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
           107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
           187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
           212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
elif hour==22:
    cutlist = [1,  2,  80, 206,201,200,196,192,189,186,182,217,212,211,223,229,
                  252,253,254,255,156,159,191,193,199,204,210,214,219,240,250,209,
                  215,213,187,198,157,197]
elif hour==1:
    cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
               107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
               187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
               212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
else:
    print 'no cutlist'

FKPweight = False 
kmin = 0.003
kmax = 2.5
kbinNum = 45

print
print "-"*50
print
print

#""" Pipe line """
from mkpower import prepare
pipe_modules.append(prepare.Prepare)

from mkpower import prepare
pipe_modules.append((prepare.Prepare, ('pre2_', 'pre_')))

from mkpower import mkpower_combine
pipe_modules.append(mkpower_combine.PowerSpectrumMaker)

from mkpower import bias
pipe_modules.append(bias.BiasCalibrate)
""" End """


"""  Prepare """
#from mkpower import prepare
#pipe_modules.append(prepare.Prepare)
pre_processes = 1 
pre_plot = False
#pre_plot = True
pre_output_root = output_root
pre_imap_root = imap_root
pre_nmap_root = nmap_root
pre_imap_list = imap_list
pre_nmap_list = nmap_list
pre_tabs_list = tabs_list

pre_boxshape = (512, 128, 64)
pre_discrete = 2
pre_boxunit = 2.
pre_cutlist = cutlist
pre_window = 'blackman'

pre2_processes = 1 
pre2_plot = False
#pre2_plot = True
pre2_output_root = output_root
pre2_imap_root = imap_root_multiply
pre2_nmap_root = nmap_root_multiply
pre2_imap_list = imap_list_multiply
pre2_nmap_list = nmap_list_multiply
pre2_tabs_list = tabs_list_multiply

pre2_boxshape = (512, 128, 64)
pre2_discrete = 2
pre2_boxunit = 2.
pre2_cutlist = cutlist
pre2_window = 'blackman'

pre2_map_multiplier = map_multiplier

"""  Calculate the combined Pk  """
#from mkpower import mkpower_combine
#pipe_modules.append(mkpower_combine.CrossPowerSpectrumMaker)
pkc_processes = 1 
pkc_plot = False 
pkc_saveweight = True
pkc_input_root = output_root
pkc_output_root = output_root
pkc_resultf = resultf

pkc_boxshape = pre_boxshape
pkc_discrete = pre_discrete
pkc_boxunit = pre_boxunit
pkc_kbinNum = kbinNum 
pkc_kmin = kmin
pkc_kmax = kmax

#pkc_FKPweight = True
pkc_FKPweight = FKPweight
pkc_OmegaHI = 1.e-3
pkc_Omegam = 0.24
pkc_OmegaL = 0.76

pkc_sme = False

""" Calibrate the Bias of the Power Spectrum  """
#form mkpower import bias
#pipe_modules.append(bias.BiasCalibrate)
bc_processes = 1
bc_plot = False
bc_input_root = output_root
bc_output_root = bc_input_root
bc_resultf = resultf
#bc_resultf0 = resultf0
bc_PKunit = 'mK'
bc_cross = False
