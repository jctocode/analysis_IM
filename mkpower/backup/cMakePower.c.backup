#include "cMakePower.h"

int fillingf(FillConf *conf){

//	for (int i=0; i<conf->ran; i++)
//		printf("%5.3f\t", conf->ra[i]);
//	printf("\n");
//	printf("%lg \n", conf->mapinf[3]);
//	for(int i=0; i<conf->mapshape[2]; i++)
//		printf("%5.3f\t", conf->map[i]);
//	printf("\n\n");

	double V = conf->boxinf[3]*conf->boxinf[3]*conf->boxinf[3];
	
	for(int i=0; i<conf->rn; i++)
		for(int j=0; j<conf->decn; j++){
			int z = (int)
				((conf->r[i]*cos(0.5*PI-conf->dec[j])
				-conf->boxinf[2])/conf->boxinf[3]);
			double v = conf->r[i]*conf->r[i]*sin(0.5*PI-conf->dec[j]);
			double alpha = v*conf->mapinf[0]*conf->mapinf[1]*conf->mapinf[2]/V;
//			printf("%5.4e\t", alpha);
			for(int k=0; k<conf->ran; k++){
				int indx = (int)
					(i/conf->mapinf[3])*conf->mapshape[1]*conf->mapshape[2] +
					(k/conf->mapinf[3])*conf->mapshape[2] +
					(j/conf->mapinf[3]);
				double value = conf->map[indx];
				double value2 = conf->map2[indx];
				if(value==0 && value2==0) continue;
				int x = (int)
					((conf->r[i]*sin(0.5*PI-conf->dec[j])*cos(conf->ra[k])
					-conf->boxinf[0])/conf->boxinf[3]);
				int y = (int)
					((conf->r[i]*sin(0.5*PI-conf->dec[j])*sin(conf->ra[k])
					-conf->boxinf[1])/conf->boxinf[3]);
				indx = x*conf->boxshape[1]*conf->boxshape[2]+y*conf->boxshape[2]+z;
				conf->box[indx] += value*alpha;
				conf->box2[indx] += value2*alpha;

			}
		}
	
	double MAX = -1.e10; double MIN = 1.e10;
	double MAX2 = -1.e10; double MIN2 = 1.e10;
	for(int i=0; i<conf->boxshape[0]*conf->boxshape[1]*conf->boxshape[2]; i++){
		if(conf->box[i]>MAX) MAX = conf->box[i];
		if(conf->box[i]<MIN) MIN = conf->box[i];
		if(conf->box2[i]>MAX2) MAX2 = conf->box2[i];
		if(conf->box2[i]<MIN2) MIN2 = conf->box2[i];
	}
	printf("MAX = %lg , MIN = %lg\n", MAX, MIN);
	printf("MAX2 = %lg , MIN2 = %lg\n", MAX2, MIN2);



	return 0;

}


int makepk(FFT *fft, PK *pk){
//	printf("%lg\n\n", fft->data[1]);
//	for(int i=0; i<pk->N; i++)
//		printf("%5.4f\t",pk->val[i]);
//	printf("\n");
	int N = fft->size;
	double kmax = N*sqrt(3.);
	double kmin = 1.;
	double dk = pow(10, log10(kmax/kmin)/pk->N);
	double *kn = (double *)malloc(pk->N*sizeof(double));
	double **kn2 = (double **)malloc(pk->N*sizeof(double*));
	for(int i=0; i<pk->N; i++){
		kn[i] = 0;
		kn2[i] = (double *)malloc(pk->N*sizeof(double));
		for(int j=0; j<pk->N; j++)
			kn2[i][j] = 0.;

	}
	
	
	for(int i=1; i<N*N*N; i++){
		int z = (int)(i/(N*N));
		int y = (int)((i-z*N*N)/N);
		int x = (int)(i-z*N*N-y*N);
		int idx, idxp, idxv;
		double result0, result1;

		result0 = sqrt(x*x+y*y+z*z);
		result1 = fft->data[i];
		idx = (int)(log10(result0/kmin)/log10(dk));
		pk->val[idx] = pk->val[idx] + result1;
		kn[idx] = kn[idx] + 1.;
		result0 = x;
		idxp = (int)(log10(result0/kmin)/log10(dk));
		result0 = sqrt(y*y+z*z);
		idxv = (int)(log10(result0/kmin)/log10(dk));
		pk->val2[idxp*pk->N+idxv] = pk->val2[idxp*pk->N+idxv] + result1;
		kn2[idxp][idxv] = kn2[idxp][idxv] + 1.;

		result0 = sqrt(x*x+(y-N)*(y-N)+z*z);
		result1 = fft->data[i];
		idx = (int)(log10(result0/kmin)/log10(dk));
		pk->val[idx] = pk->val[idx] + result1;
		kn[idx] = kn[idx] + 1.;
		result0 = x;
		idxp = (int)(log10(result0/kmin)/log10(dk));
		result0 = sqrt((y-N)*(y-N)+z*z);
		idxv = (int)(log10(result0/kmin)/log10(dk));
		pk->val2[idxp*pk->N+idxv] = pk->val2[idxp*pk->N+idxv] + result1;
		kn2[idxp][idxv] = kn2[idxp][idxv] + 1.;

		result0 = sqrt((x-N)*(x-N)+y*y+z*z);
		result1 = fft->data[i];
		idx = (int)(log10(result0/kmin)/log10(dk));
		pk->val[idx] = pk->val[idx] + result1;
		kn[idx] = kn[idx] + 1.;
		result0 = (x-N);
		idxp = (int)(log10(result0/kmin)/log10(dk));
		result0 = sqrt(y*y+z*z);
		idxv = (int)(log10(result0/kmin)/log10(dk));
		pk->val2[idxp*pk->N+idxv] = pk->val2[idxp*pk->N+idxv] + result1;
		kn2[idxp][idxv] = kn2[idxp][idxv] + 1.;

		result0 = sqrt((x-N)*(x-N)+(y-N)*(y-N)+z*z);
		result1 = fft->data[i];
		idx = (int)(log10(result0/kmin)/log10(dk));
		pk->val[idx] = pk->val[idx] + result1;
		kn[idx] = kn[idx] + 1.;
		result0 = (x-N);
		idxp = (int)(log10(result0/kmin)/log10(dk));
		result0 = sqrt((y-N)*(y-N)+z*z);
		idxv = (int)(log10(result0/kmin)/log10(dk));
		pk->val2[idxp*pk->N+idxv] = pk->val2[idxp*pk->N+idxv] + result1;
		kn2[idxp][idxv] = kn2[idxp][idxv] + 1.;

		result0 = sqrt(x*x+y*y+(z-N)*(z-N));
		result1 = fft->data[i];
		idx = (int)(log10(result0/kmin)/log10(dk));
		pk->val[idx] = pk->val[idx] + result1;
		kn[idx] = kn[idx] + 1.;
		result0 = x;
		idxp = (int)(log10(result0/kmin)/log10(dk));
		result0 = sqrt(y*y+(z-N)*(z-N));
		idxv = (int)(log10(result0/kmin)/log10(dk));
		pk->val2[idxp*pk->N+idxv] = pk->val2[idxp*pk->N+idxv] + result1;
		kn2[idxp][idxv] = kn2[idxp][idxv] + 1.;

		result0 = sqrt(x*x+(y-N)*(y-N)+(z-N)*(z-N));
		result1 = fft->data[i];
		idx = (int)(log10(result0/kmin)/log10(dk));
		pk->val[idx] = pk->val[idx] + result1;
		kn[idx] = kn[idx] + 1.;
		result0 = x;
		idxp = (int)(log10(result0/kmin)/log10(dk));
		result0 = sqrt((y-N)*(y-N)+(z-N)*(z-N));
		idxv = (int)(log10(result0/kmin)/log10(dk));
		pk->val2[idxp*pk->N+idxv] = pk->val2[idxp*pk->N+idxv] + result1;
		kn2[idxp][idxv] = kn2[idxp][idxv] + 1.;

		result0 = sqrt((x-N)*(x-N)+y*y+(z-N)*(z-N));
		result1 = fft->data[i];
		idx = (int)(log10(result0/kmin)/log10(dk));
		pk->val[idx] = pk->val[idx] + result1;
		kn[idx] = kn[idx] + 1.;
		result0 = (x-N);
		idxp = (int)(log10(result0/kmin)/log10(dk));
		result0 = sqrt(y*y+(z-N)*(z-N));
		idxv = (int)(log10(result0/kmin)/log10(dk));
		pk->val2[idxp*pk->N+idxv] = pk->val2[idxp*pk->N+idxv] + result1;
		kn2[idxp][idxv] = kn2[idxp][idxv] + 1.;

		result0 = sqrt((x-N)*(x-N)+(y-N)*(y-N)+(z-N)*(z-N));
		result1 = fft->data[i];
		idx = (int)(log10(result0/kmin)/log10(dk));
		pk->val[idx] = pk->val[idx] + result1;
		kn[idx] = kn[idx] + 1.;
		result0 = (x-N);
		idxp = (int)(log10(result0/kmin)/log10(dk));
		result0 = sqrt((y-N)*(y-N)+(z-N)*(z-N));
		idxv = (int)(log10(result0/kmin)/log10(dk));
		pk->val2[idxp*pk->N+idxv] = pk->val2[idxp*pk->N+idxv] + result1;
		kn2[idxp][idxv] = kn2[idxp][idxv] + 1.;
	}

	for(int i=0; i<pk->N; i++){
		if(kn[i]!=0) 
			pk->val[i] /= kn[i];
		pk->k[i] = kmin*pow(dk, i);
		pk->k2[i] = kmin*pow(dk, i);
		pk->k2[i+pk->N] = kmin*pow(dk, i);
		for(int j=0; j<pk->N; j++)
			if(kn2[i][j]!=0)
				pk->val2[i*pk->N+j] /= kn2[i][j];
	}

	free(kn);
	free(kn2);
	return 0;
}
