# Preparation pipeline for calibrator files before mueller_gen is run.

import os

from core import dir_data

file_middles = tuple(dir_data.get_cal_files(range(0,40),'286'))
#file_middles = ('25_3c286_onoff_21-24','25_3c286_onoff_305-308','27_3c286_onoff_5-8')  

pipe_modules = []
# Chime has 8 cores, but you should save a few for other people.  Use 6 max.
pipe_processes = 6
#pipe_processes = 6

base_dir = os.getenv('GBT10B_OUT')
raw_data_dir = os.getenv('GBT10B_DATA')
kiyo_dir = os.getenv('GBT10B_KM')
prefix = ''
IFs = ()

from time_stream import hanning 
# Comment this line to skip this step when running python pipeline/manager
pipe_modules.append(hanning.Hanning)
ha_input_root = raw_data_dir
ha_file_middles = file_middles
ha_input_end = ".raw.acs.fits"
ha_output_root = base_dir + 'hanning/'
ha_output_end = ".fits"
ha_scans = ()
# All following steps will inherit this choice by default (because these are
# the only IF's saved to the following fits files).
ha_IFs = IFs

from time_stream import flag_data
# Comment this line to skip this step when running python pipeline/manager
pipe_modules.append(flag_data.FlagData)
fd_input_root = ha_output_root
fd_file_middles = file_middles
fd_input_end = '.fits'
fd_output_root = base_dir + 'flagged/'
fd_output_end = '.fits'
fd_scans = ()
fd_IFs = ()

fd_sigma_thres = 8
fd_pol_thres = 8
fd_pol_width = 2
fd_flatten_pol = True
fd_derivative_cuts = 5
fd_derivative_width = 1

from time_stream import rebin_freq
# Comment this line to skip this step when running python pipeline/manager
pipe_modules.append(rebin_freq.RebinFreq)
rf_input_root = fd_output_root
rf_file_middles = file_middles
rf_input_end = '.fits'
rf_output_root = base_dir + 'rebinned/'
rf_output_end = '.fits'
rf_scans = ()
rf_IFs = ()

rf_channel_width = 1.0
rf_mean_instead_median = True

from time_stream import stitch_windows_crude
#Comment the following line to skip this step when running pipeline/manager
pipe_modules.append(stitch_windows_crude.Stitch)
sw_input_root = rf_output_root
sw_file_middles = file_middles
sw_input_end = '.fits'
sw_output_root = base_dir + 'stitched/'
sw_output_end = '.fits'
sw_scans = ()
sw_IFs = ()

from time_stream import cal_scale
# Comment the following line to skip this step when running pipeline/manager
pipe_modules.append(cal_scale.CalScale)
cs_input_root = sw_output_root
cs_file_middles = file_middles
cs_input_end = '.fits'
cs_output_root = base_dir + 'cal_scaled/'
cs_output_end = '.fits'
cs_scans = ()
cs_IFs = ()

cs_scale_time_average = True
cs_scale_freq_average = False
cs_subtract_time_median = False
cs_scale_time_average_mod = False

from time_stream import calibrate
# Comment line below to skip this step when running pipeline/manager
pipe_modules.append(calibrate.Calibrate)
cl_input_root = cs_output_root
cl_file_middles = file_middles
cl_input_end = '.fits'
cl_output_root = base_dir + 'calibrated/'
cl_output_end = '.fits'
cl_scans = ()
cl_IFs = ()

cl_cal_temperature_files = (os.getenv('GBT10B_KM') + 'kevin_cal/cal_21.fits',)

from time_stream import rotate_pol
# Comment this line to skip this step in pipline.
pipe_modules.append(rotate_pol.RotatePol)
rp_input_root = cl_output_root
rp_file_middles = file_middles
rp_input_end = '.fits'
rp_output_root = base_dir + 'rotated_for_pol_cal/'
rp_output_end = '.fits'
rp_scans = ()
rp_IFs = ()

rp_new_pols = (1,2,3,4)
rp_average_cals = False
           
