pipe_modules = []
pipe_processes = 1

from quadratic_products import pwrspec_combinations

# main parameters that define the run
do_physpower_1 = True
do_physpower_2 = True
do_physpower_3 = False

# input path
simdir_1 = "/mnt/raid-project/gmrt/goblot/2df_delta.npy"
simdir_2 = "/mnt/raid-project/gmrt/goblot/2df_kappa.npy"

# output path
pwrout_root = "/mnt/raid-project/gmrt/mufma/goblot_pwrspec"
physpwrdir = pwrout_root

# power spectrum settings
pwr_unitless = True
pwr_return_3d = False
pwr_truncate = False
pwr_window = "blackman"
pwr_bins = [0.04974257, 1.57, 45]

if do_physpower_1:
    pipe_modules.append((pwrspec_combinations.SinglePhysicalSim,('sps1_','sps_')))
sps1_sim_file_left = simdir_1
sps1_sim_file_right = simdir_1
sps1_unitless = pwr_unitless
sps1_return_3d = pwr_return_3d
sps1_truncate = pwr_truncate
sps1_window = pwr_window
sps1_bins = pwr_bins
sps1_ncpu = 1
sps1_outfile = "%s/pwr_delta.shelve" %physpwrdir

if do_physpower_2:
    pipe_modules.append((pwrspec_combinations.SinglePhysicalSim,('sps2_','sps_')))
sps2_sim_file_left = simdir_2
sps2_sim_file_right = simdir_2
sps2_unitless = pwr_unitless
sps2_return_3d = pwr_return_3d
sps2_truncate = pwr_truncate
sps2_window = pwr_window
sps2_bins = pwr_bins
sps2_ncpu = 1
sps2_outfile = "%s/pwr_kappa.shelve" %physpwrdir

if do_physpower_3:
    pipe_modules.append((pwrspec_combinations.SinglePhysicalSim,('sps3_','sps_')))
sps3_sim_file_left = simdir_1
sps3_sim_file_right = simdir_2
sps3_unitless = pwr_unitless
sps3_return_3d = pwr_return_3d
sps3_truncate = pwr_truncate
sps3_window = pwr_window
sps3_bins = pwr_bins
sps3_ncpu = 1
sps3_outfile = "%s/cross_pwr_kap_del.shelve" %physpwrdir

