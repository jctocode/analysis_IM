# Pipeline file for testing new map making.

import os

from core import dir_data
import scipy as sp


field = '15hr'
file_middles = tuple(dir_data.get_data_files([47, 48], '15hr', 
                                             type='guppi'))

file_middles = tuple(dir_data.get_data_files([48], '15hr', 
                                             type='guppi'))



base_dir = os.getenv('GBT10B_OUT')
data_dir = os.getenv('GBT10B_KM') + '/guppi_data/'
prefix = ''
map_prefix = 'new_maptest_' + field + '_' + '41-73' + '_'

pipe_modules = []
pipe_processes = 1

sf_output_root = base_dir + 'reflagged/'
sm_output_root = base_dir + 'map_subtracted/'

from noise import measure_noise
#pipe_modules.append(measure_noise.Measure)
mn_input_root = sm_output_root
mn_file_middles = file_middles
mn_input_end = '.fits'
mn_output_root = base_dir + 'noise_measurments/'

mn_output_filename = (base_dir + "noise_measurments"
                      + "/overf_noise_parameters.shelf")
mn_model = "correlated_overf"

from map import dirty_map
pipe_modules.append(dirty_map.DirtyMap)
dm_input_root = sf_output_root
dm_file_middles = file_middles
dm_input_end = '.fits'
dm_output_root = base_dir + 'maps/' + map_prefix
dm_scans = ()
dm_IFs = (0,)

dm_field_centre = (217.9, 2.0)
dm_map_shape = (64, 32)
dm_pixel_spacing = .075
dm_noise_model = 'disjoint_scans'
dm_polarizations = ('I',)
dm_noise_parameters_filename = mn_output_filename

