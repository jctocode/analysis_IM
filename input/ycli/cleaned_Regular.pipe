# pipeline for  foreground clean

pipe_modules = []
pipe_processes = 1


from foreground_clean import pair_set_legendre
from foreground_clean import pair_set

#from quadratic_products import pwrspec_combinations
#from quadratic_products import pwrspec_compile

from map import simulate_gbt
import struct
import os


do_IxIsvd = False
do_simulation = True

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------

# This is the database key for the input map
basemap = os.getenv('MAPFILE')
noiseweight = os.getenv('NOISEWEIGHT')
simroot = os.getenv('SIMROOT') # simulation file root
simfile = os.getenv('SIMFILE') # simulation file number

goodmodes = int(os.getenv('GOODMODES'))

nfreq = 256 
cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
           107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
           187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
           212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
freq_list = tuple([ind for ind in range(nfreq) if ind not in cutlist])
mode_list = range(0, 5, 1)
common_res_convolution = False
sub_weighted_mean = True
sim_multiplier = 1.

output_root = '/mnt/raid-project/gmrt/ycli/foreground_cleand/'
output_root += 'GBT_15hr_41-90_fdgp_RM_legendre_modes_%dgwj'%goodmodes


#-----------------------------------------------------------------------------
# use the base map parameters above to make a few map cleaning cases
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# use I x I find the first 5 svd modes
#-----------------------------------------------------------------------------
if do_IxIsvd:
    pairlist = ['I_with_I',] 
    pairdict = {}
    pairdict['I_with_I'] = {}
    pairdict['I_with_I']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_I']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_I']['noise_inv1'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_I']['noise_inv2'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_I']['tag1'] = 'I'
    pairdict['I_with_I']['tag2'] = 'I'
    
    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs0_', 'fs_')))

    fs0_pairlist = pairlist
    fs0_pairdict = pairdict
    fs0_calc_diagnal = True
    fs0_output_root = output_root + "/mapmode_map/"
    fs0_freq_list = freq_list
    fs0_modes = range(0, 55, 5)
    fs0_factorizable_noise = True
    fs0_convolve = common_res_convolution
    fs0_sub_weighted_mean = sub_weighted_mean
    fs0_good_modes = goodmodes
    fs0_freq_n_all = nfreq

#-----------------------------------------------------------------------------
# generate simulation maps for GBT and WiggleZ
#-----------------------------------------------------------------------------
if do_simulation:
    instance_seed = struct.unpack("I", os.urandom(4))[0]
    #print "generating simulation with seed: %d" % instance_seed

    #pipe_modules.append((simulate_gbt.SimulateGbt, ('sg1_', 'sg_')))
    sg1_output_root = simroot
    sg1_template_file = output_root +\
        "/IQUmap_clean_withIxIsvd/combined_clean_weight_0modes.npy"
    sg1_seed = instance_seed
    sg1_refinement = 2
    sg1_weightfile = output_root +\
        "/IQUmap_clean_withIxIsvd/combined_clean_weight_0modes.npy"
    sg1_outfile_meansub = "sim_beammeansub_%03d.npy" % int(simfile)
    sg1_outfile_raw = "sim_raw_%03d.npy" % int(simfile)
    sg1_outfile_delta = "sim_delta_%03d.npy" % int(simfile)
    sg1_outfile_physical = "sim_phys_%03d.npy" % int(simfile)

    # clean_{map+sim} (map+sim) 
    pairlist = ['I_with_I',] 
    pairdict = {}
    pairdict['I_with_I'] = {}
    pairdict['I_with_I']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_I']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_I']['noise_inv1'] = output_root + '/mapmode_map/'
    pairdict['I_with_I']['noise_inv1']+= "sec_I_cleaned_noise_inv_I_with_I_0modes.npy"
    pairdict['I_with_I']['noise_inv2'] =  output_root + '/mapmode_map/'
    pairdict['I_with_I']['noise_inv2']+= "sec_I_cleaned_noise_inv_I_with_I_0modes.npy"
    pairdict['I_with_I']['tag1'] = 'I'
    pairdict['I_with_I']['tag2'] = 'I'
    
    
    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs3_', 'fs_')))
    fs3_pairlist = pairlist
    fs3_pairdict = pairdict
    #fs3_calc_diagnal = True
    fs3_output_root = output_root + "/simmapmode_simmap_%s/" % simfile
    fs3_freq_list = freq_list
    fs3_modes = range(0, 55, 5)
    fs3_factorizable_noise = True
    fs3_convolve = common_res_convolution
    fs3_sub_weighted_mean = sub_weighted_mean
    fs3_simfile = sg1_output_root + sg1_outfile_raw
    fs3_sim_multiplier = sim_multiplier
    fs3_subtract_inputmap_from_sim = False
    fs3_subtract_sim_from_inputmap = False
    fs3_good_modes = goodmodes
    fs3_freq_n_all = nfreq
    #fs3_save_section = False
    
