pipe_modules = []
pipe_processes = 1

from quadratic_products import pwrspec_combinations
from quadratic_products import pwrspec_compile
import os

basemap = "GBT_1hr_map_oldcal"
baseoptmap = "WiggleZ_1hr"
basecross = basemap + "_x_" + baseoptmap
#output_tag = basecross + "_" + "blackman_order1"
output_tag = basecross + "_" + "order1"

do_crosspower=True
do_crossanalysis=True

nfreq = 256
cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
               107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
               187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
               212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
freq_list = tuple([ind for ind in range(nfreq) if ind not in cutlist])

pwr_bins = [0.003, 2.5, 45]
pwr_order = 1
pwr_pad = 5
pwr_refinement = 1
#pwr_window = "blackman"
pwr_window = None
pwr_return_3d = False
pwr_unitless = True
pwr_truncate = False
pwr_degrade_resolution = False
pwr_factorizable_noise = False
pwr_meansub = False
pwrout_root = '/mnt/raid-project/gmrt/eswitzer/GBT/pwrspec/'
bulksim_root = '/mnt/raid-project/gmrt/eswitzer/GBT/bulksim/'
pwrout_base = pwrout_root + output_tag + "/"
beam_transferfile = None
mode_transferfile = None
#mode_transferfile = "%s/%s_modetransfer.shelve" % (bulksim_root, output_tag)
#beam_transferfile = "%s/%s_beamtransfer.shelve" % (bulksim_root, output_tag)
#mode_transferfile = "/mnt/raid-project/gmrt/eswitzer/GBT/bulksim//GBT_1hr_map_oldcal_x_WiggleZ_1hr_blackman_order1_modetransfer.shelve"
#beam_transferfile = "/mnt/raid-project/gmrt/eswitzer/GBT/bulksim//GBT_1hr_map_oldcal_x_WiggleZ_1hr_blackman_order1_beamtransfer.shelve"
#-----------------------------------------------------------------------------
# now run the power spectra
#-----------------------------------------------------------------------------
if not os.path.isdir(pwrout_base):
    os.mkdir(pwrout_base)

if do_crosspower:
    pipe_modules.append((pwrspec_combinations.WiggleZxGBT, ('wxs1_', 'wxs_')))
wxs1_map_key = basemap + "_cleaned_combined"
wxs1_wigglez_key = baseoptmap + "_delta_binned_data"
wxs1_wigglez_sel_key = baseoptmap + "_separable_selection"
wxs1_wigglez_mock_key = baseoptmap + "_delta_mock"
wxs1_outfile_mock = pwrout_base + basecross + "_mock.shelve"
wxs1_outfile_data = pwrout_base + basecross + "_data.shelve"
wxs1_unitless = pwr_unitless
wxs1_return_3d = pwr_return_3d
wxs1_truncate = pwr_truncate
wxs1_window = pwr_window
wxs1_degrade_resolution = pwr_degrade_resolution
wxs1_factorizable_noise = pwr_factorizable_noise
wxs1_meansub = False
wxs1_refinement = pwr_refinement
wxs1_pad = pwr_pad
wxs1_order = pwr_order
wxs1_freq_list = freq_list
wxs1_bins = pwr_bins

#-----------------------------------------------------------------------------
# analyze the cross power data product
#-----------------------------------------------------------------------------
if do_crossanalysis:
    pipe_modules.append((pwrspec_compile.CompileCrosspower, ('cwxs1_', 'crosspower_')))
cwxs1_p_data = wxs1_outfile_data
cwxs1_p_mock = wxs1_outfile_mock
cwxs1_apply_2d_beamtransfer = beam_transferfile
cwxs1_apply_2d_modetransfer = mode_transferfile
cwxs1_use_noiseweights_2dto1d = True
cwxs1_outdir = "./pwrspec_plots/" + output_tag + "_noiseweight/"

if do_crossanalysis:
    pipe_modules.append((pwrspec_compile.CompileCrosspower, ('cwxs2_', 'crosspower_')))
cwxs2_p_data = wxs1_outfile_data
cwxs2_p_mock = wxs1_outfile_mock
cwxs2_apply_2d_beamtransfer = beam_transferfile
cwxs2_apply_2d_modetransfer = mode_transferfile
cwxs2_use_noiseweights_2dto1d = False
cwxs2_outdir = "./pwrspec_plots/" + output_tag + "_countweight/"

