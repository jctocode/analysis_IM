pipe_modules = []
pipe_processes = 1

from foreground_clean import pair_set
from quadratic_products import pwrspec_combinations
from quadratic_products import pwrspec_compile
import os

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------

# This is the database key for the input map
basemap = 'GBT_15hr_optimalmap_selfcal_762'
# and an identifer for this run (any keywords)
output_tag = basemap + "_" + "blackman_order1"

# control the main operations
do_cleaning = False
do_power = False
do_power_compile = True

# map cleaning control
nfreq = 40
cutlist = []
freq_list = tuple([ind for ind in range(nfreq) if ind not in cutlist])
mode_list = range(0, 50, 5)
common_res_convolution = False
sub_weighted_mean = True
simfile = '/mnt/raid-project/gmrt/eswitzer/GBT/simulations/15hr_optimalmap762_str/sim_beam_000.npy'
sim_multiplier = 1.
output_root = basemap + "_cleaned"

# now the power spectral parameters
pwr_bins = [0.00765314, 2.49977141, 35]
pwr_order = 1
pwr_pad = 5
pwr_refinement = 2
pwr_window = "blackman"
pwr_return_3d = False
pwr_unitless = True
pwr_truncate = False
pwrout_root = '/mnt/raid-project/gmrt/eswitzer/GBT/pwrspec/'
pwrout_base = pwrout_root + output_tag + "/"
pwrout_plots = "./pwrspec_plots/" + output_tag + "/"

#-----------------------------------------------------------------------------
# use the base map parameters above to make a few map cleaning cases
#-----------------------------------------------------------------------------
# clean_{map} (map)
if do_cleaning:
    pipe_modules.append((pair_set.PairSet, ('fs1_', 'fs_')))
fs1_map2 = basemap
fs1_map1 = basemap
fs1_noise_inv1 = basemap
fs1_noise_inv2 = basemap
fs1_output_root = output_root + "_path_Eric"
fs1_freq_list = freq_list
fs1_modes = mode_list
fs1_factorizable_noise = True
fs1_convolve = common_res_convolution
fs1_sub_weighted_mean = sub_weighted_mean

# clean_{map+sim} (map+sim)
if do_cleaning:
    pipe_modules.append((pair_set.PairSet, ('fs2_', 'fs_')))
fs2_map2 = basemap
fs2_map1 = basemap
fs2_noise_inv1 = basemap
fs2_noise_inv2 = basemap
fs2_output_root = output_root + "_plussim_path_Eric"
fs2_freq_list = freq_list
fs2_modes = mode_list
fs2_factorizable_noise = True
fs2_convolve = common_res_convolution
fs2_sub_weighted_mean = sub_weighted_mean
fs2_simfile = simfile
fs2_sim_multiplier = sim_multiplier
fs2_subtract_inputmap_from_sim = False
fs2_subtract_sim_from_inputmap = False

# clean_{map+sim} (sim)
if do_cleaning:
    pipe_modules.append((pair_set.PairSet, ('fs3_', 'fs_')))
fs3_map2 = basemap
fs3_map1 = basemap
fs3_noise_inv1 = basemap
fs3_noise_inv2 = basemap
fs3_output_root = output_root + "_plussim_minusmap_path_Eric"
fs3_freq_list = freq_list
fs3_modes = mode_list
fs3_factorizable_noise = True
fs3_convolve = common_res_convolution
fs3_sub_weighted_mean = sub_weighted_mean
fs3_simfile = simfile
fs3_sim_multiplier = sim_multiplier
fs3_subtract_inputmap_from_sim = True
fs3_subtract_sim_from_inputmap = False

# clean_{map+sim} (map)
if do_cleaning:
    pipe_modules.append((pair_set.PairSet, ('fs4_', 'fs_')))
fs4_map2 = basemap
fs4_map1 = basemap
fs4_noise_inv1 = basemap
fs4_noise_inv2 = basemap
fs4_output_root = output_root + "_plussim_minussim_path_Eric"
fs4_freq_list = freq_list
fs4_modes = mode_list
fs4_factorizable_noise = True
fs4_convolve = common_res_convolution
fs4_sub_weighted_mean = sub_weighted_mean
fs4_simfile = simfile
fs4_sim_multiplier = sim_multiplier
fs4_subtract_inputmap_from_sim = False
fs4_subtract_sim_from_inputmap = True

#-----------------------------------------------------------------------------
# now run the power spectra
#-----------------------------------------------------------------------------
if not os.path.isdir(pwrout_base):
    os.mkdir(pwrout_base)

if do_power:
    pipe_modules.append((pwrspec_combinations.PwrspecCombinations, ('xs1_', 'xs_')))
xs1_unitless = pwr_unitless
xs1_return_3d = pwr_return_3d
xs1_truncate = pwr_truncate
xs1_window = pwr_window
xs1_refinement = pwr_refinement
xs1_pad = pwr_pad
xs1_order = pwr_order
xs1_bins = pwr_bins
xs1_freq_list = freq_list
xs1_map_key = basemap + "_cleaned"
xs1_outfile = pwrout_base + basemap + ".shelve"

if do_power:
    pipe_modules.append((pwrspec_combinations.PwrspecCombinations, ('xs2_', 'xs_')))
xs2_unitless = pwr_unitless
xs2_return_3d = pwr_return_3d
xs2_truncate = pwr_truncate
xs2_window = pwr_window
xs2_refinement = pwr_refinement
xs2_pad = pwr_pad
xs2_order = pwr_order
xs2_bins = pwr_bins
xs2_freq_list = freq_list
xs2_map_key = basemap + "_cleaned_plussim"
xs2_outfile = pwrout_base + basemap + "_plussim.shelve"

if do_power:
    pipe_modules.append((pwrspec_combinations.PwrspecCombinations, ('xs3_', 'xs_')))
xs3_unitless = pwr_unitless
xs3_return_3d = pwr_return_3d
xs3_truncate = pwr_truncate
xs3_window = pwr_window
xs3_refinement = pwr_refinement
xs3_pad = pwr_pad
xs3_order = pwr_order
xs3_bins = pwr_bins
xs3_freq_list = freq_list
xs3_map_key = basemap + "_cleaned_plussim_minusmap"
xs3_outfile = pwrout_base + basemap + "_plussim_minusmap.shelve"

#-----------------------------------------------------------------------------
# compile the outputs into some plots
#-----------------------------------------------------------------------------
if not os.path.isdir(pwrout_plots):
    os.mkdir(pwrout_plots)

if do_power_compile:
    pipe_modules.append(pwrspec_compile.CompileAutopower)
autopower_p_map = pwrout_base + basemap + ".shelve"
autopower_p_map_plussim = pwrout_base + basemap + "_plussim.shelve"
autopower_p_cleaned_sim = pwrout_base + basemap + "_plussim_minusmap.shelve"
autopower_outdir = pwrout_plots
