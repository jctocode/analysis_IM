pipe_modules = []
pipe_processes = 1

from map import simulate_gbt
from quadratic_products import pwrspec_combinations
from foreground_clean import pair_set
import struct
import os

# flags for scinet vs. tpb
basedir = "/mnt/raid-project/gmrt/eswitzer/GBT/"
#basedir = "/scratch/r/rbond/eswitzer/GBT/"

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------
#randsource = open("/dev/random", "rb")
#instance_seed = struct.unpack("I", randsource.read(4))[0]
instance_seed = struct.unpack("I", os.urandom(4))[0]
print "generating simulation with seed: %d" % instance_seed

do_simulation = True
do_cleaning = True
do_mode_crosspower = True
do_cleanup = True
do_beam_crosspower = True
# two special cases:
do_minussim = True
do_minusmap = False

# main control flags
basemap = "GBT_1hr_map_oldcalkiyo"
baseoptmap = "WiggleZ_1hr_v2"
# this is used to get the map geometry and as a weight in the meansub
map_template = basedir + "cleaned_maps/GBT_1hr_map_oldcalkiyo/combined_clean_weight_0modes.npy"
basecross = basemap + "_x_" + baseoptmap
#output_tag = basecross + "_" + "blackman_order1"
output_tag = basecross + "_" + "order1"

nfreq = 240
cutlist = []
freq_list = tuple([ind for ind in range(nfreq) if ind not in cutlist])

# cleaning settings
clean_factorizable = True
clean_common_res_convolution = False
clean_sub_weighted_mean = True
clean_sim_multiplier = 1.
clean_mode_list = range(0, 105, 5)

# power spectrum settings
pwr_bins = [0.003, 2.5, 45]
#pwr_bins = [0.00765314, 2.49977141, 35]
pwr_order = 1
pwr_pad = 5
pwr_refinement = 1
#pwr_window = "blackman"
pwr_window = None
pwr_return_3d = False
pwr_unitless = True
pwr_truncate = False
pwr_degrade_resolution = False
pwr_factorizable_noise = False
pwr_meansub = False
pwrout_root = basedir + 'bulksim/'
pwrout_base = pwrout_root + output_tag

#-----------------------------------------------------------------------------
# should not need to change setting below unless for new structure
#-----------------------------------------------------------------------------
if not os.path.isdir(pwrout_base + "_sims/"):
    os.mkdir(pwrout_base + "_sims/")

if not os.path.isdir(pwrout_base + "_obsbeammeansub"):
    os.mkdir(pwrout_base + "_obsbeammeansub")

if not os.path.isdir(pwrout_base + "_modeclean_plussim"):
    os.mkdir(pwrout_base + "_modeclean_plussim")

if not os.path.isdir(pwrout_base + "_modeclean_plussim_minusmap"):
    os.mkdir(pwrout_base + "_modeclean_plussim_minusmap")

if not os.path.isdir(pwrout_base + "_modeclean_plussim_minussim"):
    os.mkdir(pwrout_base + "_modeclean_plussim_minussim")

if not os.path.isdir(pwrout_base + "_obs/"):
    os.mkdir(pwrout_base + "_obs/")

if not os.path.isdir(pwrout_base + "_phys/"):
    os.mkdir(pwrout_base + "_phys/")

#-----------------------------------------------------------------------------
# generate the simulations
#-----------------------------------------------------------------------------
if do_simulation:
    pipe_modules.append((simulate_gbt.SimulateGbt, ('sg1_', 'sg_')))
sg1_output_root = pwrout_base + "_sims/"
sg1_template_file = map_template
sg1_seed = instance_seed
sg1_refinement = 2
sg1_weightfile = map_template
sg1_outfile_meansub = "%s_sim_beammeansub_%d.npy" % (output_tag, sg1_seed)
sg1_outfile_raw = "%s_sim_raw_%d.npy" % (output_tag, sg1_seed)
sg1_outfile_delta = "%s_sim_delta_%d.npy" % (output_tag, sg1_seed)
sg1_outfile_physical = "%s_sim_phys_%d.npy" % (output_tag, sg1_seed)

#-----------------------------------------------------------------------------
# clean_{map+sim} (map+sim)
#-----------------------------------------------------------------------------
if do_cleaning:
    pipe_modules.append((pair_set.PairSet, ('fs1_', 'fs_')))
fs1_map2 = basemap
fs1_map1 = basemap
fs1_noise_inv1 = basemap
fs1_noise_inv2 = basemap
fs1_output_root = basemap + "_cleaned_plussim_path_Eric"
fs1_tack_on = "%d" % instance_seed
fs1_freq_list = freq_list
fs1_modes = clean_mode_list
fs1_factorizable_noise = clean_factorizable
fs1_convolve = clean_common_res_convolution
fs1_sub_weighted_mean = clean_sub_weighted_mean
fs1_simfile = sg1_output_root + sg1_outfile_meansub
fs1_sim_multiplier = clean_sim_multiplier
fs1_subtract_inputmap_from_sim = False
fs1_subtract_sim_from_inputmap = False

if do_mode_crosspower:
    pipe_modules.append((pwrspec_combinations.WiggleZxGBT_modesim, ('wxss1_', 'wxss_')))
wxss1_map_key = basemap + "_cleaned_plussim_combined"
wxss1_tack_on = "%d" % instance_seed
wxss1_wigglez_sim_file = sg1_output_root + sg1_outfile_delta
wxss1_wigglez_sel_key = baseoptmap + "_separable_selection"
wxss1_outfile_data = "%s_modeclean_plussim/%s_sim_%d.shelve" % (pwrout_base, output_tag, sg1_seed)
wxss1_unitless = pwr_unitless
wxss1_return_3d = pwr_return_3d
wxss1_truncate = pwr_truncate
wxss1_window = pwr_window
wxss1_degrade_resolution = pwr_degrade_resolution
wxss1_factorizable_noise = pwr_factorizable_noise
wxss1_meansub = False
wxss1_refinement = pwr_refinement
wxss1_pad = pwr_pad
wxss1_order = pwr_order
wxss1_freq_list = freq_list
wxss1_bins = pwr_bins

if do_cleanup:
    pipe_modules.append((pwrspec_combinations.CleanupCleanedMaps, ('clean1_', 'clean_')))
clean1_path_key = basemap + "_cleaned_plussim_path_Eric"
clean1_tack_on = "%d" % instance_seed

#-----------------------------------------------------------------------------
# clean_{map+sim} (sim)
#-----------------------------------------------------------------------------
if do_cleaning and do_minusmap:
    pipe_modules.append((pair_set.PairSet, ('fs2_', 'fs_')))
fs2_map2 = basemap
fs2_map1 = basemap
fs2_noise_inv1 = basemap
fs2_noise_inv2 = basemap
fs2_output_root = basemap + "_cleaned_plussim_minusmap_path_Eric"
fs2_tack_on = "%d" % instance_seed
fs2_freq_list = freq_list
fs2_modes = clean_mode_list
fs2_factorizable_noise = clean_factorizable
fs2_convolve = clean_common_res_convolution
fs2_sub_weighted_mean = clean_sub_weighted_mean
fs2_simfile = sg1_output_root + sg1_outfile_meansub
fs2_sim_multiplier = clean_sim_multiplier
fs2_subtract_inputmap_from_sim = True
fs2_subtract_sim_from_inputmap = False

if do_mode_crosspower and do_minusmap:
    pipe_modules.append((pwrspec_combinations.WiggleZxGBT_modesim, ('wxss2_', 'wxss_')))
wxss2_map_key = basemap + "_cleaned_plussim_minusmap_combined"
wxss2_tack_on = "%d" % instance_seed
wxss2_wigglez_sim_file = sg1_output_root + sg1_outfile_delta
wxss2_wigglez_sel_key = baseoptmap + "_separable_selection"
wxss2_outfile_data = "%s_modeclean_plussim_minusmap/%s_sim_%d.shelve" % (pwrout_base, output_tag, sg1_seed)
wxss2_unitless = pwr_unitless
wxss2_return_3d = pwr_return_3d
wxss2_truncate = pwr_truncate
wxss2_window = pwr_window
wxss2_degrade_resolution = pwr_degrade_resolution
wxss2_factorizable_noise = pwr_factorizable_noise
wxss2_meansub = False
wxss2_refinement = pwr_refinement
wxss2_pad = pwr_pad
wxss2_order = pwr_order
wxss2_freq_list = freq_list
wxss2_bins = pwr_bins

if do_cleanup and do_minusmap:
    pipe_modules.append((pwrspec_combinations.CleanupCleanedMaps, ('clean2_', 'clean_')))
clean2_path_key = basemap + "_cleaned_plussim_minusmap_path_Eric"
clean2_tack_on = "%d" % instance_seed

#-----------------------------------------------------------------------------
# clean_{map+sim} (map)
#-----------------------------------------------------------------------------
if do_cleaning and do_minussim:
    pipe_modules.append((pair_set.PairSet, ('fs3_', 'fs_')))
fs3_map2 = basemap
fs3_map1 = basemap
fs3_noise_inv1 = basemap
fs3_noise_inv2 = basemap
fs3_output_root = basemap + "_cleaned_plussim_minussim_path_Eric"
fs3_tack_on = "%d" % instance_seed
fs3_freq_list = freq_list
fs3_modes = clean_mode_list
fs3_factorizable_noise = clean_factorizable
fs3_convolve = clean_common_res_convolution
fs3_sub_weighted_mean = clean_sub_weighted_mean
fs3_simfile = sg1_output_root + sg1_outfile_meansub
fs3_sim_multiplier = clean_sim_multiplier
fs3_subtract_inputmap_from_sim = False
fs3_subtract_sim_from_inputmap = True

if do_mode_crosspower and do_minussim:
    pipe_modules.append((pwrspec_combinations.WiggleZxGBT_modesim, ('wxss3_', 'wxss_')))
wxss3_map_key = basemap + "_cleaned_plussim_minussim_combined"
wxss3_tack_on = "%d" % instance_seed
wxss3_wigglez_sim_file = sg1_output_root + sg1_outfile_delta
wxss3_wigglez_sel_key = baseoptmap + "_separable_selection"
wxss3_outfile_data = "%s_modeclean_plussim_minussim/%s_sim_%d.shelve" % (pwrout_base, output_tag, sg1_seed)
wxss3_unitless = pwr_unitless
wxss3_return_3d = pwr_return_3d
wxss3_truncate = pwr_truncate
wxss3_window = pwr_window
wxss3_degrade_resolution = pwr_degrade_resolution
wxss3_factorizable_noise = pwr_factorizable_noise
wxss3_meansub = False
wxss3_refinement = pwr_refinement
wxss3_pad = pwr_pad
wxss3_order = pwr_order
wxss3_freq_list = freq_list
wxss3_bins = pwr_bins

if do_cleanup and do_minussim:
    pipe_modules.append((pwrspec_combinations.CleanupCleanedMaps, ('clean3_', 'clean_')))
clean3_path_key = basemap + "_cleaned_plussim_minussim_path_Eric"
clean3_tack_on = "%d" % instance_seed

#-----------------------------------------------------------------------------
# take the crosspowers for the beam and pixel window function
#-----------------------------------------------------------------------------
# first find the crosspower in the observed region with beam and meansub
if do_beam_crosspower:
    pipe_modules.append((pwrspec_combinations.BatchSimCrosspower, ('bxs1_', 'bxs_')))
bxs1_map_key = basemap + "_cleaned_combined"
bxs1_sim_file = sg1_output_root + sg1_outfile_meansub
bxs1_wigglez_sim_file = sg1_output_root + sg1_outfile_delta
bxs1_wigglez_sel_key = baseoptmap + "_separable_selection"
bxs1_outfile = "%s_obsbeammeansub/%s_sim_%d.shelve" % (pwrout_base, output_tag, sg1_seed)
bxs1_unitless = pwr_unitless
bxs1_return_3d = pwr_return_3d
bxs1_truncate = pwr_truncate
bxs1_window = pwr_window
bxs1_degrade_resolution = pwr_degrade_resolution
bxs1_factorizable_noise = pwr_factorizable_noise
bxs1_meansub = pwr_meansub
bxs1_refinement = pwr_refinement
bxs1_pad = pwr_pad
bxs1_order = pwr_order
bxs1_freq_list = freq_list
bxs1_bins = pwr_bins

# now the crosspower in the observed region (no beam or meansub)
if do_beam_crosspower:
    pipe_modules.append((pwrspec_combinations.BatchSimCrosspower, ('bxs2_', 'bxs_')))
bxs2_map_key = basemap + "_cleaned_combined"
bxs2_sim_file = sg1_output_root + sg1_outfile_raw
bxs2_wigglez_sim_file = sg1_output_root + sg1_outfile_delta
bxs2_wigglez_sel_key = baseoptmap + "_separable_selection"
bxs2_outfile = "%s_obs/%s_sim_%d.shelve" % (pwrout_base, output_tag, sg1_seed)
bxs2_unitless = pwr_unitless
bxs2_return_3d = pwr_return_3d
bxs2_truncate = pwr_truncate
bxs2_window = pwr_window
bxs2_degrade_resolution = pwr_degrade_resolution
bxs2_factorizable_noise = pwr_factorizable_noise
bxs2_meansub = pwr_meansub
bxs2_refinement = pwr_refinement
bxs2_pad = pwr_pad
bxs2_order = pwr_order
bxs2_freq_list = freq_list
bxs2_bins = pwr_bins

# now the crosspower in the physical region (to measure pixel window function)
if do_beam_crosspower:
    pipe_modules.append((pwrspec_combinations.SinglePhysicalSim, ('sps1_', 'sps_')))
sps1_sim_file_left = sg1_output_root + sg1_outfile_physical
sps1_sim_file_right = sg1_output_root + sg1_outfile_physical
sps1_unitless = pwr_unitless
sps1_return_3d = pwr_return_3d
sps1_truncate = pwr_truncate
sps1_window = pwr_window
sps1_bins = pwr_bins
sps1_outfile = "%s_phys/%s_physsim_%d.shelve" % (pwrout_base, output_tag, sg1_seed)
