#
# Calibration for GBT data
#
============
## ideas

=============
Use calibrator
=============
(1) Position on, noise-on, measure P_3c + Psky + Pcal (noise-source)
(2)          on       -off         P_3c + Psky
(3) Position off, noise-on, measure Psky+Pcal
(4)          off,      -off         Psky

Take (5)= (2)/[(1)-(2)] = (P_3c+Psky)/Pcal
         (6) = (4)/[(3)-(4)]= Psky/Pcal
         (7)=(5)-(6) = P_3c/Pcal = T_3c/Tcal, and T_3c is known => Tcal
==============
in ~/projects/GBT/pros/Calibration/3c48  

1. run docalib_svdfill.pro that calls calibration_svd.pro which generates time-averaged 
     Pcal/Psky  or  Pcal/(Psky+P_3c) depending if on- or off- position of calibrator 3c48.
     Note, Pcal is the power from noise-source, obtained by subtracting noise-cal off 
     from noise-cal on data.   This generates a TcalTsys.scan* file in each data
     subdirectory for cal_Tcal.pro to read

2.  in cal_Tcal.pro
     do P_3c/Pcal = (Psky+P_3c)/Pcal - Psky/Pcal
          and Psky/Pcal

     since P_3c/Pcal = T_3c/Tcal,  and we know T_3c, can solve for Tcal
     Then Tsky=Psky/Pcal*Tcal

    => generates Tcal.txt  in freq space

3.  cal_tcal_matrix.pro  generates Tcal_z.txt   in redshift space
   
4.  The above is done in the (time, freq) space. Then assume Tcal is not time-varying

==============
in ~/projects/GBT/pros/
================

Noise-on, meausre Pcal + Psky
         -off, measure Psky

=> get Pcal = gain * Tcal =>  get gain
==================
5.  In normal data fields, solve from gain(t)=Pcal/Tcal, where Pcal calculated from the
     data noise source

6.  cal_gaint_b4svd2.pro   reads in data *.noisetot_weighted_aftsvd  
     and Tcal_z.txt to generate gain.txt
 
======================
3c218 spectral index

from NED  (freq, Jy)

1.40E+09	 4.08E+01
9.60E+08	 6.54E+01
7.50E+08	 8.36E+01
6.35E+08	 9.71E+01
4.68E+08	 1.15E+02
4.08E+08	 1.32E+02
3.65E+08	 7.29E+01
1.60E+08	 2.46E+02



