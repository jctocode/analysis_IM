# pipeline for  foreground clean

pipe_modules = []
pipe_processes = 1


from foreground_clean import pair_set_legendre
from foreground_clean import pair_set

#from quadratic_products import pwrspec_combinations
#from quadratic_products import pwrspec_compile

from map import simulate_gbt
import struct
import os


do_IxIsvd = False
do_IQUclean_withIxIsvd = False
do_IQUclean_themselves = False
do_divide_IQUV = False
do_simulation = False
do_simulation_IQUV = False
do_divide_IQUV_simulated = True

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------

# This is the database key for the input map
basemap = os.getenv('MAPFILE')
basemap_my = os.getenv('MAPGBT_MY')
noiseweight = os.getenv('NOISEWEIGHT')
simroot = os.getenv('SIMROOT') # simulation file root
simfile = os.getenv('SIMFILE') # simulation file number

goodmodes = int(os.getenv('GOODMODES'))

nfreq = 256 
cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
           107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
           187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
           212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
freq_list = tuple([ind for ind in range(nfreq) if ind not in cutlist])
mode_list = range(0, 5, 1)
common_res_convolution = False
sub_weighted_mean = True
sim_multiplier = 1.

output_folder = 'IQUV_legendre_modes_%dgwj/'%goodmodes 
output_root = '/mnt/raid-project/gmrt/ycli/foreground_cleand/'
output_root += output_folder


#-----------------------------------------------------------------------------
# use the base map parameters above to make a few map cleaning cases
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# use I x I find the first 5 svd modes
#-----------------------------------------------------------------------------
if do_IxIsvd:
    pairlist = ['I_with_I',] 
    pairdict = {}
    pairdict['I_with_I'] = {}
    pairdict['I_with_I']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_I']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_I']['noise_inv1'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_I']['noise_inv2'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_I']['tag1'] = 'I'
    pairdict['I_with_I']['tag2'] = 'I'

    pairdict = pair_set.mklink_for_mappair( pairdict, basemap_my + output_folder)
    
    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs0_', 'fs_')))

    fs0_pairlist = pairlist
    fs0_pairdict = pairdict
    #fs0_calc_diagnal = True
    fs0_output_root = output_root + "/IxI5svd/"
    fs0_freq_list = freq_list
    fs0_modes = range(0, 5, 1)
    fs0_factorizable_noise = True
    #fs0_factorizable_noise = False
    fs0_convolve = common_res_convolution
    fs0_sub_weighted_mean = sub_weighted_mean
    fs0_good_modes = goodmodes
    fs0_freq_n_all = nfreq

#-----------------------------------------------------------------------------
# use the svd of IxI, clean Q, U, V
#-----------------------------------------------------------------------------
if do_IQUclean_withIxIsvd:
    pairlist = ['I_with_Q', 'I_with_U', 'I_with_V']
    pairdict = {}
    pairdict['I_with_Q'] = {}
    pairdict['I_with_Q']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_Q']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_Q.npy'
    pairdict['I_with_Q']['noise_inv1'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_Q']['noise_inv2'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_Q.npy'
    pairdict['I_with_Q']['tag1'] = 'I'
    pairdict['I_with_Q']['tag2'] = 'Q'
    pairdict['I_with_U'] = {}
    pairdict['I_with_U']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_U']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_U.npy'
    pairdict['I_with_U']['noise_inv1'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_U']['noise_inv2'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_U.npy'
    pairdict['I_with_U']['tag1'] = 'I'
    pairdict['I_with_U']['tag2'] = 'U'
    pairdict['I_with_V'] = {}
    pairdict['I_with_V']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_V']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_V.npy'
    pairdict['I_with_V']['noise_inv1'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_V']['noise_inv2'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_V.npy'
    pairdict['I_with_V']['tag1'] = 'I'
    pairdict['I_with_V']['tag2'] = 'V'
    
    pairdict = pair_set.mklink_for_mappair( pairdict, basemap_my + output_folder )
    
    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs1_', 'fs_')))
    fs1_SVD_root = output_root + "/IxI5svd/"
    if goodmodes == 1:
        fs1_SVD_file = "SVD_pair_legendre_I_with_I.pkl"
    else:
        fs1_SVD_file = "SVD_pair_I_with_I.pkl"
    fs1_pairlist = pairlist
    fs1_pairdict = pairdict
    #fs1_calc_diagnal = True
    fs1_output_root = output_root + "/IQUmap_clean_withIxIsvd/"
    fs1_freq_list = freq_list
    fs1_modes = range(0, 5, 1)
    fs1_factorizable_noise = True
    fs1_convolve = common_res_convolution
    fs1_sub_weighted_mean = sub_weighted_mean
    fs1_good_modes = goodmodes
    fs1_freq_n_all = nfreq

#-----------------------------------------------------------------------------
# clean extended IQUV map
#-----------------------------------------------------------------------------
if do_IQUclean_themselves:
    iquvdict = {}
    iquvdict['imap'] = output_root + "/IxI5svd/"
    iquvdict['imap']+= "sec_I_cleaned_clean_map_I_with_I_3modes.npy"
    iquvdict['qmap'] = output_root + "/IQUmap_clean_withIxIsvd/"
    iquvdict['qmap']+= "sec_Q_cleaned_clean_map_I_with_I_3modes.npy"
    iquvdict['umap'] = output_root + "/IQUmap_clean_withIxIsvd/"
    iquvdict['umap']+= "sec_U_cleaned_clean_map_I_with_I_3modes.npy"
    iquvdict['vmap'] = output_root + "/IQUmap_clean_withIxIsvd/"
    iquvdict['vmap']+= "sec_V_cleaned_clean_map_I_with_I_3modes.npy"
    iquvdict['imap_weight'] = output_root + "/IxI5svd/"
    iquvdict['imap_weight']+= "sec_I_cleaned_noise_inv_I_with_I_3modes.npy"
    iquvdict['qmap_weight'] = output_root + "/IQUmap_clean_withIxIsvd/"
    iquvdict['qmap_weight']+= "sec_Q_cleaned_noise_inv_I_with_I_3modes.npy"
    iquvdict['umap_weight'] = output_root + "/IQUmap_clean_withIxIsvd/"
    iquvdict['umap_weight']+= "sec_U_cleaned_noise_inv_I_with_I_3modes.npy"
    iquvdict['vmap_weight'] = output_root + "/IQUmap_clean_withIxIsvd/"
    iquvdict['vmap_weight']+= "sec_V_cleaned_noise_inv_I_with_I_3modes.npy"

    targetdict = {}
    targetdict['map']    = basemap_my + output_folder 
    targetdict['map']   += "sec_E_cleaned_clean_map_I_with_I_3modes.npy"
    targetdict['weight'] = basemap_my + output_folder 
    targetdict['weight']+= "sec_E_cleaned_noise_weight_I_with_I_3modes.npy"

    pair_set.extend_iquv_map(iquvdict, targetdict)

    pairlist = ['E_with_E',]
    pairdict = {}
    pairdict['E_with_E'] = {}
    pairdict['E_with_E']['map1'] = basemap_my + output_folder
    pairdict['E_with_E']['map1']+= "sec_E_cleaned_clean_map_I_with_I_3modes.npy"
    pairdict['E_with_E']['map2'] = basemap_my + output_folder
    pairdict['E_with_E']['map2']+= "sec_E_cleaned_clean_map_I_with_I_3modes.npy"
    pairdict['E_with_E']['noise_inv1'] = basemap_my + output_folder +\
                                   "sec_E_cleaned_noise_weight_I_with_I_3modes.npy"
    pairdict['E_with_E']['noise_inv2'] = basemap_my + output_folder +\
                                   "sec_E_cleaned_noise_weight_I_with_I_3modes.npy"
    pairdict['E_with_E']['tag1'] = 'E'
    pairdict['E_with_E']['tag2'] = 'E'

    freq_list_iquv = freq_list
    freq_list_iquv+= tuple([ind +   nfreq for ind in freq_list])
    freq_list_iquv+= tuple([ind + 2*nfreq for ind in freq_list])
    freq_list_iquv+= tuple([ind + 3*nfreq for ind in freq_list])
    
    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs2_', 'fs_')))
    fs2_pairlist = pairlist
    fs2_pairdict = pairdict
    #fs2_calc_diagnal = True
    fs2_output_root = output_root + "/Emap_clean_themselves/"
    fs2_freq_list = freq_list_iquv
    fs2_modes = range(0, 55, 5)
    fs2_factorizable_noise = True
    fs2_convolve = common_res_convolution
    fs2_sub_weighted_mean = sub_weighted_mean
    if goodmodes == 1:
        fs2_good_modes = 0
    else:
        fs2_good_modes = goodmodes
    fs2_freq_n_all = 4*nfreq

if do_divide_IQUV:
    for mode in range(0, 55, 5):
        sourcedict = {}
        sourcedict['map']    = output_root + "/Emap_clean_themselves/" 
        sourcedict['map']   += "sec_E_cleaned_clean_map_I_with_E_%dmodes.npy"%mode
        sourcedict['weight'] = output_root + "/Emap_clean_themselves/" 
        sourcedict['weight']+= "sec_E_cleaned_noise_inv_I_with_E_%dmodes.npy"%mode
        targetdict = {}
        targetdict['imap'] = output_root + "/Emap_clean_themselves/" 
        targetdict['imap']+= "sec_I_cleaned_clean_map_I_with_I_%dmodes.npy"%mode
        targetdict['qmap'] = output_root + "/Emap_clean_themselves/" 
        targetdict['qmap']+= "sec_Q_cleaned_clean_map_I_with_I_%dmodes.npy"%mode
        targetdict['umap'] = output_root + "/Emap_clean_themselves/" 
        targetdict['umap']+= "sec_U_cleaned_clean_map_I_with_I_%dmodes.npy"%mode
        targetdict['vmap'] = output_root + "/Emap_clean_themselves/" 
        targetdict['vmap']+= "sec_V_cleaned_clean_map_I_with_I_%dmodes.npy"%mode
        targetdict['imap_weight'] = output_root + "/Emap_clean_themselves/" +\
                          "sec_I_cleaned_noise_inv_I_with_I_%dmodes.npy"%mode
        targetdict['qmap_weight'] = output_root + "/Emap_clean_themselves/" +\
                          "sec_Q_cleaned_noise_inv_I_with_I_%dmodes.npy"%mode
        targetdict['umap_weight'] = output_root + "/Emap_clean_themselves/" +\
                          "sec_U_cleaned_noise_inv_I_with_I_%dmodes.npy"%mode
        targetdict['vmap_weight'] = output_root + "/Emap_clean_themselves/" +\
                          "sec_V_cleaned_noise_inv_I_with_I_%dmodes.npy"%mode

        pair_set.divide_iquv_map(sourcedict, targetdict)

#-----------------------------------------------------------------------------
# generate simulation maps for GBT and WiggleZ
#-----------------------------------------------------------------------------
if do_simulation:
    # generate the simulation maps
    #pipe_modules.append((simulate_gbt.SimulateGbt, ('sg1_', 'sg_')))
    instance_seed = struct.unpack("I", os.urandom(4))[0]
    print "generating simulation with seed: %d" % instance_seed

    sg1_output_root = simroot
    sg1_template_file = output_root +\
        "/IQUmap_clean_withIxIsvd/combined_clean_weight_0modes.npy"
    sg1_seed = instance_seed
    sg1_refinement = 2
    sg1_weightfile = output_root +\
        "/IQUmap_clean_withIxIsvd/combined_clean_weight_0modes.npy"
    sg1_outfile_meansub = "sim_beammeansub_%03d.npy" % int(simfile)
    sg1_outfile_raw = "sim_raw_%03d.npy" % int(simfile)
    sg1_outfile_delta = "sim_delta_%03d.npy" % int(simfile)
    sg1_outfile_physical = "sim_phys_%03d.npy" % int(simfile)

    # clean_{map+sim} (map+sim) 
    # using IxI clean first 3 modes
    pairlist = ['I_with_Q', 'I_with_U', 'I_with_I', 'I_with_V']
    pairdict = {}
    pairdict['I_with_Q'] = {}
    pairdict['I_with_Q']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_Q']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_Q.npy'
    pairdict['I_with_Q']['noise_inv1'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_Q']['noise_inv2'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_Q.npy'
    pairdict['I_with_Q']['tag1'] = 'I'
    pairdict['I_with_Q']['tag2'] = 'Q'
    pairdict['I_with_U'] = {}
    pairdict['I_with_U']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_U']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_U.npy'
    pairdict['I_with_U']['noise_inv1'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_U']['noise_inv2'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_U.npy'
    pairdict['I_with_U']['tag1'] = 'I'
    pairdict['I_with_U']['tag2'] = 'U'
    pairdict['I_with_I'] = {}
    pairdict['I_with_I']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_I']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_I']['noise_inv1'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_I']['noise_inv2'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_I']['tag1'] = 'I'
    pairdict['I_with_I']['tag2'] = 'I'
    pairdict['I_with_V'] = {}
    pairdict['I_with_V']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_V']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_V.npy'
    pairdict['I_with_V']['noise_inv1'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_V']['noise_inv2'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_V.npy'
    pairdict['I_with_V']['tag1'] = 'I'
    pairdict['I_with_V']['tag2'] = 'V'
    
    pairdict = pair_set.mklink_for_mappair( pairdict, basemap_my + output_folder )
    
    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs3_', 'fs_')))
    fs3_SVD_root = output_root + "/IxI5svd/"
    if goodmodes == 1:
        fs3_SVD_file = "SVD_pair_legendre_I_with_I.pkl"
    else:
        fs3_SVD_file = "SVD_pair_I_with_I.pkl"
    fs3_pairlist = pairlist
    fs3_pairdict = pairdict
    #fs3_calc_diagnal = True
    fs3_output_root = output_root + "/simmap_withIxIsvd_%s/" % simfile
    fs3_freq_list = freq_list
    fs3_modes = range(0, 5, 1)
    fs3_simfile = sg1_output_root + sg1_outfile_meansub
    fs3_sim_multiplier = sim_multiplier
    fs3_subtract_inputmap_from_sim = False
    fs3_subtract_sim_from_inputmap = False
    fs3_factorizable_noise = True
    fs3_convolve = common_res_convolution
    fs3_sub_weighted_mean = sub_weighted_mean
    fs3_good_modes = goodmodes
    fs3_freq_n_all = nfreq

if do_simulation_IQUV:
    # using IxQ IxU
    iquvdict = {}
    iquvdict['imap'] = output_root + "simmap_withIxIsvd_%s/"%simfile
    iquvdict['imap']+= "sec_I_cleaned_clean_map_I_with_I_3modes.npy"
    iquvdict['qmap'] = output_root + "simmap_withIxIsvd_%s/"%simfile
    iquvdict['qmap']+= "sec_Q_cleaned_clean_map_I_with_I_3modes.npy"
    iquvdict['umap'] = output_root + "simmap_withIxIsvd_%s/"%simfile
    iquvdict['umap']+= "sec_U_cleaned_clean_map_I_with_I_3modes.npy"
    iquvdict['vmap'] = output_root + "simmap_withIxIsvd_%s/"%simfile
    iquvdict['vmap']+= "sec_V_cleaned_clean_map_I_with_I_3modes.npy"
    iquvdict['imap_weight'] = output_root + "simmap_withIxIsvd_%s/"%simfile
    iquvdict['imap_weight']+= "sec_I_cleaned_noise_inv_I_with_I_3modes.npy"
    iquvdict['qmap_weight'] = output_root + "simmap_withIxIsvd_%s/"%simfile
    iquvdict['qmap_weight']+= "sec_Q_cleaned_noise_inv_I_with_I_3modes.npy"
    iquvdict['umap_weight'] = output_root + "simmap_withIxIsvd_%s/"%simfile
    iquvdict['umap_weight']+= "sec_U_cleaned_noise_inv_I_with_I_3modes.npy"
    iquvdict['vmap_weight'] = output_root + "simmap_withIxIsvd_%s/"%simfile
    iquvdict['vmap_weight']+= "sec_V_cleaned_noise_inv_I_with_I_3modes.npy"

    targetdict = {}
    targetdict['map']    = output_root + "simmap_withIxIsvd_%s/"%simfile
    targetdict['map']   += "sec_E_cleaned_clean_map_I_with_I_3modes.npy"
    targetdict['weight'] = output_root + "simmap_withIxIsvd_%s/"%simfile
    targetdict['weight']+= "sec_E_cleaned_noise_inv_I_with_I_3modes.npy"

    pair_set.extend_iquv_map(iquvdict, targetdict)

    pairlist = ['E_with_E',]
    pairdict = {}
    pairdict['E_with_E'] = {}
    pairdict['E_with_E']['map1'] = output_root + "simmap_withIxIsvd_%s/"%simfile
    pairdict['E_with_E']['map1']+= "sec_E_cleaned_clean_map_I_with_I_3modes.npy"
    pairdict['E_with_E']['map2'] = output_root + "simmap_withIxIsvd_%s/"%simfile
    pairdict['E_with_E']['map2']+= "sec_E_cleaned_clean_map_I_with_I_3modes.npy"
    pairdict['E_with_E']['noise_inv1'] = output_root +\
                                   "simmap_withIxIsvd_%s/"%simfile +\
                                   "sec_E_cleaned_noise_inv_I_with_I_3modes.npy"
    pairdict['E_with_E']['noise_inv2'] = output_root +\
                                   "simmap_withIxIsvd_%s/"%simfile +\
                                   "sec_E_cleaned_noise_inv_I_with_I_3modes.npy"
    pairdict['E_with_E']['tag1'] = 'E'
    pairdict['E_with_E']['tag2'] = 'E'

    freq_list_iquv = freq_list
    freq_list_iquv+= tuple([ind +   nfreq for ind in freq_list])
    freq_list_iquv+= tuple([ind + 2*nfreq for ind in freq_list])
    freq_list_iquv+= tuple([ind + 3*nfreq for ind in freq_list])
    
    
    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs4_', 'fs_')))
    fs4_pairlist = pairlist
    fs4_pairdict = pairdict
    #fs4_calc_diagnal = True
    fs4_output_root = output_root + "/simmapmode_simmap_beam_%s/" % simfile
    fs4_freq_list = freq_list_iquv
    fs4_modes = range(0, 55, 5)
    fs4_factorizable_noise = True
    fs4_convolve = common_res_convolution
    fs4_sub_weighted_mean = sub_weighted_mean
    #fs4_simfile = sg1_output_root + sg1_outfile_raw
    #fs4_simfile = sg1_output_root + sg1_outfile_meansub
    #fs4_sim_multiplier = sim_multiplier
    #fs4_subtract_inputmap_from_sim = False
    #fs4_subtract_sim_from_inputmap = False
    if goodmodes == 1:
        fs4_good_modes = 0
    else:
        fs4_good_modes = goodmodes
    fs4_freq_n_all = 4*nfreq
    #fs4_save_section = False
    
if do_divide_IQUV_simulated:
    for mode in range(0, 55, 5):
        sourcedict = {}
        sourcedict['map']    = output_root + "/simmapmode_simmap_beam_%s/"%simfile
        sourcedict['map']   += "sec_E_cleaned_clean_map_I_with_E_%dmodes.npy"%mode
        sourcedict['weight'] = output_root + "/simmapmode_simmap_beam_%s/"%simfile
        sourcedict['weight']+= "sec_E_cleaned_noise_inv_I_with_E_%dmodes.npy"%mode
        targetdict = {}
        targetdict['imap']   = output_root + "/simmapmode_simmap_beam_%s/"%simfile
        targetdict['imap']  += "sec_I_cleaned_clean_map_I_with_I_%dmodes.npy"%mode
        targetdict['qmap']   = output_root + "/simmapmode_simmap_beam_%s/"%simfile
        targetdict['qmap']  += "sec_Q_cleaned_clean_map_I_with_I_%dmodes.npy"%mode
        targetdict['umap']   = output_root + "/simmapmode_simmap_beam_%s/"%simfile
        targetdict['umap']  += "sec_U_cleaned_clean_map_I_with_I_%dmodes.npy"%mode
        targetdict['vmap']   = output_root + "/simmapmode_simmap_beam_%s/"%simfile
        targetdict['vmap']  += "sec_V_cleaned_clean_map_I_with_I_%dmodes.npy"%mode
        targetdict['imap_weight'] = output_root +\
                               "/simmapmode_simmap_beam_%s/"%simfile +\
                               "sec_I_cleaned_noise_inv_I_with_I_%dmodes.npy"%mode
        targetdict['qmap_weight'] = output_root +\
                               "/simmapmode_simmap_beam_%s/"%simfile +\
                               "sec_Q_cleaned_noise_inv_I_with_I_%dmodes.npy"%mode
        targetdict['umap_weight'] = output_root +\
                               "/simmapmode_simmap_beam_%s/"%simfile +\
                               "sec_U_cleaned_noise_inv_I_with_I_%dmodes.npy"%mode
        targetdict['vmap_weight'] = output_root +\
                               "/simmapmode_simmap_beam_%s/"%simfile +\
                               "sec_V_cleaned_noise_inv_I_with_I_%dmodes.npy"%mode

        pair_set.divide_iquv_map(sourcedict, targetdict)

