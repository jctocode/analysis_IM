pipe_modules = []
pipe_processes = 1

from map import simulate_gbt
from quadratic_products import pwrspec_combinations
import struct

# main control flags
sg_template_file = "/mnt/raid-project/gmrt/eswitzer/GBT/maps/optimal_15hr_selfcal/secA_15hr_41-90_clean_map_I_762.npy"
basename = "GBT_15hr_optimalmap_selfcal_762"
beamsim = False
sg_output_root = "/mnt/raid-project/gmrt/eswitzer/GBT/pwrspec/bulksim/"

pipe_modules.append(simulate_gbt.SimulateGbtSignal)
randsource = open("/dev/random", "rb")
sg_seed = struct.unpack("I", randsource.read(4))[0]
print "generating simulation with seed: %d" % sg_seed

if beamsim:
    sg_outfile_beam = "%s%s_sim_beam_%d.npy" % (sg_output_root, basename, sg_seed)
    sg_outfile_raw = None
    simfile = sg_outfile_beam
else:
    sg_outfile_raw = "%s%s_sim_raw_%d.npy" % (sg_output_root, basename, sg_seed)
    sg_outfile_beam = None
    simfile = sg_outfile_raw

sg_outfile_physical = None
sg_outfile_beam_plus_data = None
sg_refinement = 2
#sg_outfile_physical = "%s%s_sim_phys_%d.npy" % (sg_output_root, basename, sg_seed)
#sg_outfile_beam_plus_data = "%s%s_sim_beamplusdata_%d.npy" % (sg_output_root, basename, sg_seed)

pipe_modules.append((pwrspec_combinations.BatchSimAutopower, ('bs1_', 'bs_')))
bs1_degrade_resolution = False
bs1_factorizable_noise = False
bs1_meansub = False
bs1_unitless = True
bs1_return_3d = False
bs1_truncate = False
bs1_window = "blackman"
bs1_refinement = 2
bs1_pad = 5
bs1_order = 1
bs1_bins = [0.00765314, 2.49977141, 35]
bs1_freq_list = range(40)
bs1_map_key = basename + "_cleaned"
bs1_sim_file = simfile
bs1_outfile = "%s%s_sim_%d.shelve" % (sg_output_root, basename, sg_seed)
