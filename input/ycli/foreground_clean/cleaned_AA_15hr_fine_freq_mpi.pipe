# pipeline for  foreground clean

pipe_modules = []
pipe_processes = 1


#from foreground_clean import pair_set_legendre
from foreground_clean import pair_set

#from quadratic_products import pwrspec_combinations
#from quadratic_products import pwrspec_compile

from map import simulate_gbt
import struct
import os


do_diag_noise = False
do_inv_diag_noise = False
do_IQUclean_themselves = True
do_simulation = False
do_simulation_IQUV = False

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------

# This is the database key for the input map
basemap = os.getenv('MAPFILE')
simroot = os.getenv('SIMROOT') # simulation file root
simfile = os.getenv('SIMFILE') # simulation file number
subreal = bool(os.getenv('SUBREAL'))

goodmodes = int(os.getenv('GOODMODES'))

nfreq = 3600
freq_cut = range(400) + [535, 537, 538, 539, 540, 541, 542] + range(565, 573) +\
           [713, 714, 715, 779, 780, 781, 782, 783, 784, 824, 825, 826, 847, 848, 849,
           850, 851, 852, 1123, 1124, 1125, 1126, 1127, 1270, 1271, 1272, 1273, 1274,
           1381, 1382, 1383] + range(1586, 1692) + range(1997, 2119) +\
           [3149, 3150, 3151, 3169, 3170, 3171] + range(3598, 3600)
freq_list = tuple([ind for ind in range(nfreq) if ind not in freq_cut])

mode_list = range(0, 6, 1) + range(10, 51, 5)
common_res_convolution = False
degrade_factor = 1.1
sub_weighted_mean = True
sim_multiplier = 1.
simnum = 100

if simfile != 'None':
    do_diag_noise = False
    do_IQUclean_themselves = False

    do_simulation = False
    do_simulation_IQUV = True
else:
    do_simulation = False
    do_simulation_IQU = False

output_folder = '15hr_AA_fine_freq_11conv/'
output_root = '/home/ycli/data/cln_result/'
output_root += output_folder

#-----------------------------------------------------------------------------
# use the base map parameters above to make a few map cleaning cases
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# clean extended IQUV map
#-----------------------------------------------------------------------------

pairlist = ['A_with_A',]
pairdict = {}
pairdict['A_with_A'] = {}
pairdict['A_with_A']['map1'] = basemap
#pairdict['A_with_A']['map1']+= '15hr_fine_freq_clean_map_I.npy'
pairdict['A_with_A']['map1']+= '15hr_ptcorr_fine_freq_clean_map_I.npy'
pairdict['A_with_A']['map2'] = basemap
#pairdict['A_with_A']['map2']+= '15hr_fine_freq_clean_map_I.npy'
pairdict['A_with_A']['map2']+= '15hr_ptcorr_fine_freq_clean_map_I.npy'
#pairdict['A_with_A']['noise_inv1'] = basemap + '15hr_fine_freq_noise_map_I.npy'
pairdict['A_with_A']['noise_inv1'] = basemap + '15hr_ptcorr_fine_freq_noise_map_I.npy'
#pairdict['A_with_A']['noise_inv2'] = basemap + '15hr_fine_freq_noise_map_I.npy'
pairdict['A_with_A']['noise_inv2'] = basemap + '15hr_ptcorr_fine_freq_noise_map_I.npy'
pairdict['A_with_A']['tag1'] = 'A'
pairdict['A_with_A']['tag2'] = 'A'


if do_IQUclean_themselves:
    pipe_modules.append((pair_set.PairSet, ('fs2_', 'fs_')))

    fs2_pairlist = pairlist
    fs2_pairdict = pairdict
    #fs2_calc_diagnal = True
    fs2_output_root = output_root + "/Emap_clean_themselves/"
    fs2_freq_list1 = freq_list
    fs2_freq_list2 = freq_list
    fs2_modes = mode_list
    fs2_factorizable_noise = True
    fs2_convolve = common_res_convolution
    fs2_degrade_factor = degrade_factor
    fs2_clip_weight_percent = 50
    fs2_weighted_SVD = False
    fs2_sub_weighted_mean = sub_weighted_mean
    fs2_calibrate = False
    fs2_telescope = 'GBT'
    if goodmodes == 1:
        fs2_good_modes = 0
    else:
        fs2_good_modes = goodmodes
    fs2_freq_n_all1 = nfreq
    fs2_freq_n_all2 = nfreq

#-----------------------------------------------------------------------------
# generate simulation maps for GBT and WiggleZ
#-----------------------------------------------------------------------------

if do_simulation_IQUV:
    sg1_output_root = simroot
    sg1_outfile_meansub = "sim_beammeansub_%03d.npy"
    #sg1_outfile_meansub = "sim_degradebeam_%03d.npy"

    pipe_modules.append((pair_set.PairSet, ('fs3_', 'fs_')))

    freq_list_iquv = freq_list
    freq_list_iquv+= tuple([ind +   nfreq for ind in freq_list])
    freq_list_iquv+= tuple([ind + 2*nfreq for ind in freq_list])
    #freq_list_iquv+= tuple([ind + 3*nfreq for ind in freq_list])

    fs3_pairlist = pairlist
    fs3_pairdict = pairdict
    #fs3_calc_diagnal = True
    fs3_output_root = output_root + "/simmapmode_simmap_beam_%03d/"
    fs3_freq_list1 = freq_list
    fs3_freq_list2 = freq_list
    fs3_modes = mode_list
    fs3_simnum = simnum
    fs3_simfile1  = sg1_output_root + sg1_outfile_meansub
    fs3_simfile2  = sg1_output_root + sg1_outfile_meansub
    #fs3_simfile2 = basemap + sg1_outfile_meansub
    fs3_sim_multiplier = sim_multiplier
    fs3_subtract_inputmap_from_sim = False
    fs3_subtract_sim_from_inputmap = False
    fs3_subtract_realmap_from_sim = subreal
    fs3_realmap_dir = output_root + "/Emap_clean_themselves/"
    if subreal:
        fs3_output_root = fs3_output_root[:-1] + "_subreal/"
    fs3_factorizable_noise = True
    fs3_convolve = common_res_convolution
    fs3_clip_weight_percent = 50
    fs3_weighted_SVD = True
    fs3_degrade_factor = degrade_factor
    fs3_sub_weighted_mean = sub_weighted_mean
    fs3_good_modes = goodmodes
    fs3_freq_n_all1 = nfreq
    fs3_freq_n_all2 = nfreq

    
