# Pipeline file for parkes data.

import os

#from core import dir_data
import scipy as sp

base_dir = os.getenv('YICHAO_WORK_PKS')
data_dir = os.getenv('PARKES_DATA')

''' >> Data Direction << '''
''' 2012-10-24 '''
#parkes_session = '/RAWDATA_SDF/20121024/'
#parkesfiles = [] 
#listfile = os.listdir(data_dir+parkes_session)
#listfile.sort(key=lambda x:int(x[11:15]))
#for file in listfile:
#    if file.split('.')[-1] == 'sdfits':
#        parkesfiles.append(file)
#        print file
#outputname = 'parkes_2012_10_24_P641'
#file_middles = tuple(['parkes_2012_10_24_P641',])
#prefix = ''

''' 2012-10-25 '''
#parkes_session = '/RAWDATA_SDF/20121025/'
#parkesfiles = [] 
#listfile = os.listdir(data_dir+parkes_session)
#listfile.sort(key=lambda x:int(x[11:15]))
#for file in listfile:
#    if file.split('.')[-1] == 'sdfits':
#        parkesfiles.append(file)
#        print file
#outputname = 'parkes_2012_10_25_P641'
#file_middles = tuple(['parkes_2012_10_25_P641',])
#prefix = ''

''' 2012-10-26 '''
#parkes_session = '/RAWDATA_SDF/20121026/'
#parkesfiles = [] 
#listfile = os.listdir(data_dir+parkes_session)
#listfile.sort(key=lambda x:int(x[11:15]))
#for file in listfile:
#    if file.split('.')[-1] == 'sdfits':
#        parkesfiles.append(file)
#        print file
#outputname = 'parkes_2012_10_26_P641'
#file_middles = tuple(['parkes_2012_10_26_P641',])
#prefix = ''

''' 2012-10-27 '''
parkes_session = '/RAWDATA_SDF/20121027/'
parkesfiles = [] 
listfile = os.listdir(data_dir+parkes_session)
listfile.sort(key=lambda x:int(x[11:15]))
for file in listfile:
    if file.split('.')[-1] == 'sdfits':
        parkesfiles.append(file)
        print file
outputname = 'parkes_2012_10_27_P641'
file_middles = tuple(['parkes_2012_10_27_P641',])
prefix = ''

''' 2012-10-28 '''
#parkes_session = '/RAWDATA_SDF/20121028/'
#parkesfiles = [] 
#listfile = os.listdir(data_dir+parkes_session)
#listfile.sort(key=lambda x:int(x[11:15]))
#for file in listfile:
#    if file.split('.')[-1] == 'sdfits':
#        parkesfiles.append(file)
#        #print file
#outputname = 'parkes_2012_10_28_P641'
#file_middles = tuple(['parkes_2012_10_28_P641',])
#prefix = ''

# Maximum number of processes to use.
pipe_processes = 12

####  List of modules to execute.  ####
pipe_modules = []

#### Reformat ####
from parkes import reformat
pipe_modules.append(reformat.ReformatParkes)

#### Calibration ####

#from parkes import bandpass_remove
#pipe_modules.append(bandpass_remove.BandpassRemove)

from parkes import flag_data
pipe_modules.append(flag_data.FlagData)

from parkes import rebin
pipe_modules.append(rebin.Rebin)

#from time_stream import band_stop
#pipe_modules.append(band_stop.BandStop)

#from time_stream import split_bands
#pipe_modules.append(split_bands.SplitBands)

# Not used.
##from time_stream import cal_filter
##pipe_modules.append(cal_filter.CalFilter)

#from time_stream import calibrate
#pipe_modules.append(calibrate.Calibrate)

from parkes import rotate_pol
pipe_modules.append(rotate_pol.RotatePol)

#### Parameters for the various modules. ####

# reformat 
rfparkes_parkesroot = data_dir + parkes_session
rfparkes_parkesfile = parkesfiles
rfparkes_outputname = outputname 
rfparkes_outputroot = base_dir + 'parkes/' + prefix

# bandpass remove
bp_input_root = rfparkes_outputroot
bp_file_middles = file_middles
bp_input_end = '.fits'
bp_output_root = base_dir + 'bandpassrm/' + prefix
bp_output_end = '.fits'
bp_time_cut = 40
bp_scans = ()
bp_IFs = ()

# flag_data, RFI flagger.
fd_input_root = rfparkes_outputroot
#fd_input_root = bp_output_root
fd_file_middles = file_middles
fd_input_end = '.fits'
fd_output_root = base_dir + 'flagged/' + prefix
fd_output_end = '.fits'
fd_scans = ()
fd_IFs = ()

fd_time_flag_first = False
#fd_tsys_thres = [15.2, 15.7]
#fd_tsys_thres = [15.0, 15.5]
#fd_sigma_thres = 10.
#fd_sigma_thres = 6.
#fd_sigma_thres = 4.
#fd_sigma_thres = 3.5
fd_sigma_thres = 2.5 

# No Hanning.  Guppi's filters take care of it.
fd_perform_hanning = False
#fd_rotate = True
fd_rotate = False
#fd_cal_scale = True
fd_cal_scale = False
fd_badness_thres = 0.1
fd_time_cut = 10

# Rebin the time and frequency axis.
##### Get input root from the normal data pipeline. #####
#rb_input_root = fd_output_root
rb_input_root = base_dir + 'flagged/' + prefix
rb_file_middles = file_middles
rb_input_end = '.fits'
rb_output_root = base_dir + 'rebinned/' + prefix
rb_output_end = '.fits'
rb_scans = ()
rb_IFs = ()

rb_n_bins_combined_freq = 16
rb_n_bins_combined_time = 0 

# band stop
#bs_input_root = rb_output_root
bs_input_root = "/mnt/raid-project/gmrt/kiyo/gbt_out_new/" + 'rebinned/' + prefix
bs_file_middles = file_middles
bs_input_end = '.fits'
bs_output_root = base_dir + 'band_stopped/' + prefix
bs_output_end = '.fits'
bs_scans = ()
bs_IFs = ()

# The two wings of the band pass and the two resonances.
bs_band_stops = [(690e6, 702e6), (796e6, 800e6), (815e6, 820e6), 
                 (898e6, 910e6)]

# split_bands
sb_input_root = bs_output_root
sb_file_middles = file_middles
sb_input_end = '.fits'
sb_output_root = base_dir + 'band_split_new/' + prefix
sb_output_end = '.fits'
sb_scans = ()
sb_IFs = ()

# 128 bins -> 3 bands of 40, starting at 4 ending at 124.
#sb_n_bands = 3
#sb_n_bins_band = 40
#sb_offset = 4 + 2 * sb_n_bins_band
#sb_offset = 4
# For now deal with a single lowish noise band that misses resonances, rfi,
# etc. Band chosen such the upper end is ~5MHz from resonance.
sb_n_bands = 1
sb_n_bins_band = 40
sb_offset = 68

# scale by filtered cal.
#cf_input_root = sb_output_root
#cf_file_middles = file_middles
#cf_input_end = '.fits'
#cf_output_root = base_dir + 'cal_filter_scaled/' + prefix
#cf_output_end = '.fits'
#cf_scans = ()
#cf_IFs = ()

#cf_filter_type = 'rectangular'
#cf_filter_size = 4.
#cf_filter_size_units = 'seconds'

# calibrate
# Using older calibration.  These parameters not used.
#fgc_input_root = sb_output_root
#fgc_file_middles = file_middles
#fgc_input_end = '.fits'
#fgc_output_root = base_dir + 'flux_dg_cal/'
#fgc_output_end = '.fits'
#fgc_scans = ()
#fgc_IFs = ()
#
#fgc_mueler_file = base_tcv + 'diff_gain_params/'

# These parameters used instead.
#cl_input_root = sb_output_root
#cl_file_middles = file_middles
#cl_input_end = '.fits'
#cl_output_root = base_dir + 'calibrated/' + prefix
#cl_output_end = '.fits'
#cl_scans = ()
#cl_IFs = ()
#
#cl_cal_temperature_files = (os.getenv('GBT10B_OUT') + 'kevin_cal/cal_21.fits',)

# rotate_pol
rp_input_root = rb_output_root
rp_file_middles = file_middles
rp_input_end = '.fits'
rp_output_root = base_dir + 'pol_selected/' + prefix
rp_output_end = '.fits'
rp_scans = ()
rp_IFs = ()

rp_new_pols = (1,)
rp_average_cals = True


