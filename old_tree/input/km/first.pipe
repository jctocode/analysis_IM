# Note that this input file for the pipeline (.pipe file) will also work as a
# valid input file for any of the called submodules (.ini file).  Thus the
# following are all valid calls:
# python pipeline/manager.py test.pipe
# python time_stream/hanning test.pipe
# python map/map_maker_simple  test.pipe
#
# Each of these calls of course only uses the relevant parts of the .pipe file.

import os

from core import dir_data
field = '22hr'
dm_field_centre = (325.75, 0.0)
#field = '1hr'
#dm_field_centre = (12.75, 0.0)
#field = '15hr'
#dm_field_centre = (218.25, 2.0)
# Sessions 2 and 4 seem to be bad.
#file_middles = tuple(dir_data.get_data_files([1,3,5,6,7,8,9,10,11,12,13,14,15],
#                                             field))
#file_middles = tuple(dir_data.get_data_files([21], field))
#file_middles = tuple(dir_data.get_data_files(range(0, 22), field))
file_middles = tuple(dir_data.get_data_files(range(22, 35), field))
#                     + dir_data.get_data_files(range(0, 36), '15hr')
#                     + dir_data.get_data_files(range(0, 36), '22hr'))
					 

pipe_modules = []
pipe_processes = 1

base_dir = os.getenv('GBT10B_OUT')
raw_data_dir = os.getenv('GBT10B_DATA')
prefix = ''
IFs = ()

#from time_stream import hanning 
#pipe_modules.append(hanning.Hanning)
ha_input_root = raw_data_dir
ha_file_middles = file_middles
ha_input_end = ".raw.acs.fits"
ha_output_root = base_dir + 'hanning/' + prefix
ha_output_end = ".fits"
ha_scans = ()
# All following steps will inherit this choice by default (because these are
# the only IF's saved to the following fits files).
ha_IFs = IFs

from time_stream import flag_data
pipe_modules.append(flag_data.FlagData)
fd_input_root = ha_output_root
fd_file_middles = file_middles
fd_input_end = '.fits'
fd_output_root = base_dir + 'flagged/' + prefix
fd_output_end = '.fits'
fd_scans = ()
fd_IFs = ()

fd_sigma_thres = 8
fd_pol_thres = 8
fd_pol_width = 2
fd_flatten_pol = True
fd_derivative_cuts = 5
fd_derivative_width = 1

#from time_stream import rebin_freq
#pipe_modules.append(rebin_freq.RebinFreq)
rf_input_root = fd_output_root
rf_file_middles = file_middles
rf_input_end = '.fits'
rf_output_root = base_dir + 'rebinned/' + prefix
rf_output_end = '.fits'
rf_scans = ()
rf_IFs = ()

rf_channel_width = 2.0
rf_mean_instead_median = True

#from time_stream import stitch_windows_crude
#pipe_modules.append(stitch_windows_crude.Stitch)
sw_input_root = rf_output_root
sw_file_middles = file_middles
sw_input_end = '.fits'
sw_output_root = base_dir + 'stitched/' + prefix
sw_output_end = '.fits'
sw_scans = ()
sw_IFs = ()

#from time_stream import cal_scale
#pipe_modules.append(cal_scale.CalScale)
cs_input_root = sw_output_root
cs_file_middles = file_middles
cs_input_end = '.fits'
cs_output_root = base_dir + 'cal_scaled/' + prefix
cs_output_end = '.fits'
cs_scans = ()
cs_IFs = ()

cs_scale_time_average = True
cs_scale_freq_average = False
cs_subtract_time_median = False

#from time_stream import calibrate
#pipe_modules.append(calibrate.Calibrate)
cl_input_root = cs_output_root
cl_file_middles = file_middles
cl_input_end = '.fits'
cl_output_root = base_dir + 'calibrated/' + prefix
cl_output_end = '.fits'
cl_scans = ()
cl_IFs = ()

cl_cal_temperature_files = (os.getenv('GBT10B_OUT') + 'kevin_cal/cal_21.fits',)

#from time_stream import rotate_pol
#pipe_modules.append(rotate_pol.RotatePol)
rp_input_root = cl_output_root
rp_file_middles = file_middles
rp_input_end = '.fits'
rp_output_root = base_dir + 'pol/' + prefix
rp_output_end = '.fits'
rp_scans = ()
rp_IFs = ()

rp_new_pols = (1,)
rp_average_cals = False

#from time_stream import combine_cal
#pipe_modules.append(combine_cal.CombineCal)
cc_input_root = rp_output_root
cc_file_middles = file_middles
cc_input_end = '.fits'
cc_output_root = base_dir + 'combined/' + prefix
cc_output_end = '.fits'
cc_scans = ()
cc_IFs = ()

cc_subtract_time_mean = True
cc_average_cal_states = True

#from map import dirty_map
#pipe_modules.append(dirty_map.DirtyMapMaker)
dm_input_root = cc_output_root
dm_file_middles = file_middles
dm_input_end = '.fits'
dm_output_root = base_dir + 'maps/' + prefix + field + '_22-35_'
dm_output_end = '.fits'
dm_scans = ()
dm_IFs = (0,)

dm_map_shape = (70, 45)
#dm_map_shape = (100, 80)
dm_pixel_spacing = .075
dm_noise_model = 'disjoint_scans'

from map import clean_map
pipe_modules.append(clean_map.CleanMapMaker)
cm_input_root = dm_output_root
cm_output_root = cm_input_root
cm_polarizations = ('I',)


# Not acctually nessisary, but good do do anyway.
del file_middles
del base_dir
del prefix
del IFs
del raw_data_dir
