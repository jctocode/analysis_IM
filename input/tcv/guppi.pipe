
#Pipeline file for guppi data

import os

from core import dir_data
import scipy as sp

# Here you choose which files to process.
field = '11hr'
#field = '15hr'
#dm_field_centre = (218.25, 2.0) 
#Here I'm grabbing the guppi data
#file_middles = tuple(dir_data.get_data_files(range(17,19),field='1hr',project='GBT11B_055', type='ralongmap'))
#file_middles = ('GBT12A_418/02_wigglez11hr_centre_ralongmap_101',)
file_middles = tuple(dir_data.get_data_files(range(03,23), field='11hr', project='GBT12A_418', type = 'ralongmap'))
#file_middles = tuple(dir_data.get_data_files(range(41,57), field='15hr', project='GBT10B_036', type='ralongmap')+dir_data.get_data_files(range(58,90), field='15hr', project='GBT10B_036', type='ralongmap')) # some kind of corruption in session 57. - overall uncertainty 52-58 
#file_middles = tuple(dir_data.get_data_files(range(41,90), field='22hr', project='GBT10B_036', type='ralongmap')) 
#file_middles = tuple(dir_data.get_data_files(range(15,17), field='1hr', project='GBT11B_055', type='ralongmap'))
#file_middles = tuple(dir_data.get_data_files(range(41,90), field='1hr', project='GBT10B_036', type='ralongmap')+dir_data.get_data_files(range(0,14), field='1hr', project='GBT11B_055',type='ralongmap')+dir_data.get_data_files(range(15,19), field='1hr', project='GBT11B_055', type='ralongmap'))

#file_middles = tuple(dir_data.get_data_files(range(8,9), field='1hr', project='GBT11B_055', type='ralongmap'))

n_files = len(file_middles)
middles_a = file_middles[:n_files//4]
middles_b = file_middles[n_files//4:2*n_files//4]
middles_c = file_middles[2*n_files//4:3*n_files//4]
middles_d = file_middles[3*n_files//4:n_files]

pipe_modules = []
# Chime has 8 cores, but you should save a few for other people.  Use 6 max.
# Prawn has 12 cores.
# Sunnyvale must have more 12*2
pipe_processes = 3

base_dir = os.getenv('GBT_OUT')

data_dir = os.getenv('GBT_DATA')
#raw_data_dir = os.getenv('GBT10B_DATA')
kiyo_dir = os.getenv('GBT10B_KM')
prefix = ''
map_prefix = '' + field +'_41-18_fdgp_'
IFs = ()


#Hanning smoothing skipped with guppi data.
##from time_stream import hanning 
# Comment this line to skip this step when running python pipeline/manager
#pipe_modules.append(hanning.Hanning)
ha_input_root = kiyo_dir + '/guppi_data/'
ha_file_middles = file_middles
ha_input_end = ".fits"
ha_output_root = base_dir + 'hanning/'
ha_output_end = ".fits"
ha_scans = ()
# All following steps will inherit this choice by default (because these are
# the only IF's saved to the following fits files).
ha_IFs = IFs

#from time_stream import flag_data
# Comment this line to skip this step when running python pipeline/manager
#pipe_modules.append(flag_data.FlagData)
#fd_input_root = ha_output_root
fd_input_root = data_dir
fd_file_middles = file_middles
fd_input_end = '.fits'
fd_output_root = base_dir + 'flagged/'
fd_output_end = '.fits'
fd_scans = ()
fd_IFs = ()

fd_rotate = True
fd_perform_hanning = False
fd_cal_scale = True
fd_sigma_thres = 6.
fd_badness_thres = 0.1
fd_time_cut = 40

from time_stream import rebin_freq
# Comment this line to skip this step when running python pipeline/manager
pipe_modules.append(rebin_freq.RebinFreq)
rf_input_root = fd_output_root
rf_file_middles = file_middles
rf_input_end = '.fits'
rf_output_root = base_dir + 'rebinned/'
rf_output_end = '.fits'
rf_scans = ()
rf_IFs = ()

rf_channel_width = 0.
rf_n_bins_combined = 16
rf_mean_instead_median = False

#from time_stream import flux_diff_gain_cal
#pipe_modules.append(flux_diff_gain_cal.Calibrate)
#fgc_input_root = base_dir+'rebinned/'
fgc_input_root = rf_output_root
fgc_file_middles = file_middles
fgc_input_end = '.fits'
#fgc_output_root = base_dir + 'fdgp_with_RM_cal/'
#fgc_output_root = base_dir + 'fdgp_cal/'
fgc_output_root = base_dir + 'avg_fdgp_cal_new/'
fgc_output_end = '.fits'
fgc_scans = ()
fgc_IFs = ()

#fgc_mueler_file = base_dir + 'diff_gain_params/'
#fgc_mueler_file = ''
fgc_mueler_file = base_dir + 'diff_gain_params/11hr_fdg_calc_avg_new.txt'
fgc_RM_file = base_dir +'RM_tables/'
fgc_R_to_sky = True
fgc_DP_correct = True
fgc_RM_correct = False
fgc_Flux_special = True
# set Flux special to True when using something like an average and set mueler file to the filename

#from time_stream import rotate_pol
# Comment this line to skip this step in pipline.
#pipe_modules.append(rotate_pol.RotatePol)
rp_input_root = fgc_output_root
rp_file_middles = file_middles
rp_input_end = '.fits'
#rp_output_root = base_dir + 'rotated_to_I_Q_fdgp/'
rp_output_root = base_dir + 'rotated_to_I_Q_avg_fdgp_new/'
#rp_output_root = base_dir + 'rotated_to_I_Q_fdgp_RM/'
rp_output_end = '.fits'
rp_scans = ()
rp_IFs = ()

rp_new_pols = (1,2,3,4)
rp_average_cals = False

#from time_stream import flux_pol_cal
#pipe_modules.append(flux_pol_cal.Calibrate)
tc_input_root = rp_output_root
tc_file_middles = file_middles
tc_input_end = '.fits'
tc_output_root = base_dir + 'flux_pol_cal/'
tc_output_end = '.fits'
tc_scans = ()
tc_IFs = ()

tc_mueler_file = base_dir + 'mueller_params/'
tc_flux_cal_only = 'True'

#from map import dirty_map
#pipe_modules.append(dirty_map.DirtyMapMaker)
#dm_input_root = tc_output_root
dm_input_root = rp_output_root
dm_file_middles = file_middles
dm_input_end = '.fits'
dm_output_root = base_dir + 'maps/' + map_prefix
dm_output_end = '.fits'
dm_scans = ()
dm_IFs = (0,)

#Based upon Eric/Kiyo's preference, there is a new set of center/dim information.
# 15hr: RA center = 217.8688, DEC center = 2.0, Pixel spacing = 0.0627, map shape = (78,43)
# 22hr: RA center = 325.4190, DEC center = 0.0, Pixel spacing = 0.0627, map shape = (80,49)
# 1hr: RA center = 13.0, DEC center = 1.85, Pixel spacing = 0.0627, map shape = (161,83) - adjusted to (135,81) due to memory limits.

# For rough plotting, 11hr center is RA 162.5, DEC 3.5
#dm_field_centre = (162.5,3.5)
#dm_map_shape = (64,32)
#dm_pixel_spacing = 0.4
dm_field_centre = (217.8688,2.0)
#dm_field_centre = (13.0,1.85)
#dm_map_shape = (64,32)
#dm_map_shape = (70, 45)
dm_map_shape = (78,43)
#dm_map_shape = (100, 80)
#dm_map_shape = (135,70)
#Don't want to change pixel spacing to too high (affects beam quality)
dm_pixel_spacing = 0.0627
#dm_pixel_spacing = .075
dm_noise_model = 'disjoint_scans'
dm_polarizations = ('I','Q','U','V')
#dm_polarizations = ('I',)
dm_noise_parameters_input_root = 'None'

#from map import clean_map
#pipe_modules.append(clean_map.CleanMapMaker)
cm_input_root = dm_output_root
cm_output_root = cm_input_root
cm_polarizations = ('I','Q','U','V')
#cm_polarizations = ('I',)

#from time_stream import subtract_map_data
#pipe_modules.append(subtract_map_data.Subtract)
sm_input_root = dm_input_root
sm_file_middles = file_middles
sm_input_end = '.fits'
sm_output_root = base_dir + 'map_subtracted/'
sm_output_end = '.fits'
sm_scans = ()
sm_IFs = ()

sm_pols = ()
sm_map_file = base_dir + 'maps/' + map_prefix + 'clean_map_I.npy'
sm_solve_for_gain = True
sm_gain_output_end = '_gain.pickle'
sm_interpolation = 'linear'

#from time_stream import reflag
#pipe_modules.append(reflag.ReFlag)
sf_input_root = dm_input_root
sf_file_middles = file_middles
sf_input_end = '.fits'
sf_output_root = base_dir + 'reflagged/'
sf_output_end = '.fits'
sf_scans = ()
sf_IFs = ()

sf_thres = 5.0
sf_subtracted_input_root = sm_output_root
sf_subtracted_output_root = base_dir + 'reflag_sub/'

#from noise import measure_noise
#pipe_modules.append(measure_noise.Measure)
mn_input_root = sf_subtracted_input_root
mn_file_middles = file_middles
mn_input_end = '.fits'
mn_output_root = base_dir + 'noise_measurments/'

mn_model = "scan_var"

#### Make sub map A ####

#from map import dirty_map
#pipe_modules.append((dirty_map.DirtyMapMaker, ('dmA_', 'dm_')))
dmA_file_middles = middles_a
dmA_input_root = sf_output_root
dmA_output_root = base_dir + 'maps/' + "sec_A_" + map_prefix

dmA_noise_parameters_input_root = mn_output_root

#from map import clean_map
#pipe_modules.append((clean_map.CleanMapMaker, ('cmA_', 'cm_')))
cmA_input_root = dmA_output_root
cmA_output_root = dmA_output_root
cmA_save_noise_diag = True

#### Make sub map B ####

#from map import dirty_map
#pipe_modules.append((dirty_map.DirtyMapMaker, ('dmB_', 'dm_')))
dmB_file_middles = middles_b
dmB_input_root = sf_output_root
dmB_output_root = base_dir + 'maps/' + "sec_B_" + map_prefix

dmB_noise_parameters_input_root = mn_output_root

#from map import clean_map
#pipe_modules.append((clean_map.CleanMapMaker, ('cmB_', 'cm_')))
cmB_input_root = dmB_output_root
cmB_output_root = dmB_output_root
cmB_save_noise_diag = True

#### Make sub map C ####

#from map import dirty_map
#pipe_modules.append((dirty_map.DirtyMapMaker, ('dmC_', 'dm_')))
dmC_file_middles = middles_c
dmC_input_root = sf_output_root
dmC_output_root = base_dir + 'maps/' + "sec_C_" + map_prefix

dmC_noise_parameters_input_root = mn_output_root

#from map import clean_map
#pipe_modules.append((clean_map.CleanMapMaker, ('cmC_', 'cm_')))
cmC_input_root = dmC_output_root
cmC_output_root = dmC_output_root
cmC_save_noise_diag = True

#### Make sub map D ####

#from map import dirty_map
#pipe_modules.append((dirty_map.DirtyMapMaker, ('dmD_', 'dm_')))
dmD_file_middles = middles_d
dmD_input_root = sf_output_root
dmD_output_root = base_dir + 'maps/' + "sec_D_" + map_prefix

dmD_noise_parameters_input_root = mn_output_root

#from map import clean_map
#pipe_modules.append((clean_map.CleanMapMaker, ('cmD_', 'cm_')))
cmD_input_root = dmD_output_root
cmD_output_root = dmD_output_root
cmD_save_noise_diag = True


# Not actually nessesary, but good do do anyway.
del file_middles
del base_dir
del prefix
del IFs

             
