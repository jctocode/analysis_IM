#########################################################################
#                                                                       #
#      This pipeline is used to get the 2side transfer function         #
#      for auto power using simulation maps                             #
#                                                                       #
#########################################################################

import os
pipe_modules = []
pipe_processes = 1
WORKROOT = os.getenv('YICHAO_WORK_PS')

import data_paths
"""  simulation maps  """

print
print "="*50
print "auto transfer function"
print

map_sim = os.getenv('MAP_SIM')
map_ssm = os.getenv('MAP_SSM')
map_cln = os.getenv('MAP_CLN')

hour = int(os.getenv('HOUR'))
mode = int(os.getenv('MODE'))

sim_num = 100
#sim_num = 5


# for clean_{sim+map}(sim+map) 
resultf = 'simmaps1'   

datadb = data_paths.DataPath()

imap_list = []
imap_root = []
nmap_list = []
nmap_root = []
tabs_list = []

pkc_imap_list = []
pkc_nmap_list = []

output_root = ""

for i in range(sim_num):
    output_root = WORKROOT
    print map_ssm
    if os.path.exists(map_ssm):
        imaps = data_paths.get_mapdict(\
            map_ssm + 'simmapmode_simmap_sim_beam_%03d/'%i)
    else:
        imaps = datadb.fetch(map_ssm + '_combined', silent=True)
    if os.path.exists(map_cln):
        output_root += 'bias/auto_%s_%d/'%(map_cln.split('/')[-2], mode)
        nmaps = data_paths.get_mapdict(map_cln + 'mapmode_map/')
    else:
        nmaps = datadb.fetch(map_cln + '_combined', silent=True)
        output_root += 'bias/auto_%s_%d/'%(map_cln + '_combined', mode)
    
    mappath = imaps[1]['map;%dmodes'%mode]
    imap_list.append(mappath.split('/')[-1])
    imap_root.append(mappath.replace(mappath.split('/')[-1], ''))
    
    wetpath = nmaps[1]['weight;%dmodes'%mode]
    nmap_list.append(wetpath.split('/')[-1])
    nmap_root.append(wetpath.replace(wetpath.split('/')[-1], ''))
    
    tabs_list.append('1_%03d_'%i)

    print
    print mappath
    print wetpath

    pkc_imap_list.append(['1_%03d_'%i + mappath.split('/')[-1], 
                          '1_%03d_'%i + mappath.split('/')[-1]])
    pkc_nmap_list.append(['1_%03d_'%i + wetpath.split('/')[-1], 
                          '1_%03d_'%i + wetpath.split('/')[-1]])

print pkc_imap_list
print pkc_nmap_list

#pk1_imap_pair = ('1_' + mappath.split('/')[-1], '1_' + mappath.split('/')[-1])
#pk1_nmap_pair = ('1_' + wetpath.split('/')[-1], '1_' + wetpath.split('/')[-1])

# for clean_{map}(map)
resultf0 = 'simmaps0' 

if os.path.exists(map_ssm):
    imaps0= data_paths.get_mapdict(map_ssm + 'mapmode_map/')
else:
    imaps0= datadb.fetch(map_ssm + '_combined', silent=True)

mappath = imaps0[1]['map;%dmodes'%mode]
imap_list.append(mappath.split('/')[-1])
imap_root.append(mappath.replace(mappath.split('/')[-1], ''))

nmap_list.append(wetpath.split('/')[-1])
nmap_root.append(wetpath.replace(wetpath.split('/')[-1], ''))

tabs_list.append('0_')

print
print mappath
print wetpath

pk0_imap_pair = ('0_' + mappath.split('/')[-1], '0_' +  mappath.split('/')[-1])
pk0_nmap_pair = ('0_' + wetpath.split('/')[-1], '0_' +  wetpath.split('/')[-1])

bc_simmap_root = WORKROOT + 'reference_auto_%s_%d/'%(map_sim, mode)

cutlist = []
if hour==15:
    cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
           107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
           187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
           212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
elif hour==22:
	cutlist = [1,  2,  80, 206,201,200,196,192,189,186,182,217,212,211,223,229,
				  252,253,254,255,156,159,191,193,199,204,210,214,219,240,250,209,
				  215,213,187,198,157,197]
elif hour==1:
	cutlist = [78,]
else:
	print 'no cutlist'

FKPweight = False 
kmin = 0.03
kmax = 0.9
kbinNum = 15

print
print "-"*50
print
print

#""" Pipe line """
from mkpower import prepare
pipe_modules.append(prepare.Prepare)

from mkpower import mkpower_combine
pipe_modules.append(mkpower_combine.PowerSpectrumMaker)

from mkpower import mkpower
#  clean_{map}(map)
pipe_modules.append((mkpower.PowerSpectrumMaker, ('pk0_', 'pk_')))
#  clean_{sim+map}(sim+map)
#pipe_modules.append((mkpower.PowerSpectrumMaker, ('pk1_', 'pk_')))

#from mkpower import pycamb
#pipe_modules.append(pycamb.CAMB)
#
#from mkpower import plot_single
#pipe_modules.append(plot_single.PowerSpectrumPlot)
#
from mkpower import bias
pipe_modules.append(bias.BiasCalibrate)
""" End """


"""  Prepare """
#from mkpower import prepare
#pipe_modules.append(prepare.Prepare)
pre_processes = 5
pre_plot = False
#pre_plot = True
pre_output_root = output_root
pre_imap_root = imap_root
pre_nmap_root = nmap_root
pre_imap_list = imap_list
pre_nmap_list = nmap_list
pre_tabs_list = tabs_list

pre_boxshape = (512, 128, 64)
pre_discrete = 2
pre_boxunit = 2.
pre_Xrange = (1400, pre_boxunit*pre_boxshape[0]+1400)
pre_Yrange = (-pre_boxunit*pre_boxshape[1]*0.5, 
   	 		  pre_boxunit*pre_boxshape[1]*0.5)
pre_Zrange = (10.0, pre_boxunit*pre_boxshape[2]+10.0)
#pre_Zrange = (-pre_boxunit*pre_boxshape[2]*0.5,
#					pre_boxunit*pre_boxshape[2]*0.5)

if hour==22:
	pre_Zrange = (-pre_boxunit*pre_boxshape[2]*0.5,
						pre_boxunit*pre_boxshape[2]*0.5)

elif hour==1:
	#pre_boxunit = 3.2
	#pre_boxshape = (512, 128, 64)
	pre_boxshape = (512, 256, 128)
	pre_Xrange = (1400, pre_boxunit*pre_boxshape[0]+1400)
	pre_Yrange = (-pre_boxunit*pre_boxshape[1]*0.5, 
	   	 		  pre_boxunit*pre_boxshape[1]*0.5)
	pre_Zrange = (-30.0, pre_boxunit*pre_boxshape[2]-30)

pre_cutlist = cutlist
pre_window = 'blackman'

"""  Calculate the combined Pk  """
#from mkpower import mkpower_combine
#pipe_modules.append(mkpower_combine.CrossPowerSpectrumMaker)
pkc_processes = 9 
if hour==1:
	pkc_processes = 2
pkc_plot = False 
pkc_saveweight = True
pkc_input_root = output_root
pkc_output_root = output_root
pkc_resultf = resultf

pkc_boxshape = pre_boxshape
pkc_discrete = pre_discrete
pkc_boxunit = pre_boxunit
pkc_Xrange = pre_Xrange
pkc_Yrange = pre_Yrange
pkc_Zrange = pre_Zrange

pkc_kbinNum = kbinNum 
pkc_kmin = kmin
pkc_kmax = kmax

#pkc_FKPweight = True
pkc_FKPweight = FKPweight
pkc_OmegaHI = 1.e-3
pkc_Omegam = 0.24
pkc_OmegaL = 0.76

pkc_sme = False

"""  Calculate the Pk  """
#from mkpower import mkpower
#pipe_modules.append((mkpower.PowerSpectrumMaker, ('pk0_', 'pk_')))
pk0_processes = 1
pk0_plot = False 
#pk0_plot = True
pk0_saveweight = True
pk0_input_root = output_root
pk0_output_root = output_root
pk0_resultf = resultf0

pk0_boxshape = pre_boxshape
pk0_discrete = pre_discrete
pk0_boxunit = pre_boxunit
pk0_Xrange = pre_Xrange
pk0_Yrange = pre_Yrange
pk0_Zrange = pre_Zrange

pk0_kbinNum = kbinNum
pk0_kmin = kmin
pk0_kmax = kmax

#pk0_FKPweight = True
pk0_FKPweight = FKPweight
pk0_OmegaHI = 1.e-3
pk0_Omegam = 0.24
pk0_OmegaL = 0.76

#from mkpower import mkpower
#pipe_modules.append((mkpower.PowerSpectrumMaker, ('pk1_', 'pk_')))
pk1_processes = 1
pk1_plot = False 
#pk1_plot = True
pk1_saveweight = True
pk1_input_root = output_root
pk1_output_root = output_root
pk1_resultf = resultf

pk1_boxshape = pre_boxshape
pk1_discrete = pre_discrete
pk1_boxunit = pre_boxunit
pk1_Xrange = pre_Xrange
pk1_Yrange = pre_Yrange
pk1_Zrange = pre_Zrange

pk1_kbinNum = kbinNum
pk1_kmin = kmin
pk1_kmax = kmax

#pk1_FKPweight = True
pk1_FKPweight = FKPweight
pk1_OmegaHI = 1.e-3
pk1_Omegam = 0.24
pk1_OmegaL = 0.76

"""  Calling CAMB """
#from mkpower import pycamb
#pipe_modules.append(pycamb.CAMB)
pcb_output_root = output_root + 'cambio/'
pcb_do_nonlinear = 1
pcb_transfer_redshift = 0.7
pcb_transfer_high_precision = 'T'
pcb_transfer_kmax = 1.5
#pcb_transfer_k_per_logint = 400

""" Calibrate the Bias of the Power Spectrum  """
#form mkpower import bias
#pipe_modules.append(bias.BiasCalibrate)
bc_processes = 1
bc_plot = False
bc_input_root = output_root
bc_output_root = bc_input_root
bc_resultf = resultf
bc_resultf0 = resultf0
bc_PKunit = 'mK'
bc_cross = False


"""  Plot  """
#from mkpower import plot
#pipe_modules.append(plot.PowerSpectrumPlot)
pt_processes = 1
pt_input_root = output_root
pt_output_root = output_root
pt_FKPweight = FKPweight
pt_OmegaHI = 1.e-3
pt_Omegam = 0.24
pt_OmegaL = 0.76
pt_z = 1.
pt_ymin = 1.e-10
pt_ymax = 1.e-6
pt_PKunit = 'K'
pt_resultf = resultf
pt_kmin = kmin
pt_kmax = kmax
pt_delta_plot = True

