# Input file for pol_cal module.

import os

from core import dir_data

# Here you choose which files to process.
#field = '22hr'
mm_field_centre = (325.75, 0.0)
#field = '1hr'
field = '15hr'
# Sessions 2 and 4 seem to be bad.
#file_middles = tuple(dir_data.get_data_files([1,3,5,6,7,8,9,10,11,12,13,14,15],
#                                             field))
#file_middles = tuple(dir_data.get_data_files([21], field))
#file_middles = tuple(dir_data.get_data_files(range(0, 22), field))
#file_middles = tuple(dir_data.get_data_files(range(0, 35), field))
#file_middles = tuple(dir_data.get_data_files(range(0, 01), field))
#                     + dir_data.get_data_files(range(0, 36), '15hr')
#                     + dir_data.get_data_files(range(0, 36), '22hr'))
#Here I'm grabbing the cal data.
#file_middles = tuple(dir_data.get_cal_files(range(24, 26)))
#file_middles = tuple(dir_data.get_data_files(range(22, 35), field))
#Here I'm grabbing the topo data from session 40
file_middles = ('117-124', '125-132', '133-140', '141-148', '25-32') 					 

pipe_modules = []
# Chime has 8 cores, but you should save a few for other people.  Use 6 max.
pipe_processes = 6
#pipe_processes = 6

base_dir = os.getenv('GBT10B_OUT')
raw_data_dir = os.getenv('GBT10B_DATA')
kiyo_dir = os.getenv('GBT10B_KM')
#prefix = ''
prefix = '40_wigglez15hr_azel_stepping_topo_'
IFs = ()

from time_stream import hanning 
# Comment this line to skip this step when running python pipeline/manager
pipe_modules.append(hanning.Hanning)
#ha_input_root = raw_data_dir
#Input for sessions 39-40
ha_input_root = kiyo_dir + 'data/' + prefix
ha_file_middles = file_middles
ha_input_end = ".raw.acs.fits"
ha_output_root = base_dir + 'hanning/' + prefix
ha_output_end = ".fits"
ha_scans = ()
# All following steps will inherit this choice by default (because these are
# the only IF's saved to the following fits files).
ha_IFs = IFs

from time_stream import flag_data
# Comment this line to skip this step when running python pipeline/manager
pipe_modules.append(flag_data.FlagData)
fd_input_root = ha_output_root
fd_file_middles = file_middles
fd_input_end = '.fits'
fd_output_root = base_dir + 'flagged/' + prefix
fd_output_end = '.fits'
fd_scans = ()
fd_IFs = ()

fd_sigma_thres = 8
fd_pol_thres = 8
fd_pol_width = 2
fd_flatten_pol = True
fd_derivative_cuts = 5
fd_derivative_width = 1

from time_stream import rebin_freq
# Comment this line to skip this step when running python pipeline/manager
pipe_modules.append(rebin_freq.RebinFreq)
rf_input_root = fd_output_root
rf_file_middles = file_middles
rf_input_end = '.fits'
rf_output_root = base_dir + 'rebinned/' + prefix
rf_output_end = '.fits'
rf_scans = ()
rf_IFs = ()

rf_channel_width = 2.0
rf_mean_instead_median = True

from time_stream import cal_scale
# Comment the following line to skip this step when running pipeline/manager
pipe_modules.append(cal_scale.CalScale)
cs_input_root = rf_output_root
cs_file_middles = file_middles
cs_input_end = '.fits'
cs_output_root = base_dir + 'cal_scaled/' + prefix
cs_output_end = '.fits'
cs_scans = ()
cs_IFs = ()

cs_scale_time_average = True
cs_scale_freq_average = True
cs_subtract_time_median = False

from time_stream import calibrate
# Comment line below to skip this step when running pipeline/manager
pipe_modules.append(calibrate.Calibrate)
cl_input_root = cs_output_root
cl_file_middles = file_middles
cl_input_end = '.fits'
cl_output_root = base_dir + 'calibrated/' + prefix
cl_output_end = '.fits'
cl_scans = ()
cl_IFs = ()

cl_cal_temperature_files = (os.getenv('GBT10B_KM') + 'kevin_cal/cal_21.fits',)

from time_stream import rotate_pol
# Comment this line to skip this step in pipline.
pipe_modules.append(rotate_pol.RotatePol)
rp_input_root = cl_output_root
rp_file_middles = file_middles
rp_input_end = '.fits'
# Remove Prefix for session 40 requirement
rp_output_root = base_dir + 'rotated_for_pol_cal/'
#rp_output_root = base_dir + 'rotated_for_pol_cal/' + prefix
rp_output_end = '.fits'
rp_scans = ()
rp_IFs = ()

rp_new_pols = (1,2,3,4)
rp_average_cals = False

from time_stream import pol_cal
# Comment this line to skip this step in pipline.
#pipe_modules.append(pol_cal.Calibrate)
pc_input_root = rp_output_root
pc_file_middles = file_middles
pc_input_end = '.fits'
pc_output_root = base_dir + 'pol_cal/' + prefix
pc_output_end = '.fits'
pc_scans = ()
pc_IFs = ()

from time_stream import stitch_windows_crude
# Comment this line to skip this step in pipeline.
pipe_modules.append(stitch_windows_crude.Stitch)
sw_input_root = rp_output_root
sw_file_middles = file_middles
sw_input_end = '.fits'
# Remove prefix for new scans requirement
sw_output_root = base_dir + 'stitched/'
#sw_output_root = base_dir + 'stitched/' + prefix
sw_output_end = '.fits'
sw_scans = ()
sw_IFs = ()

from time_stream import combine_cal
# Comment this line to skip this step in pipeline
pipe_modules.append(combine_cal.CombineCal)
cc_input_root = sw_output_root
cc_file_middles = file_middles
cc_input_end = '.fits'
#Remove prefixt for session 40 requirements
cc_output_root = base_dir + 'combined/'
#cc_output_root = base_dir + 'combined/' + prefix
cc_output_end = '.fits'
cc_scans = ()
cc_IFs = ()

cc_subtract_time_mean = True
cc_average_cal_states = True
cc_weights = (0.5, 0.5)
#cc_weights = (0.0, 1.0)

from map import map_maker
# Comment this line to skip this step in pipeline
pipe_modules.append(map_maker.MapMaker)
mm_input_root = cc_output_root
mm_file_middles = file_middles
mm_input_end = '.fits'
#remove prefix for session 40 requirements
mm_output_root = base_dir + 'maps/' + field + '_40_topo_'
#mm_output_root = base_dir + 'maps/' + prefix + field + '_22-35_'
mm_output_end = '.fits'
mm_scans = ()
mm_IFs = (0,)

#mm_field_centre = (325.0, 0.0) defined above where we choose the field.
mm_map_shape = (70, 45)
mm_pixel_spacing = .075
#mm_map_shape = (20, 15)
#mm_pixel_spacing = .2
#mm_map_shape = (150, 90)
#mm_pixel_spacing = .0325
mm_noise_model = 'disjoint_scans'

# Not acctually nessesary, but good do do anyway.
del file_middles
del base_dir
del prefix
del IFs
del raw_data_dir
             
