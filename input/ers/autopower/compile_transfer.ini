# goal: compile power spectra runs from bulksim to produce a transfer function
# option1 (one-sided):
# (clean_{d+s}(data+sim) - clean_d(data)) x delta / meansub_sim x delta
# in this case: the transfer needs to be squared
# option2:
# [P(clean_{d+s}(data+sim)) - P(clean_d(data))] / P(sim)
# in this case, P(clean_d(data)) needs to be explicitly subtracted
#
# various types of sepctra compiled:
# phys -- P(k) of simulations from original physical coordinates
# nobeam -- P(k) of simulations -> obs. coord -> physical
# wbeam -- P(k) of simulations -> obs. coord, with beam and meansub -> physical
# mode -- P(k) of simulations -> obs. coord, beam, meansub, cleaning -> physical
pipe_modules = []
pipe_processes = 1

from quadratic_products import aggregate_bulksim
import os

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------
do_compile_phys = True
do_compile_nobeam = True
do_compile_wbeam = True
do_compile_mode = True
do_statistics = True
do_transfer = True

basemap = "GBT_1hr_map_oldcalpolstack"
# order1, conv, refine1, omega0p5, weighted, onesided, IQUV
output_tag = "onesided_iqu_conv2"
input_multiplier = 1.
square_transfer = True

#----------------------------------------------------------------------------
# the rest is fairly automated and should not need to change
#----------------------------------------------------------------------------
baseauto_with_tag = basemap + "_x_" + basemap + "_" + output_tag
trans_output_name = baseauto_with_tag + "_transfer_function"

#outplotdir = "/home/r/rbond/eswitzer/code/analysis_IM/pwrspec_plots/"
outplotdir = "/cita/h/home-2/eswitzer/code/analysis_IM/pwrspec_plots/"
pwrout_root = '/mnt/raid-project/gmrt/eswitzer/GBT/pwrspec/'

physpwrdir = pwrout_root + baseauto_with_tag + "_phys/"
nobeampwrdir = pwrout_root + baseauto_with_tag + "_nobeam/"
wbeampwrdir = pwrout_root + baseauto_with_tag + "_wbeam/"
wmodepwrdir = pwrout_root + baseauto_with_tag + "_wmode/"

#----------------------------------------------------------------------------
# first compile all the simulation runs into a single file
#----------------------------------------------------------------------------
# in this case, we are using only the aggregated 2D powers so do not care
# about applying the transfer functions
if do_compile_phys:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as_physpwr_', 'as_')))
as_physpwr_apply_2d_beamtransfer = None
as_physpwr_apply_2d_modetransfer = None
as_physpwr_noiseweights_2dto1d = None
as_physpwr_fix_weight_treatment = None
as_physpwr_directory = physpwrdir
as_physpwr_basefile = ""
as_physpwr_outfile = "%s/%s_phys.hd5" % (pwrout_root, trans_output_name)

if do_compile_nobeam:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as_nobeam_', 'as_')))
as_nobeam_apply_2d_beamtransfer = None
as_nobeam_apply_2d_modetransfer = None
as_nobeam_noiseweights_2dto1d = None
as_nobeam_fix_weight_treatment = None
as_nobeam_directory = nobeampwrdir
as_nobeam_basefile = ""
as_nobeam_outfile = "%s/%s_nobeam.hd5" % (pwrout_root, trans_output_name)

if do_compile_wbeam:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as_wbeam_', 'as_')))
as_wbeam_apply_2d_beamtransfer = None
as_wbeam_apply_2d_modetransfer = None
as_wbeam_noiseweights_2dto1d = None
as_wbeam_fix_weight_treatment = None
as_wbeam_directory = wbeampwrdir
as_wbeam_basefile = ""
as_wbeam_outfile = "%s/%s_wbeam.hd5" % (pwrout_root, trans_output_name)

if do_compile_mode:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as_wmode_', 'as_')))
as_wmode_apply_2d_beamtransfer = None
as_wmode_apply_2d_modetransfer = None
as_wmode_noiseweights_2dto1d = None
as_wmode_fix_weight_treatment = None
#as_wmode_subtract_pwrspec = pwrout_root + basemap_with_tag + "/" + basemap + ".shelve"
as_wmode_directory = wmodepwrdir
as_wmode_basefile = ""
as_wmode_outfile = "%s/%s_wmode.hd5" % (pwrout_root, trans_output_name)

#----------------------------------------------------------------------------
# then find some statistics on the above sets
#----------------------------------------------------------------------------
if not os.path.isdir(outplotdir + trans_output_name):
    os.mkdir(outplotdir + trans_output_name)

if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast_physpwr_', 'ast_')))
ast_physpwr_aggfile_in = as_physpwr_outfile
ast_physpwr_statfile_out = "%s/%s_stat_phys.hd5" % (pwrout_root, trans_output_name)
ast_physpwr_outplotdir = "%s/%s/sim_phys" % (outplotdir, trans_output_name)

if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast_nobeam_', 'ast_')))
ast_nobeam_aggfile_in = as_nobeam_outfile
ast_nobeam_statfile_out = "%s/%s_stat_nobeam.hd5" % (pwrout_root, trans_output_name)
ast_nobeam_outplotdir = "%s/%s/sim_nobeam" % (outplotdir, trans_output_name)

if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast_wbeam_', 'ast_')))
ast_wbeam_aggfile_in = as_wbeam_outfile
ast_wbeam_statfile_out = "%s/%s_stat_wbeam.hd5" % (pwrout_root, trans_output_name)
ast_wbeam_outplotdir = "%s/%s/sim_wbeam" % (outplotdir, trans_output_name)

if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast_wmode_', 'ast_')))
ast_wmode_aggfile_in = as_wmode_outfile
ast_wmode_statfile_out = "%s/%s_stat_wmode.hd5" % (pwrout_root, trans_output_name)
ast_wmode_outplotdir = "%s/%s/sim_wmode" % (outplotdir, trans_output_name)

#----------------------------------------------------------------------------
# find the transfer functions
#----------------------------------------------------------------------------
if do_transfer:
    pipe_modules.append((aggregate_bulksim.CalculateTransfer, ('atr_beam_', 'atr_')))
#atr_beam_powerfile_in = ast_physpwr_statfile_out
atr_beam_powerfile_in = ast_nobeam_statfile_out
atr_beam_powerfile_out = ast_wbeam_statfile_out
atr_beam_input_multiplier = 1.
atr_beam_square_transfer = square_transfer
atr_beam_transferfile = "%s/%s_beamtransfer.hd5" % (pwrout_root, trans_output_name)
atr_beam_outplotdir = "%s/%s/transfer" % (outplotdir, trans_output_name)

if do_transfer:
    pipe_modules.append((aggregate_bulksim.CalculateTransfer, ('atr_mode_', 'atr_')))
atr_mode_powerfile_in = ast_wbeam_statfile_out
atr_mode_powerfile_out = ast_wmode_statfile_out
atr_mode_input_multiplier = input_multiplier
atr_mode_square_transfer = square_transfer
atr_mode_transferfile = "%s/%s_modetransfer.hd5" % (pwrout_root, trans_output_name)
atr_mode_outplotdir = "%s/%s/modetransfer" % (outplotdir, trans_output_name)
