#########################################################################
#                                                                       #
#      This pipeline is used to calculate the cross power spectrum      #
#                                                                       #
#                                                                       #
#########################################################################

import os
import string
pipe_modules = []
pipe_processes = 1
WORKROOT = os.getenv('YICHAO_WORK_PS')

import data_paths
"""  simulation maps  """

print
print "="*50
print "auto power spectrum"
print

hour = int(os.getenv('HOUR'))
mode = int(os.getenv('MODE'))

map_cln = os.getenv('MAP_CLN')

# get the maps dict
imaps = []
if os.path.exists(map_cln):
    output_root = WORKROOT + 'power_auto_%s_%d/'%(map_cln.split('/')[-2], mode)
    resultf = 'auto_%s_%d'%(map_cln.split('/')[-2], mode)
    imaps = data_paths.get_mapdict(map_cln + 'mapmode_map/')
else:
    output_root = WORKROOT + 'power_auto_%s_%d/'%(map_cln, mode)
    resultf = 'auto_%s_%d'%(map_cln, mode)

    datadb = data_paths.DataPath()
    imaps = datadb.fetch(map_cln, silent=True)

print
print imaps
print

imap_root = []
imap_list = []
nmap_root = []
nmap_list = []
SEC = ['A', 'B', 'C', 'D']
for s1 in SEC:
	for s2 in SEC:
		if s1==s2: continue
		
		mappath = imaps[1]['%s_with_%s;map;%dmodes'%(s1, s2, mode)]
		imap_list.append(mappath.split('/')[-1])
		imap_root.append(mappath.replace(mappath.split('/')[-1],''))

		wetpath = imaps[1]['%s_with_%s;noise_inv;%dmodes'%(s1, s2, mode)]
		nmap_list.append(wetpath.split('/')[-1])
		nmap_root.append(wetpath.replace(wetpath.split('/')[-1],''))

		print
		print mappath
		print wetpath

pkc_imap_list = []
pkc_nmap_list = []
for i in range(len(SEC)):
	for j in range(i+1, len(SEC)):
		s1 = SEC[i]
		s2 = SEC[j]
		pkc_imap_list.append(
			[imaps[1]['%s_with_%s;map;%dmodes'%(s1, s2, mode)].split('/')[-1],
			 imaps[1]['%s_with_%s;map;%dmodes'%(s2, s1, mode)].split('/')[-1]])

		pkc_nmap_list.append(
			[imaps[1]['%s_with_%s;noise_inv;%dmodes'%(s1, s2, mode)].split('/')[-1],
			 imaps[1]['%s_with_%s;noise_inv;%dmodes'%(s2, s1, mode)].split('/')[-1]])

print 
print pkc_imap_list
print pkc_nmap_list

if os.path.exists(map_cln):
    cldir = WORKROOT + 'bias/auto_%s_%d/'%(map_cln.split('/')[-2], mode)
else:
    cldir = WORKROOT + 'bias/auto_%s_combined_%d/'%(map_cln, mode)
cldir = ''
#if FLAG=='_optimalmap' or FLAG=='_oldcal':
#	cldir = WORKROOT + 'bias/auto_15hr_%02dmodes/'%(MODE)
#if COMP=='_nocomp':
#	cldir = ''
#cldir = ''

cutlist = []
if hour==15:
    cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
           107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
           187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
           212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
elif hour==22:
	cutlist = [1,  2,  80, 206,201,200,196,192,189,186,182,217,212,211,223,229,
				  252,253,254,255,156,159,191,193,199,204,210,214,219,240,250,209,
				  215,213,187,198,157,197]
elif hour==1:
    #cutlist = [28, 32, 34, 36, 39, 40, 44, 46, 49, 50, 51, 52, 53, 54, 55,\
    #           58, 61, 65, 66, 69, 70, 75, 76, 86, 90, 94, 101, 111, 112]
    #cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
    #       107, 108, 130, 131, 132, 133, 134,]
    cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
           107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
           187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
           212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
else:
	print 'no cutlist'

FKPweight = False 
kmin = 0.003
kmax = 2.5
kbinNum = 45

print
print "-"*50
print
print

#""" Pipe line """
from mkpower import prepare
pipe_modules.append(prepare.Prepare)

from mkpower import mkpower_combine
pipe_modules.append(mkpower_combine.PowerSpectrumMaker)

from mkpower import pycamb
pipe_modules.append(pycamb.CAMB)

""" End """


"""  Prepare """
#from mkpower import prepare
#pipe_modules.append(prepare.Prepare)
pre_processes = 1 
pre_plot = False
#pre_plot = True
pre_output_root = output_root
pre_imap_root = imap_root
pre_nmap_root = nmap_root
pre_imap_list = imap_list
pre_nmap_list = nmap_list

pre_boxshape = (512, 128, 64)
pre_discrete = 2
pre_boxunit = 2.
pre_cutlist = cutlist
pre_window = 'blackman'

"""  Calculate the combined Pk  """
#from mkpower import mkpower_combine
#pipe_modules.append(mkpower_combine.CrossPowerSpectrumMaker)
pkc_processes = 1  
pkc_plot = False 
pkc_saveweight = True
pkc_input_root = output_root
pkc_output_root = output_root
pkc_resultf = resultf

pkc_cldir = cldir

pkc_boxshape = pre_boxshape
pkc_discrete = pre_discrete
pkc_boxunit = pre_boxunit
pkc_kbinNum = kbinNum 
pkc_kmin = kmin
pkc_kmax = kmax

#pkc_FKPweight = True
pkc_FKPweight = FKPweight
pkc_OmegaHI = 1.e-3
pkc_Omegam = 0.24
pkc_OmegaL = 0.76

pkc_sme = True

"""  Calling CAMB """
#from mkpower import pycamb
#pipe_modules.append(pycamb.CAMB)
pcb_output_root = output_root + 'cambio/'
pcb_do_nonlinear = 1
pcb_transfer_redshift = 0.8
pcb_transfer_high_precision = 'T'
pcb_transfer_kmax = 1.5
#pcb_transfer_k_per_logint = 400

