# Pipeline file for guppi data.

import os

from core import dir_data
import scipy as sp


field = '15hr'
file_middles = tuple(dir_data.get_data_files(range(41,74), field='15hr', 
                                             project="GBT10B_036", 
											 type='ralongmap'))
n_files = len(file_middles)
middles_a = file_middles[:n_files//4]
middles_b = file_middles[n_files//4:2*n_files//4]
middles_c = file_middles[2*n_files//4:3*n_files//4]
middles_d = file_middles[3*n_files//4:n_files]

base_dir = os.getenv('GBT_OUT')
data_dir = os.getenv('GBT_DATA')
prefix = ''
map_prefix = '' + field + '_' + '41-73' + '_'

pipe_modules = []
pipe_processes = 10

from time_stream import flag_data
#pipe_modules.append(flag_data.FlagData)
fd_input_root = data_dir
fd_file_middles = file_middles
fd_input_end = '.fits'
fd_output_root = base_dir + 'flagged/' + prefix
fd_output_end = '.fits'
fd_scans = ()
fd_IFs = ()

# No Hanning.  Guppi's filters take care of it.
fd_perform_hanning = False
fd_rotate = True
fd_cal_scale = True
fd_sigma_thres = 6
fd_badness_thres = 0.1
fd_time_cut = 40

from time_stream import rebin_freq
#pipe_modules.append(rebin_freq.RebinFreq)
rf_input_root = fd_output_root
rf_file_middles = file_middles
rf_input_end = '.fits'
rf_output_root = base_dir + 'rebinned/' + prefix
rf_output_end = '.fits'
rf_scans = ()
rf_IFs = ()

rf_channel_width = 0.
rf_n_bins_combined = 16
rf_mean_instead_median = False

from time_stream import calibrate
pipe_modules.append(calibrate.Calibrate)
cl_input_root = rf_output_root
cl_file_middles = file_middles
cl_input_end = '.fits'
cl_output_root = base_dir + 'calibrated/' + prefix
cl_output_end = '.fits'
cl_scans = ()
cl_IFs = ()

cl_cal_temperature_files = (os.getenv('GBT10B_OUT') + 'kevin_cal/cal_21.fits',)

from time_stream import rotate_pol
pipe_modules.append(rotate_pol.RotatePol)
rp_input_root = cl_output_root
rp_file_middles = file_middles
rp_input_end = '.fits'
rp_output_root = base_dir + 'pol_selected/' + prefix
rp_output_end = '.fits'
rp_scans = ()
rp_IFs = ()

rp_new_pols = (1,)
rp_average_cals = True

from map import dirty_map
pipe_modules.append(dirty_map.DirtyMapMaker)
dm_input_root = rp_output_root
dm_file_middles = file_middles
dm_input_end = '.fits'
dm_output_root = base_dir + 'maps/' + map_prefix
dm_scans = ()
dm_IFs = (0,)

dm_field_centre = (217.9, 2.0)
dm_map_shape = (64, 32)
dm_pixel_spacing = .075
#dm_map_shape = (128, 64)
#dm_pixel_spacing = .0375
dm_noise_model = 'disjoint_scans'
dm_polarizations = ('I',)
dm_noise_parameters_input_root = 'None'

from map import clean_map
pipe_modules.append(clean_map.CleanMapMaker)
cm_input_root = dm_output_root
cm_output_root = cm_input_root
cm_polarizations = ('I',)

from time_stream import subtract_map_data
pipe_modules.append(subtract_map_data.Subtract)
sm_input_root = rp_output_root
sm_file_middles = file_middles
sm_input_end = '.fits'
sm_output_root = base_dir + 'map_subtracted/'
sm_output_end = '.fits'
sm_scans = ()
sm_IFs = ()

sm_pols = ()
sm_map_file = base_dir + 'maps/' + map_prefix + 'clean_map_I.npy'
sm_solve_for_gain = True
sm_gain_output_end = '_gain.pickle'
sm_interpolation = 'linear'

from time_stream import reflag
pipe_modules.append(reflag.ReFlag)
sf_input_root = rp_output_root
sf_file_middles = file_middles
sf_input_end = '.fits'
sf_output_root = base_dir + 'reflagged/'
sf_output_end = '.fits'
sf_scans = ()
sf_IFs = ()

sf_thres = 5.0
sf_subtracted_input_root = sm_output_root
sf_subtracted_output_root = base_dir + 'reflag_sub/'

from noise import measure_noise
pipe_modules.append(measure_noise.Measure)
mn_input_root = sf_subtracted_input_root
mn_file_middles = file_middles
mn_input_end = '.fits'
mn_output_root = base_dir + 'noise_measurments/'

mn_model = "scan_var"

#### Make sub map A ####

#from map import dirty_map
#pipe_modules.append((dirty_map.DirtyMapMaker, ('dmA_', 'dm_')))
dmA_file_middles = middles_a
dmA_input_root = sf_output_root
dmA_output_root = base_dir + 'maps/' + "sec_A_" + map_prefix

dmA_noise_parameters_input_root = mn_output_root

#from map import clean_map
#pipe_modules.append((clean_map.CleanMapMaker, ('cmA_', 'cm_')))
cmA_input_root = dmA_output_root
cmA_output_root = dmA_output_root
cmA_save_noise_diag = True

#### Make sub map B ####

from map import dirty_map
pipe_modules.append((dirty_map.DirtyMapMaker, ('dmB_', 'dm_')))
dmB_file_middles = middles_b
dmB_input_root = sf_output_root
dmB_output_root = base_dir + 'maps/' + "sec_B_" + map_prefix

dmB_noise_parameters_input_root = mn_output_root

from map import clean_map
pipe_modules.append((clean_map.CleanMapMaker, ('cmB_', 'cm_')))
cmB_input_root = dmB_output_root
cmB_output_root = dmB_output_root
cmB_save_noise_diag = True

#### Make sub map C ####

#from map import dirty_map
#pipe_modules.append((dirty_map.DirtyMapMaker, ('dmC_', 'dm_')))
dmC_file_middles = middles_c
dmC_input_root = sf_output_root
dmC_output_root = base_dir + 'maps/' + "sec_C_" + map_prefix

dmC_noise_parameters_input_root = mn_output_root

#from map import clean_map
#pipe_modules.append((clean_map.CleanMapMaker, ('cmC_', 'cm_')))
cmC_input_root = dmC_output_root
cmC_output_root = dmC_output_root
cmC_save_noise_diag = True

#### Make sub map D ####

#from map import dirty_map
#pipe_modules.append((dirty_map.DirtyMapMaker, ('dmD_', 'dm_')))
dmD_file_middles = middles_d
dmD_input_root = sf_output_root
dmD_output_root = base_dir + 'maps/' + "sec_D_" + map_prefix

dmD_noise_parameters_input_root = mn_output_root

from map import clean_map
pipe_modules.append((clean_map.CleanMapMaker, ('cmD_', 'cm_')))
cmD_input_root = dmD_output_root
cmD_output_root = dmD_output_root
cmD_save_noise_diag = True

