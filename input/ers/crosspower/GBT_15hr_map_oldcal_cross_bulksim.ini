pipe_modules = []
pipe_processes = 1

from map import simulate_gbt
from quadratic_products import pwrspec_combinations
import struct
import os

randsource = open("/dev/random", "rb")
instance_seed = struct.unpack("I", randsource.read(4))[0]
print "generating simulation with seed: %d" % instance_seed

# main control flags
basemap = "GBT_15hr_map_oldcal"
baseoptmap = "WiggleZ_15hr"
# this is used to get the map geometry and as a weight in the meansub
map_template = "/mnt/raid-project/gmrt/eswitzer/GBT/cleaned_maps/GBT_15hr_map_oldcal/combined_clean_weight_0modes.npy"
basecross = basemap + "_x_" + baseoptmap
output_tag = basecross + "_" + "blackman_order1"

nfreq = 256
cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
               107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
               187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
               212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
freq_list = tuple([ind for ind in range(nfreq) if ind not in cutlist])

pwr_bins = [0.00765314, 2.49977141, 35]
pwr_order = 1
pwr_pad = 5
pwr_refinement = 2
pwr_window = "blackman"
#pwr_window = None
pwr_return_3d = False
pwr_unitless = True
pwr_truncate = False
pwr_degrade_resolution = False
pwr_factorizable_noise = False
pwr_meansub = False
pwrout_root = '/mnt/raid-project/gmrt/eswitzer/GBT/bulksim/'
pwrout_base = pwrout_root + output_tag

if not os.path.isdir(pwrout_base + "_sims/"):
    os.mkdir(pwrout_base + "_sims/")

if not os.path.isdir(pwrout_base + "_obsbeammeansub"):
    os.mkdir(pwrout_base + "_obsbeammeansub")

if not os.path.isdir(pwrout_base + "_obs/"):
    os.mkdir(pwrout_base + "_obs/")

if not os.path.isdir(pwrout_base + "_phys/"):
    os.mkdir(pwrout_base + "_phys/")

pipe_modules.append((simulate_gbt.SimulateGbt, ('sg1_', 'sg_')))
sg1_output_root = pwrout_base + "_sims/"
sg1_template_file = map_template
sg1_seed = instance_seed
sg1_refinement = 2
sg1_weightfile = map_template
sg1_outfile_meansub = "%s_sim_beammeansub_%d.npy" % (output_tag, sg1_seed)
sg1_outfile_raw = "%s_sim_raw_%d.npy" % (output_tag, sg1_seed)
sg1_outfile_delta = "%s_sim_delta_%d.npy" % (output_tag, sg1_seed)
sg1_outfile_physical = "%s_sim_phys_%d.npy" % (output_tag, sg1_seed)

# first find the crosspower in the observed region with beam and meansub
pipe_modules.append((pwrspec_combinations.BatchSimCrosspower, ('bxs1_', 'bxs_')))
bxs1_map_key = basemap + "_cleaned_combined"
bxs1_sim_file = sg1_output_root + sg1_outfile_meansub
bxs1_wigglez_sim_file = sg1_output_root + sg1_outfile_delta
bxs1_wigglez_sel_key = baseoptmap + "_montecarlo"
bxs1_outfile = "%s_obsbeammeansub/%s_sim_%d.shelve" % (pwrout_base, output_tag, sg1_seed)
bxs1_unitless = pwr_unitless
bxs1_return_3d = pwr_return_3d
bxs1_truncate = pwr_truncate
bxs1_window = pwr_window
bxs1_degrade_resolution = pwr_degrade_resolution
bxs1_factorizable_noise = pwr_factorizable_noise
bxs1_meansub = pwr_meansub
bxs1_refinement = pwr_refinement
bxs1_pad = pwr_pad
bxs1_order = pwr_order
bxs1_freq_list = freq_list
bxs1_bins = pwr_bins

# now the crosspower in the observed region (no beam or meansub)
pipe_modules.append((pwrspec_combinations.BatchSimCrosspower, ('bxs2_', 'bxs_')))
bxs2_map_key = basemap + "_cleaned_combined"
bxs2_sim_file = sg1_output_root + sg1_outfile_raw
bxs2_wigglez_sim_file = sg1_output_root + sg1_outfile_delta
bxs2_wigglez_sel_key = baseoptmap + "_montecarlo"
bxs2_outfile = "%s_obs/%s_sim_%d.shelve" % (pwrout_base, output_tag, sg1_seed)
bxs2_unitless = pwr_unitless
bxs2_return_3d = pwr_return_3d
bxs2_truncate = pwr_truncate
bxs2_window = pwr_window
bxs2_degrade_resolution = pwr_degrade_resolution
bxs2_factorizable_noise = pwr_factorizable_noise
bxs2_meansub = pwr_meansub
bxs2_refinement = pwr_refinement
bxs2_pad = pwr_pad
bxs2_order = pwr_order
bxs2_freq_list = freq_list
bxs2_bins = pwr_bins

# now the crosspower in the physical region (to measure pixel window function)
pipe_modules.append((pwrspec_combinations.SinglePhysicalSim, ('sps1_', 'sps_')))
sps1_sim_file_left = sg1_output_root + sg1_outfile_physical
sps1_sim_file_right = sg1_output_root + sg1_outfile_physical
sps1_unitless = pwr_unitless
sps1_return_3d = pwr_return_3d
sps1_truncate = pwr_truncate
sps1_window = pwr_window
sps1_bins = pwr_bins
sps1_outfile = "%s_phys/%s_physsim_%d.shelve" % (pwrout_base, output_tag, sg1_seed)
