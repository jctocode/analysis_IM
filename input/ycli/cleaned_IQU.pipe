# pipeline for  foreground clean

pipe_modules = []
pipe_processes = 1

from foreground_clean import pair_set_legendre
from foreground_clean import pair_set
from map import simulate_gbt
#from quadratic_products import pwrspec_combinations
#from quadratic_products import pwrspec_compile
import os

do_IxIsvd = False
do_IQUclean_withIxIsvd = False
do_IQUclean_themselves = True

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------

# This is the database key for the input map
basemap = os.getenv('MAPFILE')
noiseweight = os.getenv('NOISEWEIGHT')
simfile = os.getenv('SIMFILE')

goodmodes = int(os.getenv('GOODMODES'))
do_cleaning_real = os.getenv('CLEAN_REAL')
do_cleaning_sim = os.getenv('CLEAN_SIM')

nfreq = 256 
cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
           107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
           187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
           212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
freq_list = tuple([ind for ind in range(nfreq) if ind not in cutlist])
mode_list = range(0, 5, 1)
common_res_convolution = False
sub_weighted_mean = True
sim_multiplier = 1.

output_root = '/mnt/raid-project/gmrt/ycli/foreground_cleand/'
output_root += 'IQV_legendre_modes_%dgwj'%goodmodes

#-----------------------------------------------------------------------------
# use the base map parameters above to make a few map cleaning cases
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# use I x I find the first 5 svd modes
#-----------------------------------------------------------------------------
if do_IxIsvd:
    pairlist = ['I_with_I',] 
    pairdict = {}
    pairdict['I_with_I'] = {}
    pairdict['I_with_I']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_I']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_I']['noise_inv1'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_I']['noise_inv2'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_I']['tag1'] = 'I'
    pairdict['I_with_I']['tag2'] = 'I'
    
    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs0_', 'fs_')))

    fs0_pairlist = pairlist
    fs0_pairdict = pairdict
    fs0_calc_diagnal = True
    fs0_output_root = output_root + "/IxI5svd/"
    fs0_freq_list = freq_list
    fs0_modes = range(0, 5, 1)
    fs0_factorizable_noise = True
    fs0_convolve = common_res_convolution
    fs0_sub_weighted_mean = sub_weighted_mean
    fs0_good_modes = goodmodes
    fs0_freq_n_all = nfreq

#-----------------------------------------------------------------------------
# use the svd of IxI, clean I, Q and U
#-----------------------------------------------------------------------------
if do_IQUclean_withIxIsvd:
    pairlist = ['I_with_Q', 'I_with_U']
    pairdict = {}
    pairdict['I_with_Q'] = {}
    pairdict['I_with_Q']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_Q']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_Q.npy'
    pairdict['I_with_Q']['noise_inv1'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_Q']['noise_inv2'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_Q.npy'
    pairdict['I_with_Q']['tag1'] = 'I'
    pairdict['I_with_Q']['tag2'] = 'Q'
    pairdict['I_with_U'] = {}
    pairdict['I_with_U']['map1'] = basemap + '15hr_41-90_fdgp_RM_clean_map_I.npy'
    pairdict['I_with_U']['map2'] = basemap + '15hr_41-90_fdgp_RM_clean_map_U.npy'
    pairdict['I_with_U']['noise_inv1'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_I.npy'
    pairdict['I_with_U']['noise_inv2'] = basemap+'15hr_41-90_fdgp_RM_noise_inv_U.npy'
    pairdict['I_with_U']['tag1'] = 'I'
    pairdict['I_with_U']['tag2'] = 'U'
    
    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs1_', 'fs_')))
    fs1_SVD_root = output_root + "/IxI5svd/"
    fs1_SVD_file = "SVD_pair_I_with_I.pkl"
    fs1_pairlist = pairlist
    fs1_pairdict = pairdict
    fs1_calc_diagnal = True
    fs1_output_root = output_root + "/IQUmap_clean_withIxIsvd/"
    fs1_freq_list = freq_list
    fs1_modes = range(0, 5, 1)
    fs1_factorizable_noise = True
    fs1_convolve = common_res_convolution
    fs1_sub_weighted_mean = sub_weighted_mean
    fs1_good_modes = goodmodes
    fs1_freq_n_all = nfreq

#-----------------------------------------------------------------------------
# clean I, Q and U using cleand I, Q and U maps
#-----------------------------------------------------------------------------
if do_IQUclean_themselves:
    pairlist = ['I_with_Q', 'I_with_U']
    pairdict = {}
    pairdict['I_with_Q'] = {}
    pairdict['I_with_Q']['map1'] = output_root + "/IQUmap_clean_withIxIsvd/"
    pairdict['I_with_Q']['map1']+= "sec_I_cleaned_clean_map_I_with_Q_3modes.npy"
    pairdict['I_with_Q']['map2'] =  output_root + "/IQUmap_clean_withIxIsvd/"
    pairdict['I_with_Q']['map2']+= "sec_Q_cleaned_clean_map_I_with_I_3modes.npy"
    pairdict['I_with_Q']['noise_inv1'] = output_root + "/IQUmap_clean_withIxIsvd/"
    pairdict['I_with_Q']['noise_inv1']+= "sec_I_cleaned_noise_inv_I_with_Q_3modes.npy"
    pairdict['I_with_Q']['noise_inv2'] = output_root + "/IQUmap_clean_withIxIsvd/"
    pairdict['I_with_Q']['noise_inv2']+= "sec_Q_cleaned_noise_inv_I_with_I_3modes.npy"
    pairdict['I_with_Q']['tag1'] = 'I'
    pairdict['I_with_Q']['tag2'] = 'Q'
    pairdict['I_with_U'] = {}
    pairdict['I_with_U']['map1'] = output_root + "/IQUmap_clean_withIxIsvd/"
    pairdict['I_with_U']['map1']+= "sec_I_cleaned_clean_map_I_with_U_3modes.npy"
    pairdict['I_with_U']['map2'] = output_root + "/IQUmap_clean_withIxIsvd/"
    pairdict['I_with_U']['map2']+= "sec_U_cleaned_clean_map_I_with_I_3modes.npy"
    pairdict['I_with_U']['noise_inv1'] = output_root + "/IQUmap_clean_withIxIsvd/"
    pairdict['I_with_U']['noise_inv1']+= "sec_I_cleaned_noise_inv_I_with_U_3modes.npy"
    pairdict['I_with_U']['noise_inv2'] = output_root + "/IQUmap_clean_withIxIsvd/"
    pairdict['I_with_U']['noise_inv2']+= "sec_U_cleaned_noise_inv_I_with_I_3modes.npy"
    pairdict['I_with_U']['tag1'] = 'I'
    pairdict['I_with_U']['tag2'] = 'U'
    
    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs2_', 'fs_')))
    fs2_pairlist = pairlist
    fs2_pairdict = pairdict
    #fs2_calc_diagnal = True
    fs2_output_root = output_root + "/IQUmap_clean_themselves/"
    fs2_freq_list = freq_list
    fs2_modes = range(0, 55, 5)
    fs2_factorizable_noise = True
    fs2_convolve = common_res_convolution
    fs2_sub_weighted_mean = sub_weighted_mean
    fs2_good_modes = goodmodes
    fs2_freq_n_all = nfreq

#-----------------------------------------------------------------------------
# generate simulation maps for GBT and WiggleZ
#-----------------------------------------------------------------------------
if do_simulation:
    pipe_modules.append((simulate_gbt.SimulateGBT, ('sg1_', 'sg_')))
    sg1_output_root = pwrout_base + "_sims/"
    sg1_template_file = map_template
    sg1_seed = instance_seed
    sg1_refinement = 2
    sg1_weightfile = map_template
    sg1_outfile_meansub = "%s_sim_beammeansub_%d.npy" % (output_tag, sg1_seed)
    sg1_outfile_raw = "%s_sim_raw_%d.npy" % (output_tag, sg1_seed)
    sg1_outfile_delta = "%s_sim_delta_%d.npy" % (output_tag, sg1_seed)
    sg1_outfile_physical = "%s_sim_phys_%d.npy" % (output_tag, sg1_seed)
