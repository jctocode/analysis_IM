pipe_modules = []
pipe_processes = 1

from foreground_clean import pair_set
from foreground_clean import pair_set_extended
from quadratic_products import pwrspec_combinations
from quadratic_products import auto_pwrspec_compile
from quadratic_products import auto_pwrspec_analyze
import struct
import os

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------
# This is the database key for the input map
basemap = 'GBT_15hr_map_oldcalpolstack'
#basemap = 'GBT_15hr_map_oldcalpol'
#basemap = 'GBT_15hr_map_oldcal'
# and an identifer for this run (any keywords)
#output_tag = basemap + "_" + "order1conv"
#output_tag = basemap + "_" + "order1"
output_tag = basemap + "_" + "weighted"
#trans_output_tag = output_tag
trans_output_tag = 'GBT_15hr_map_oldcalpolstack' + "_" + "omega0p5"

# control the main operations
do_cleaning = False
do_ext_cleaning = True
do_power = True
do_power_compile = True
do_analysis = True

nfreq = 256
cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
               107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
               187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
               212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
freq_list = tuple([ind for ind in range(nfreq) if ind not in cutlist])
mode_list = range(0, 105, 5)
weighted_svd = True
common_res_convolution = False
sub_weighted_mean = True
output_root = basemap + "_cleaned"

# now the power spectral parameters
pwr_bins = [0.003, 2.5, 45]
pwr_order = 1
pwr_pad = 5
pwr_refinement = 2
#pwr_window = "blackman"
pwr_window = None
pwr_return_3d = False
pwr_unitless = True
pwr_truncate = False
pwr_degrade_resolution = False
pwr_factorizable_noise = False
pwr_2d_to_1d_noiseweight = True
pwr_meansub = False
pwrout_root = '/mnt/raid-project/gmrt/eswitzer/GBT/pwrspec/'
pwrout_base = pwrout_root + output_tag + "/"
pwrout_plots_self = "./pwrspec_plots/" + output_tag + "_self/"
pwrout_plots_self_notrans = "./pwrspec_plots/" + output_tag + "_self_notrans/"

if pwr_2d_to_1d_noiseweight:
    pwrout_plots_notrans = "./pwrspec_plots/" + output_tag + "_noiseweight_notrans/"
    pwrout_plots = "./pwrspec_plots/" + output_tag + "_noiseweight/"
else:
    pwrout_plots_notrans = "./pwrspec_plots/" + output_tag + "_countweight_notrans/"
    pwrout_plots = "./pwrspec_plots/" + output_tag + "_countweight/"

pwrout_analysis_plots = "./pwrspec_plots/" + output_tag + "_analysis/"

trans_root = "/mnt/raid-project/gmrt/eswitzer/GBT/pwrspec/"
trans_beam = trans_root + trans_output_tag + "_transfer_function_beamtransfer.hd5"
trans_mode = trans_root + trans_output_tag + "_transfer_function_modetransfer.hd5"
#trans_root = "/mnt/raid-project/gmrt/eswitzer/GBT/bulksim/"
#trans_beam = trans_root + "GBT_15hr_map_oldcal_blackman_order1_one-sided_beamtransfer.hd5"
#trans_mode = trans_root + "GBT_15hr_map_oldcal_blackman_order1_one-sided_modetransfer.hd5"
#trans_beam = None
#trans_mode = None

#-----------------------------------------------------------------------------
# use the base map parameters above to make a few map cleaning cases
#-----------------------------------------------------------------------------
# clean_{map} (map)
if do_ext_cleaning:
    pipe_modules.append((pair_set_extended.PairSetExtended, ('fse1_', 'fse_')))
fse1_map2 = basemap
fse1_map1 = basemap
fse1_noise_inv1 = basemap
fse1_noise_inv2 = basemap
fse1_map2_ext = [basemap + "_Q", basemap + "_U", basemap + "_V"]
fse1_map1_ext = [basemap + "_Q", basemap + "_U", basemap + "_V"]
fse1_noise_inv1_ext = [basemap + "_Q", basemap + "_U", basemap + "_V"]
fse1_noise_inv2_ext = [basemap + "_Q", basemap + "_U", basemap + "_V"]
fse1_index_ext = ["stokesQ", "stokesU", "stokesV"]
fse1_output_root = output_root + "_path_Eric"
fse1_freq_list = freq_list
fse1_modes = mode_list
fse1_factorizable_noise = True
fse1_weighted_SVD = weighted_svd
fse1_convolve = common_res_convolution
fse1_sub_weighted_mean = sub_weighted_mean


if do_cleaning:
    pipe_modules.append((pair_set.PairSet, ('fs1_', 'fs_')))
fs1_map2 = basemap
fs1_map1 = basemap
fs1_noise_inv1 = basemap
fs1_noise_inv2 = basemap
fs1_output_root = output_root + "_path_Eric"
fs1_freq_list = freq_list
fs1_modes = mode_list
fs1_factorizable_noise = True
fs1_convolve = common_res_convolution
fs1_sub_weighted_mean = sub_weighted_mean

#-----------------------------------------------------------------------------
# now run the power spectra
#-----------------------------------------------------------------------------
if not os.path.isdir(pwrout_base):
    os.mkdir(pwrout_base)

if do_power:
    pipe_modules.append((pwrspec_combinations.GbtDataAutopower, ('xs1_', 'xs_')))
xs1_degrade_resolution = pwr_degrade_resolution
xs1_factorizable_noise = pwr_factorizable_noise
xs1_meansub = pwr_meansub
xs1_unitless = pwr_unitless
xs1_return_3d = pwr_return_3d
xs1_truncate = pwr_truncate
xs1_window = pwr_window
xs1_refinement = pwr_refinement
xs1_pad = pwr_pad
xs1_order = pwr_order
xs1_bins = pwr_bins
xs1_freq_list = freq_list
xs1_map_key = basemap + "_cleaned"
xs1_ncpu = 24
xs1_outfile = pwrout_base + basemap + ".shelve"

if do_power:
    pipe_modules.append((pwrspec_combinations.GbtDataNoisePower, ('ns1_', 'ns_')))
ns1_degrade_resolution = pwr_degrade_resolution
ns1_factorizable_noise = pwr_factorizable_noise
ns1_meansub = pwr_meansub
ns1_unitless = pwr_unitless
ns1_return_3d = pwr_return_3d
ns1_truncate = pwr_truncate
ns1_window = pwr_window
ns1_refinement = pwr_refinement
ns1_pad = pwr_pad
ns1_order = pwr_order
ns1_bins = pwr_bins
ns1_freq_list = freq_list
ns1_map_key = basemap + "_cleaned"
ns1_ncpu = 24
ns1_outfile = pwrout_base + basemap + "_noise.shelve"

#-----------------------------------------------------------------------------
# Find the noise weight and plot the AxA power
#-----------------------------------------------------------------------------
if do_power_compile:
    pipe_modules.append(auto_pwrspec_compile.CompileAutoNoiseweight)
autonoiseweight_p_noise = pwrout_base + basemap + "_noise.shelve"
autonoiseweight_apply_2d_beamtransfer = trans_beam
autonoiseweight_apply_2d_modetransfer = trans_mode
autonoiseweight_outfile = pwrout_base + basemap + "_noiseweight.hd5"

if not os.path.isdir(pwrout_plots_self):
    os.mkdir(pwrout_plots_self)

if do_power_compile:
    pipe_modules.append((auto_pwrspec_compile.CompileAutopower, ('autopower1_', 'autopower_')))
autopower1_p_map = pwrout_base + basemap + "_noise.shelve"
autopower1_summaryfile = pwrout_base + basemap + "_self.hd5"
autopower1_apply_2d_beamtransfer = trans_beam
autopower1_apply_2d_modetransfer = trans_mode
if pwr_2d_to_1d_noiseweight:
    autopower1_noiseweights_2dto1d = pwrout_base + basemap + "_noiseweight.hd5"
else:
    autopower1_noiseweights_2dto1d = None
autopower1_outdir = pwrout_plots_self

if not os.path.isdir(pwrout_plots_self_notrans):
    os.mkdir(pwrout_plots_self_notrans)

if do_power_compile:
    pipe_modules.append((auto_pwrspec_compile.CompileAutopower, ('autopower1a_', 'autopower_')))
autopower1a_p_map = pwrout_base + basemap + "_noise.shelve"
autopower1a_summaryfile = pwrout_base + basemap + "_self_notrans.hd5"
autopower1a_apply_2d_beamtransfer = None
autopower1a_apply_2d_modetransfer = None
if pwr_2d_to_1d_noiseweight:
    autopower1a_noiseweights_2dto1d = pwrout_base + basemap + "_noiseweight.hd5"
else:
    autopower1a_noiseweights_2dto1d = None
autopower1a_outdir = pwrout_plots_self_notrans

#-----------------------------------------------------------------------------
# Find the power spectral summaries
#-----------------------------------------------------------------------------
if not os.path.isdir(pwrout_plots):
    os.mkdir(pwrout_plots)

if do_power_compile:
    pipe_modules.append((auto_pwrspec_compile.CompileAutopower, ('autopower2_', 'autopower_')))
autopower2_p_map = pwrout_base + basemap + ".shelve"
autopower2_summaryfile = pwrout_base + basemap + "_signal.hd5"
autopower2_apply_2d_beamtransfer = trans_beam
autopower2_apply_2d_modetransfer = trans_mode
if pwr_2d_to_1d_noiseweight:
    autopower2_noiseweights_2dto1d = pwrout_base + basemap + "_noiseweight.hd5"
else:
    autopower2_noiseweights_2dto1d = None
autopower2_outdir = pwrout_plots

if not os.path.isdir(pwrout_plots_notrans):
    os.mkdir(pwrout_plots_notrans)

if do_power_compile:
    pipe_modules.append((auto_pwrspec_compile.CompileAutopower, ('autopower3_', 'autopower_')))
autopower3_p_map = pwrout_base + basemap + ".shelve"
autopower3_summaryfile = pwrout_base + basemap + "_signal_notrans.hd5"
autopower3_apply_2d_beamtransfer = trans_beam
autopower3_apply_2d_modetransfer = None
if pwr_2d_to_1d_noiseweight:
    autopower3_noiseweights_2dto1d = pwrout_base + basemap + "_noiseweight.hd5"
else:
    autopower3_noiseweights_2dto1d = None
autopower3_outdir = pwrout_plots_notrans

#-----------------------------------------------------------------------------
# Perform an analysis of the final spectra
#-----------------------------------------------------------------------------
if not os.path.isdir(pwrout_plots):
    os.mkdir(pwrout_analysis_plots)

if do_analysis:
    pipe_modules.append(auto_pwrspec_analyze.AnalyzeAutopower)
analyzeautopower_sim_auto_summary = pwrout_root + "GBT_15hr_map_oldcal_noise_simulations_stat_auto.hd5"
analyzeautopower_sim_xspec_summary = pwrout_root + "GBT_15hr_map_oldcal_noise_simulations_stat_xspec.hd5"
analyzeautopower_data_auto_summary = pwrout_base + basemap + "_self.hd5"
analyzeautopower_data_xspec_summary = pwrout_base + basemap + "_signal.hd5"
analyzeautopower_outdir = pwrout_analysis_plots

