# Input file for map maker testing.

import os

from core import dir_data
import scipy as sp

#sessions = range(41, 81)
#file_middles = tuple(dir_data.get_data_files(sessions, field='15hr', project="GBT10B_036", type = 'ralongmap'))

first_set = dir_data.get_data_files(range(80,91),field='1hr',project='GBT10B_036', type='ralongmap')
second_set = dir_data.get_data_files(range(0,14),field='1hr',project='GBT11B_055', type='ralongmap')
#third_set = dir_data.get_data_files(range(15,19),field='1hr',project='GBT11B_055',type='ralongmap')
third_set = dir_data.get_data_files(range(15,17),field='1hr',project='GBT11B_055',type='ralongmap')

fourth_set = dir_data.get_data_files(range(1,28),field='1hr',project='GBT13B_352',type='ralongmap')
fourth_set = fourth_set[1:]
#file_middles = tuple(first_set+second_set+third_set+fourth_set)
#file_middles = file_middles[:-3]

#File middles if just doing the 10B and 11B data
file_middles = tuple(first_set+second_set+third_set)
print len(file_middles)

n_files = len(file_middles)
new_file_middles = []
for i in range(0,n_files):
#    if file_middles[i]=='GBT10B_036/44_wigglez15hrst_ralongmap_169-176':
#        print file_middles[i]
#    elif file_middles[i]=='GBT10B_036/47_wigglez15hrst_ralongmap_230-237':
#        print file_middles[i]
#    elif file_middles[i]=='GBT10B_036/47_wigglez15hrst_ralongmap_58-65':
#        print file_middles[i]
#    elif file_middles[i]=='GBT10B_036/47_wigglez15hrst_ralongmap_10-17':
#        print file_middles[i]
#    elif file_middles[i]=='GBT10B_036/47_wigglez15hrst_ralongmap_110-117':
#        print file_middles[i]
#    else : 
    new_file_middles.append(file_middles[i])
new_file_middles = tuple(new_file_middles)
n_files = len(new_file_middles)

middles_a = file_middles[:n_files//4]
middles_b = file_middles[n_files//4:2*n_files//4]
middles_c = file_middles[2*n_files//4:3*n_files//4]
middles_d = file_middles[3*n_files//4:n_files]


#file_middles = tuple(dir_data.get_data_files(range(80,91), field='1hr', project='GBT10B_036', type='ralongmap')+dir_data.get_data_files(range(0,14), field='1hr', project='GBT11B_055',type='ralongmap')+dir_data.get_data_files(range(15,19), field='1hr', project='GBT11B_055', type='ralongmap'))

# Use this line to shorten amount of data to use.
#file_middles = file_middles[:10]
# file_middles = file_middles[:1]

map_centre = (13.0, 1.85)
# Large problem size, full map.
#map_shape = (161, 83)
#map_spacing = .0627
# Standard problem size.
#map_shape = (72, 38)
#map_spacing = .0627
# Small problem size.
#map_shape = (44, 24)
#map_spacing = .0627
# Tiny problem size.
map_shape = (24, 14)
map_spacing = .0627

# Data paths
#raid_pro = os.getenv("RAID_PRO")
#input_data_dir = raid_pro + "kiyo/gbt_out_new/"
base_dir = os.getenv("GBT_OUT")
#input_data_dir = base_dir+"rotated_to_I_Q_avg_fdgp_ptcorr/"

#Victor's test data directory
input_data_dir = base_dir + "rotated_to_I_Q/"


#map_dir = base_dir + 'maps/first_lockandwrite_test/'
#map_root = map_dir + "tmp_test_parallel_freqcorr_"
#map_root = base_dir+"maps/1hr_parallel_test/1hr_80-28_ptcorr_"
#map_root = base_dir+"maps/1hr_parallel_test/secD_1hr_80-28_ptcorr_"
#map_root = map_dir + "tmp_test_parallel_"

#Victor's data test directory
map_root = base_dir+"maps/1hr_polarize_test/"
map_base = map_root
#map_base = base_dir+"maps/1hr_parallel_test/"
map_prefix = "_1hr_80-18_newpol_"

# Map maker parameters.
dm_input_root = input_data_dir 
dm_file_middles = file_middles
dm_input_end = '.fits'
dm_output_root = map_root
dm_scans = ()
dm_IFs = (0,)
dm_polarizations = ('I',)
dm_field_centre = map_centre
dm_pixel_spacing = map_spacing
dm_map_shape = map_shape
dm_time_block = 'scan'
dm_n_files_group = 10  # tpb nodes.
dm_frequency_correlations = 'None'
dm_frequency_correlations = 'None'
dm_number_frequency_modes = 0
dm_number_frequency_modes_discard = 1
dm_noise_parameter_file = ''
dm_deweight_time_mean = True
dm_deweight_time_slope = True
dm_interpolation = 'cubic'
dm_ts_foreground_mode_file = ''
dm_n_ts_foreground_modes = 0

#cm_input_root = dm_output_root
#cm_output_root = cm_input_root
#cm_polarizations = ('I',)
#cm_polarizations = ('I','Q','U','V')
#cm_bands = (800,)
#cm_save_noise_diag = True
#cm_mem_lim = (2)

# dirty_map
# Map A
#dm_input_root = input_data_dir
#dm_file_middles = middles_d
#dm_noise_parameter_file = base_dir+"noise_measurments_sec_newpol/noise_parameters_take2.shelve"
#dm_input_end = '.fits'
#dm_output_root = map_root
#dm_scans = ()
#dm_IFs = (0,)

#dmA_polarizations = ('I','Q','U','V')
#dm_polarizations = ('I',)
#dm_field_centre = map_centre
#dm_pixel_spacing = map_spacing
#dm_map_shape = map_shape
#dm_time_block = 'scan'
#dmA_n_files_group = 420  # prawn
#dm_n_files_group = 10  # tpb nodes.
#dmA_n_files_group = 120
#dm_frequency_correlations = 'None'
#dmA_number_frequency_modes = 3
#dm_number_frequency_modes = 0  # Probably most appropriate.
#dmA_number_frequency_modes_discard = 1
#dmA_noise_parameter_file = ''
#dm_noise_parameter_file = base_dir+"noise_measurments_sec/noise_parameters_take2.shelve"
#dm_deweight_time_mean = True
#dm_deweight_time_slope = True
#dm_interpolation = 'cubic'
#dm_ts_foreground_mode_file = ''
#dm_n_ts_foreground_modes = 0


