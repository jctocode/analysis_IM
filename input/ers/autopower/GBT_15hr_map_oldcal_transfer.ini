pipe_modules = []
pipe_processes = 1

from quadratic_products import aggregate_bulksim
import os

basemap = "GBT_15hr_map_oldcalpolstack"
#basemap = "GBT_15hr_map_oldcalpol"
#basemap = "GBT_15hr_map_oldcal"
wbeam_basemap = "GBT_15hr_map_oldcal"
pwrout_root = '/mnt/raid-project/gmrt/eswitzer/GBT/pwrspec/'
output_tag = basemap + "_" + "transfer_function"

baseauto = basemap + "_x_" + basemap
modeoutput_tag = baseauto + "_" + "order1"
modeout_base = pwrout_root + modeoutput_tag

sigpwr_base = pwrout_root + basemap + "_" + "order1" + "/"

outplotdir = "/cita/h/home-2/eswitzer/code/analysis_IM/pwrspec_plots/"
#outplotdir = "/home/r/rbond/eswitzer/code/analysis_IM/pwrspec_plots/"

do_compile_phys = True
do_compile_wbeam = True
do_compile_mode = True
do_statistics = True
do_transfer = True

# the rest is fairly automated and should not need to change
#----------------------------------------------------------------------------
# first compile all the simulation runs into a single file
#----------------------------------------------------------------------------
# in this case, we are using only the aggregated 2D powers so do not care
# about applying the transfer functions
if do_compile_phys:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as1_', 'as_')))
as1_apply_2d_beamtransfer = None
as1_apply_2d_modetransfer = None
as1_noiseweights_2dto1d = None
as1_fix_weight_treatment = None
as1_directory = pwrout_root + basemap + "_x_" + basemap + "_" + "order1_phys"
as1_basefile = "%s_x_%s_order1_physsim" % (basemap, basemap)
as1_outfile = "%s/%s_phys.hd5" % (pwrout_root, output_tag)

if do_compile_wbeam:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as2_', 'as_')))
as2_apply_2d_beamtransfer = None
as2_apply_2d_modetransfer = None
as2_noiseweights_2dto1d = None
as2_fix_weight_treatment = None
as2_directory = pwrout_root + wbeam_basemap + "_" + "noise_simulations_xspec"
as2_basefile = "%s_sim_" % (wbeam_basemap + "_" + "noise_simulations")
as2_outfile = "%s/%s_xspec_wbeam.hd5" % (pwrout_root, output_tag)

if do_compile_mode:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as3_', 'as_')))
as3_apply_2d_beamtransfer = None
as3_apply_2d_modetransfer = None
as3_noiseweights_2dto1d = None
as3_fix_weight_treatment = None
as3_directory = "%s_modeclean_plussim" % modeout_base
as3_basefile = "%s_sim_" % modeoutput_tag
as3_outfile = "%s/%s_plussim.hd5" % (pwrout_root, output_tag)

if do_compile_mode:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as4_', 'as_')))
as4_apply_2d_beamtransfer = None
as4_apply_2d_modetransfer = None
as4_noiseweights_2dto1d = None
as4_fix_weight_treatment = None
as4_subtract_pwrspec = sigpwr_base + basemap + ".shelve"
as4_directory = "%s_modeclean_plussim" % modeout_base
as4_basefile = "%s_sim_" % modeoutput_tag
as4_outfile = "%s/%s_modesim.hd5" % (pwrout_root, output_tag)

#----------------------------------------------------------------------------
# then find some statistics on the above sets
#----------------------------------------------------------------------------
if not os.path.isdir(outplotdir + output_tag):
    os.mkdir(outplotdir + output_tag)

if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast1_', 'ast_')))
ast1_aggfile_in = as1_outfile
ast1_statfile_out = "%s/%s_stat_phys.hd5" % (pwrout_root, output_tag)
ast1_outplotdir = "%s/%s/sim_phys" % (outplotdir, output_tag)

if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast2_', 'ast_')))
ast2_aggfile_in = as2_outfile
ast2_statfile_out = "%s/%s_stat_xspec_wbeam.hd5" % (pwrout_root, output_tag)
ast2_outplotdir = "%s/%s/sim_wbeam" % (outplotdir, output_tag)

if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast3_', 'ast_')))
ast3_aggfile_in = as3_outfile
ast3_statfile_out = "%s/%s_stat_plussim.hd5" % (pwrout_root, output_tag)
ast3_outplotdir = "%s/%s/sim_plussim" % (outplotdir, output_tag)

if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast4_', 'ast_')))
ast4_aggfile_in = as4_outfile
ast4_statfile_out = "%s/%s_stat_modesim.hd5" % (pwrout_root, output_tag)
ast4_outplotdir = "%s/%s/sim_modesim" % (outplotdir, output_tag)

#----------------------------------------------------------------------------
# find the transfer functions
#----------------------------------------------------------------------------
if do_transfer:
    pipe_modules.append((aggregate_bulksim.CalculateTransfer, ('atr1_', 'atr_')))
atr1_powerfile_in = ast1_statfile_out
atr1_powerfile_out = ast2_statfile_out
atr1_transferfile = "%s/%s_beamtransfer.hd5" % (pwrout_root, output_tag)
atr1_outplotdir = "%s/%s/transfer" % (outplotdir, output_tag)

if do_transfer:
    pipe_modules.append((aggregate_bulksim.CalculateTransfer, ('atr2_', 'atr_')))
atr2_powerfile_in = ast2_statfile_out
#atr2_powerfile_out = sub1_output_file
atr2_powerfile_out = ast4_statfile_out
atr2_transferfile = "%s/%s_modetransfer.hd5" % (pwrout_root, output_tag)
atr2_outplotdir = "%s/%s/modetransfer" % (outplotdir, output_tag)
