pipe_modules = []
pipe_processes = 1

from quadratic_products import aggregate_bulksim
basemap = "GBT_15hr_map_oldcal"
pwrout_root = '/mnt/raid-project/gmrt/eswitzer/GBT/pwrspec/'
output_tag = basemap + "_" + "noise_simulations"
pwrout_base = pwrout_root + output_tag

outplotdir = "/cita/h/home-2/eswitzer/code/analysis_IM/pwrspec_plots/"
#outplotdir = "/home/r/rbond/eswitzer/code/analysis_IM/pwrspec_plots/"

do_compile = True
do_statistics = True

# the rest is fairly automated and should not need to change
#----------------------------------------------------------------------------
# first compile all the simulation runs into a single file
#----------------------------------------------------------------------------
if do_compile:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as1_', 'as_')))
as1_apply_2d_transfer = None
as1_directory = "%s_xspec/" % pwrout_base
as1_basefile = "%s_sim_" % output_tag
as1_outfile = "%s/%s_xspec.shelve" % (pwrout_root, output_tag)

if do_compile:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as2_', 'as_')))
as2_apply_2d_transfer = None
as2_directory = "%s_auto/" % pwrout_base
as2_basefile = "%s_sim_" % output_tag
as2_outfile = "%s/%s_auto.shelve" % (pwrout_root, output_tag)

#----------------------------------------------------------------------------
# then find some statistics on the above sets
#----------------------------------------------------------------------------
if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast1_', 'ast_')))
ast1_shelvefile = as1_outfile
ast1_outputdir = "%s/%s_xspec/" % (outplotdir, output_tag)

if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast2_', 'ast_')))
ast2_shelvefile = as2_outfile
ast2_outputdir = "%s/%s_auto/" % (outplotdir, output_tag)
