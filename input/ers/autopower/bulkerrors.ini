pipe_modules = []
pipe_processes = 1

from map import simulate_gbt
from quadratic_products import pwrspec_combinations
from foreground_clean import pair_set
import struct
import os

# flags for scinet vs. tpb
basedir = "/mnt/raid-project/gmrt/eswitzer/GBT/"
#basedir = "/scratch/r/rbond/eswitzer/GBT/"

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------
instance_seed = struct.unpack("I", os.urandom(4))[0]
print "generating simulation with seed: %d" % instance_seed

# 15 hr map
#basemap = "GBT_15hr_map_oldcal"
#basemap_path = "GBT_maps_Eric_15hroldcal"
#integration_time = 105./4.

# 1hr map
basemap = "GBT_1hr_map_oldcalpolstack"
basemap_path = "GBT_maps_Eric_1hroldcalpolstack"
integration_time = 84./4.

output_tag = basemap + "_" + "noise_simulations"

do_simulation = True
do_cleaning = True
do_power = True
do_cleanup = True

# simulation options
sim_refinement = 2.
sim_scenario = "str"
sim_multiplier = 1.

# cleaning options
nfreq = 256
cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
               107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
               187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
               212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
freq_list = tuple([ind for ind in range(nfreq) if ind not in cutlist])
clean_mode_list = [0]
clean_common_res_convolution = False
clean_sub_weighted_mean = True
clean_factorizable = True

# now the power spectral parameters
pwr_bins = [0.003, 2.5, 45]
pwr_order = 1
pwr_pad = 5
pwr_refinement = 2
#pwr_window = "blackman"
pwr_window = None
pwr_return_3d = False
pwr_unitless = True
pwr_truncate = False
pwr_degrade_resolution = False
pwr_factorizable_noise = False
pwr_meansub = False
pwrout_root = basedir + 'pwrspec/'
pwrout_base = pwrout_root + output_tag
pwrout_auto = pwrout_base + "_auto/"
pwrout_xspec = pwrout_base + "_xspec/"

#-----------------------------------------------------------------------------
# make the simulations of thermal noise and signal
# run the data through the cleaning pipeline; currently zero modes removed
# find the auto-power using AxB etc., but also AxA (noise power)
# clean up sim map and cleaned version
#-----------------------------------------------------------------------------
if do_simulation:
    pipe_modules.append(simulate_gbt.SimulateGbt)
sgbt_template_key = basemap
sgbt_output_key = basemap
sgbt_tack_on = "%d_simulation" % instance_seed
sgbt_total_integration = integration_time
sgbt_refinement = sim_refinement
sgbt_scenario = sim_scenario
sgbt_multiplier = sim_multiplier
sgbt_seed = instance_seed

if do_cleaning:
    pipe_modules.append((pair_set.PairSet, ('fs1_', 'fs_')))
fs1_map2 = basemap
fs1_map1 = basemap
fs1_noise_inv1 = basemap
fs1_noise_inv2 = basemap
fs1_output_root = basemap + "_cleaned_path_Eric"
fs1_freq_list = freq_list
fs1_tack_on_input = "%d_simulation" % instance_seed
fs1_tack_on_output = "%d_simulation" % instance_seed
fs1_modes = clean_mode_list
fs1_factorizable_noise = clean_factorizable
fs1_convolve = clean_common_res_convolution
fs1_sub_weighted_mean = clean_sub_weighted_mean
# note that this multiplies both signal and thermal noise
fs1_sim_multiplier = 1.
fs1_subtract_inputmap_from_sim = False
fs1_subtract_sim_from_inputmap = False

if not os.path.isdir(pwrout_auto):
    os.mkdir(pwrout_auto)

if not os.path.isdir(pwrout_xspec):
    os.mkdir(pwrout_xspec)

# Note: power spectrum estimation is not parallelized here (ncpu is 1) because
# the natural way to parallelize is to run many copies of this pipeline

if do_power:
    pipe_modules.append((pwrspec_combinations.GbtDataAutopower, ('xs1_', 'xs_')))
xs1_degrade_resolution = pwr_degrade_resolution
xs1_factorizable_noise = pwr_factorizable_noise
xs1_meansub = pwr_meansub
xs1_unitless = pwr_unitless
xs1_return_3d = pwr_return_3d
xs1_truncate = pwr_truncate
xs1_window = pwr_window
xs1_refinement = pwr_refinement
xs1_pad = pwr_pad
xs1_order = pwr_order
xs1_bins = pwr_bins
xs1_freq_list = freq_list
xs1_treatments = ['0modes']
xs1_map_key = basemap + "_cleaned"
xs1_tack_on = "%d_simulation" % instance_seed
xs1_ncpu = 1
xs1_outfile = "%s/%s_sim_%d.shelve" % (pwrout_xspec, output_tag, instance_seed)

if do_power:
    pipe_modules.append((pwrspec_combinations.GbtDataNoisePower, ('ns1_', 'ns_')))
ns1_degrade_resolution = pwr_degrade_resolution
ns1_factorizable_noise = pwr_factorizable_noise
ns1_meansub = pwr_meansub
ns1_unitless = pwr_unitless
ns1_return_3d = pwr_return_3d
ns1_truncate = pwr_truncate
ns1_window = pwr_window
ns1_refinement = pwr_refinement
ns1_pad = pwr_pad
ns1_order = pwr_order
ns1_bins = pwr_bins
ns1_freq_list = freq_list
ns1_treatments = ['0modes']
ns1_tack_on = "%d_simulation" % instance_seed
ns1_map_key = basemap + "_cleaned"
ns1_ncpu = 1
ns1_outfile = "%s/%s_sim_%d.shelve" % (pwrout_auto, output_tag, instance_seed)

if do_cleanup:
    pipe_modules.append((pwrspec_combinations.CleanupCleanedMaps, ('clean1_', 'clean_')))
clean1_path_key = basemap_path
clean1_tack_on = "%d_simulation" % instance_seed

if do_cleanup:
    pipe_modules.append((pwrspec_combinations.CleanupCleanedMaps, ('clean2_', 'clean_')))
clean2_path_key = basemap + "_cleaned_path_Eric"
clean2_tack_on = "%d_simulation" % instance_seed

