#! /usr/bin/env python

import scipy as sp
import numpy as np
from numpy.fft import *
import scipy.linalg as linalg

from core import algebra, hist
from kiyopy import parse_ini
import kiyopy.utils
import kiyopy.custom_exceptions as ce
from scipy import integrate
from math import *
from sys import *
import BoxFilling

#dirty_map = algebra.load("15hr_41_dirty_map_I.npy")
#dirty_map = algebra.make_vect(dirty_map)

#print dirty_map.mean()
#print dirty_map.axes
#
#fq = dirty_map.get_axis('freq')/1.0e6
#print fq.size, fq[0]

pi = 3.1415926
deg2rad = pi/180.

params_init = {
	'input_root' : '../newmaps/',
	'hr' : ('15hr_42_',),
	'polarizations' : ('I',),
	'output_root' : './',

	'boxshape' : (128,128,128),
	'boxunit' : 15., # in unit Mpc
	'discrete' : 3,
	'Xrange' : (1400,),
	'Yrange' : (-64*15,64*15),
	'Zrange' : (0.,128*15),
}
prefix = 'pk_'

class PowerSpectrumMaker(object):
	"""Calculate Power Spectrum"""

	def __init__(self, parameter_file_or_dict=None, feedback=2):
		# Read in the parameters.
		self.params = parse_ini.parse(parameter_file_or_dict, params_init, prefix=prefix)

		self.feedback=feedback
	
	def execute(self, nprocesses=1):
		params = self.params

		# Make parent directory and write parameter file.
		kiyopy.utils.mkparents(params['output_root'])
		parse_ini.write_params(params, params['output_root']+'params.ini',prefix='pk_')
		in_root = params['input_root']
		all_out_fname_list = []
		all_in_fname_list = []
		
		# Process
		pol_str = params['polarizations'][0]
		hr_str = params['hr'][0]
		imap_fname = in_root + hr_str + 'dirty_map_' + pol_str + '.npy'
		imap = algebra.load(imap_fname)
		imap = algebra.make_vect(imap)
		if imap.axes != ('freq', 'ra', 'dec') :
			raise ce.DataError('AXES ERROR!')

		#nmap_fname = in_root + hr_str + 'noise_inv_' + pol_str + '.npy'
		#nmap = algebra.open_memmap(nmap_fname, 'r')
		#nmap = algebra.make_mat(nmap)
		#print nmap.axes

		mapshape = np.array(imap.shape)
		#print imap.shape

		r  = self.discrete(self.fq2r(imap.get_axis('freq')))
		ra = self.discrete(imap.get_axis('ra'))*deg2rad
		de = self.discrete(imap.get_axis('dec'))*deg2rad
		ra0= ra[int(ra.shape[0]/2)]
		ra = ra - ra0
		dr = r.ptp()/r.shape[0]
		dra= ra.ptp()/ra.shape[0]
		dde= de.ptp()/de.shape[0]
		disc_n = params['discrete']
		#imap = imap.swapaxes(1,2)  # change the ra and dec
		#print imap.shape

		mapinf = [dr, dra, dde, disc_n]
		mapinf = np.array(mapinf)
		print mapinf

		#print r	
		#print ra
		#print de

		box = algebra.info_array(sp.zeros(params['boxshape']))
		box.axes = ('x','y','z')
		box = algebra.make_vect(box)
		boxshape = np.array(box.shape)

		
		xrange0 = params['Xrange'][0]
		yrange0 = params['Yrange'][0]
		zrange0 = params['Zrange'][0]
		boxunit = params['boxunit']
		shapex = params['boxshape'][2]
		shapera = ra.shape[0]
		V = params['boxunit']**3

		boxinf = [xrange0, yrange0, zrange0, boxunit]
		boxinf = np.array(boxinf)

		print "Filling the BOX"
		BoxFilling.execute(imap, box, r, ra, de, boxinf, mapinf)

#		for i, ri in enumerate(r):
#			for k, dek in enumerate(de):
#				z = int((ri*cos(0.5*pi-dek)-zrange0)/boxunit)
#				v = ri**2*sin(0.5*pi-dek)
#				alpha = v*dr*dra*dde/V
#				print alpha
#				value = imap[int(i/disc_n)][int(k/disc_n)]
#				ragood = filter(lambda x:value[int(x/disc_n)]!=0,range(shapera))
#				xy = map(lambda j:\
#				 int((ri*sin(0.5*pi-dek)*sin(ra[j])-yrange0)/boxunit)*shapex+\
#				 int((ri*sin(0.5*pi-dek)*cos(ra[j])-xrange0)/boxunit),ragood)
#				vindx = map(lambda j:int(j/disc_n), ragood)
#
#				box[z].put(xy, box[z].take(xy)+value.take(vindx)*alpha)
#
#			print "%3.2f%%\r" % (float(i+1)/float(r.shape[0])*100.),
#			stdout.flush()
#		BoxFilling.execute(imap, box, r, ra, de, boxinf, mapinf)
#
#		algebra.save("box.npy",box)
#
#		print box.shape
#
#
		print "FFTing "
		fftbox = fftn(box)
		fftbox = fftbox.real**2 + fftbox.imag**2
#		print fftbox[0][0][1]
#
#		
#		#print r.min(), r.max(), r.max()-r.min()
#		#print ra.min(), ra.max(), ra.max()-ra.min()
#		#print de.min(), de.max(), de.max()-de.min()


	def xyzv(self, ra, de, r, ra0=0.):
		x = r*sin(0.5*pi-de)*cos(ra-ra0)
		y = r*sin(0.5*pi-de)*sin(ra-ra0)
		z = r*cos(0.5*pi-de)
		v = r**2*sin(0.5*pi-de)
		return x, y, z, v

	def fq2r(self, freq, freq0=1.4e9 , c_H0 = 2.99e3, Omegam=0.27, Omegal=0.73):
		"""change the freq to distence"""
		zz =  freq0/freq - 1.
		for i in range(0, zz.shape[0]):
			zz[i] = c_H0*self.funcdl(zz[i], Omegam, Omegal)
		return zz
	
	def discrete(self, array):
		"""discrete the data pixel into small size"""
		newarray = sp.zeros(self.params['discrete']*(array.shape[0]-1)+1)
		for i in range(0, array.shape[0]-1):
			delta = (array[i+1]-array[i])/float(self.params['discrete'])
			for j in range(0, self.params['discrete']):
				newarray[i*self.params['discrete']+j] = array[i] + j*delta
		newarray[-1] = array[-1]
		return newarray

	def funcdl(self, z, omegam, omegal):
		func = lambda z, omegam, omegal: \
			((1.+z)**2*(1.+omegam*z)-z*(2.+z)*omegal)**(-0.5)
		dl, dlerr = integrate.quad(func, 0, z, args=(omegam, omegal))
	
		if omegam+omegal>1. :
			k = (omegam+omegal-1.)**(0.5)
			return sin(k*dl)/k
		elif omegam+omegal<1.:
			k = (1.-omegam-omegal)**(0.5)
			return sinh(k*dl)/k
		elif omegam+omegal==1.:
			return dl



if __name__ == '__main__':
	import sys
	if len(sys.argv)==2 :
		PowerSpectrumMaker(str(sys.argv[1])).execute()
	elif len(sys.argv)>2 :
		print 'Maximun one argument, a parameter file name.'
	else :
		PowerSpectrumMaker().execute()
