pipe_modules = []
pipe_processes = 1

from map import simulate_gbt_signal
from quadratic_products import pwrspec_combinations
from foreground_clean import pair_set
from foreground_clean import pair_set_extended
import struct
import os

# flags for scinet vs. tpb
#basedir = "/mnt/raid-project/gmrt/eswitzer/GBT/"
basedir = "/scratch/r/rbond/eswitzer/GBT/"

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------
instance_seed = struct.unpack("I", os.urandom(4))[0]
print "generating simulation with seed: %d" % instance_seed

basemap = "GBT_15hr_map_oldcalpol"
baseauto = basemap + "_x_" + basemap
#output_tag = baseauto + "_" + "blackman_order1"
output_tag = baseauto + "_" + "order1"

do_simulation = True
do_physpower = True
do_ext_cleaning = True
do_cleaning = False
do_modepower = True
do_cleanup = True

# simulation options
sim_refinement = 2.
sim_scenario = "str"
sim_multiplier = 1.

# cleaning options
nfreq = 256
cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
               107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
               187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
               212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
freq_list = tuple([ind for ind in range(nfreq) if ind not in cutlist])
clean_mode_list = range(0, 105, 5)
clean_common_res_convolution = False
clean_sub_weighted_mean = True
clean_factorizable = True
clean_sim_multiplier = 1.

# power spectrum settings
pwr_bins = [0.003, 2.5, 45]
pwr_order = 1
pwr_pad = 5
pwr_refinement = 2
#pwr_window = "blackman"
pwr_window = None
pwr_return_3d = False
pwr_unitless = True
pwr_truncate = False
pwr_degrade_resolution = False
pwr_factorizable_noise = False
pwr_meansub = False
pwrout_root = basedir + 'pwrspec/'
pwrout_base = pwrout_root + output_tag

#-----------------------------------------------------------------------------
# clean_{map+sim} (map+sim)
#-----------------------------------------------------------------------------
# TODO replace with SimulateGbt

if do_simulation:
    pipe_modules.append((simulate_gbt_signal.SimulateGbtSignal, ('sg1_', 'sg_')))
sg1_output_root = pwrout_base + "_sims/"
sg1_template_file = "db:" + basemap + ":A;noise_weight"
sg1_seed = instance_seed
sg1_refinement = 2
sg1_weightfile = "db:" + basemap + ":A;noise_weight"
sg1_outfile_meansub = "%s_sim_beammeansub_%d.npy" % (output_tag, sg1_seed)
sg1_outfile_raw = "%s_sim_raw_%d.npy" % (output_tag, sg1_seed)
sg1_outfile_delta = "%s_sim_delta_%d.npy" % (output_tag, sg1_seed)
sg1_outfile_physical = "%s_sim_phys_%d.npy" % (output_tag, sg1_seed)

if not os.path.isdir(pwrout_base + "_phys/"):
    os.mkdir(pwrout_base + "_phys/")

if do_physpower:
    pipe_modules.append((pwrspec_combinations.SinglePhysicalSim, ('sps1_', 'sps_')))
sps1_sim_file_left = sg1_output_root + sg1_outfile_physical
sps1_sim_file_right = sg1_output_root + sg1_outfile_physical
sps1_unitless = pwr_unitless
sps1_return_3d = pwr_return_3d
sps1_truncate = pwr_truncate
sps1_window = pwr_window
sps1_bins = pwr_bins
sps1_ncpu = 1
sps1_outfile = "%s_phys/%s_physsim_%d.shelve" % (pwrout_base, output_tag, instance_seed)

if do_ext_cleaning:
    pipe_modules.append((pair_set_extended.PairSetExtended, ('fse1_', 'fse_')))
fse1_map2 = basemap
fse1_map1 = basemap
fse1_noise_inv1 = basemap
fse1_noise_inv2 = basemap
fse1_map2_ext = [basemap + "_Q", basemap + "_U", basemap + "_V"]
fse1_map1_ext = [basemap + "_Q", basemap + "_U", basemap + "_V"]
fse1_noise_inv1_ext = [basemap + "_Q", basemap + "_U", basemap + "_V"]
fse1_noise_inv2_ext = [basemap + "_Q", basemap + "_U", basemap + "_V"]
fse1_index_ext = ["stokesQ", "stokesU", "stokesV"]
fse1_output_root = basemap + "_cleaned_plussim_path_Eric"
fse1_freq_list = freq_list
fse1_tack_on_output = "%d_simulation" % instance_seed
fse1_modes = clean_mode_list
fse1_factorizable_noise = clean_factorizable
fse1_convolve = clean_common_res_convolution
fse1_sub_weighted_mean = clean_sub_weighted_mean
fse1_simfile = sg1_output_root + sg1_outfile_meansub
fse1_sim_multiplier = clean_sim_multiplier
fse1_subtract_inputmap_from_sim = False
fse1_subtract_sim_from_inputmap = False

if do_cleaning:
    pipe_modules.append((pair_set.PairSet, ('fs1_', 'fs_')))
fs1_map2 = basemap
fs1_map1 = basemap
fs1_noise_inv1 = basemap
fs1_noise_inv2 = basemap
fs1_output_root = basemap + "_cleaned_plussim_path_Eric"
fs1_freq_list = freq_list
fs1_tack_on_output = "%d_simulation" % instance_seed
fs1_modes = clean_mode_list
fs1_factorizable_noise = clean_factorizable
fs1_convolve = clean_common_res_convolution
fs1_sub_weighted_mean = clean_sub_weighted_mean
fs1_simfile = sg1_output_root + sg1_outfile_meansub
fs1_sim_multiplier = clean_sim_multiplier
fs1_subtract_inputmap_from_sim = False
fs1_subtract_sim_from_inputmap = False

if not os.path.isdir(pwrout_base + "_modeclean_plussim"):
    os.mkdir(pwrout_base + "_modeclean_plussim")

if do_modepower:
    pipe_modules.append((pwrspec_combinations.GbtDataAutopower, ('xs1_', 'xs_')))
xs1_degrade_resolution = pwr_degrade_resolution
xs1_factorizable_noise = pwr_factorizable_noise
xs1_meansub = pwr_meansub
xs1_unitless = pwr_unitless
xs1_return_3d = pwr_return_3d
xs1_truncate = pwr_truncate
xs1_window = pwr_window
xs1_refinement = pwr_refinement
xs1_pad = pwr_pad
xs1_order = pwr_order
xs1_bins = pwr_bins
xs1_freq_list = freq_list
xs1_map_key = basemap + "_cleaned_plussim"
xs1_tack_on = "%d_simulation" % instance_seed
xs1_ncpu = 6
xs1_outfile = "%s_modeclean_plussim/%s_sim_%d.shelve" % (pwrout_base, output_tag, instance_seed)

if do_cleanup:
    pipe_modules.append((pwrspec_combinations.CleanupCleanedMaps, ('clean1_', 'clean_')))
clean1_path_key = basemap + "_cleaned_plussim_path_Eric"
clean1_tack_on = "%d_simulation" % instance_seed
