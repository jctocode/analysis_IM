# various types of sepctra compiled:
# phys -- P(k) of simulations from original physical coordinates
# nobeam -- P(k) of simulations -> obs. coord -> physical
# wbeam -- P(k) of simulations -> obs. coord, with beam and meansub -> physical
pipe_modules = []
pipe_processes = 1

from quadratic_products import aggregate_bulksim
import os

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------
do_compile_phys = True
do_compile_nobeam = True
do_compile_wbeam = True
do_statistics = True

#basemap = "GBT_1hr_map_oldcalpolstack"
#kperp_range = [0.04, 0.3]
#kpar_range = [0.035, 1.]

#basemap = "GBT_15hr_map_autopaper"
#kperp_range = [0.08, 0.3]
#kpar_range = [0.035, 1.]

basemap = 'GBT_15hr_avg_fdgp_new'
kperp_range = [0.08, 0.3]
kpar_range = [0.035, 1.]

output_tag = "onesided_ixi_conv1p4_clipnoise_bfwindow_svdweighted"
#output_tag = "theorytest"
input_multiplier = 1.

#----------------------------------------------------------------------------
# the rest is fairly automated and should not need to change
#----------------------------------------------------------------------------
baseauto = basemap + "_x_" + basemap
baseauto_with_tag = basemap + "_x_" + basemap + "_" + output_tag
trans_output_tag = output_tag
trans_output_name = baseauto + "_" + trans_output_tag + "_transfer_function"
signal_output_name = baseauto_with_tag + "_puresignal"

#outplotdir = "/cita/h/home-2/eswitzer/code/analysis_IM/pwrspec_plots/"
outplotdir = "/home/ycli/data/ps_result_eswitzer/gbt_pwrspec_plots/"
#pwrout_root = '/mnt/raid-project/gmrt/eswitzer/GBT/pwrspec/'
pwrout_root = '/home/ycli/data/ps_result_eswitzer/gbt_pwrspec/'

physpwrdir = pwrout_root + baseauto_with_tag + "_phys/"
nobeampwrdir = pwrout_root + baseauto_with_tag + "_nobeam/"
wbeampwrdir = pwrout_root + baseauto_with_tag + "_wbeam/"

trans_beam = "%s/%s_beamtransfer.hd5" % (pwrout_root, trans_output_name)
trans_mode = "%s/%s_modetransfer.hd5" % (pwrout_root, trans_output_name)

pwrout_base = pwrout_root + baseauto_with_tag + "_measured/"
noiseweight_file = pwrout_base + "noiseweight.hd5"

# important: the signal sims are only for one "treatment" 
# when using a weight, that weight must correspond with the target number of 
# modes removed in the real data
fix_weight_treatment = "20modes"

#----------------------------------------------------------------------------
# first compile all the simulation runs into a single file
#----------------------------------------------------------------------------
if do_compile_phys:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as_physpwr_', 'as_')))
as_physpwr_apply_2d_beamtransfer = None
as_physpwr_apply_2d_modetransfer = None
as_physpwr_noiseweights_2dto1d = None
as_physpwr_fix_weight_treatment = None
as_physpwr_directory = physpwrdir
as_physpwr_basefile = ""
as_physpwr_outfile = "%s/%s_phys.hd5" % (pwrout_root, signal_output_name)

if do_compile_nobeam:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as_nobeam_', 'as_')))
as_nobeam_apply_2d_beamtransfer = None
as_nobeam_apply_2d_modetransfer = None
as_nobeam_noiseweights_2dto1d = noiseweight_file
as_nobeam_fix_weight_treatment = fix_weight_treatment
as_nobeam_directory = nobeampwrdir
as_nobeam_basefile = ""
as_nobeam_outfile = "%s/%s_nobeam.hd5" % (pwrout_root, signal_output_name)
as_nobeam_kperp_range = kperp_range
as_nobeam_kpar_range = kpar_range

# note that the wbeam simulations have the beam only applied to one side of the quadratic
# the transfer function is as if the beam is on both sides (as in the real data)
if do_compile_wbeam:
    pipe_modules.append((aggregate_bulksim.AggregateSummary, ('as_wbeam_', 'as_')))
as_wbeam_apply_2d_beamtransfer = None
as_wbeam_apply_2d_modetransfer = None
as_wbeam_noiseweights_2dto1d = noiseweight_file
as_wbeam_fix_weight_treatment = fix_weight_treatment
as_wbeam_directory = wbeampwrdir
as_wbeam_basefile = ""
as_wbeam_outfile = "%s/%s_wbeam.hd5" % (pwrout_root, signal_output_name)
as_wbeam_kperp_range = kperp_range
as_wbeam_kpar_range = kpar_range

#----------------------------------------------------------------------------
# then find some statistics on the above sets
#----------------------------------------------------------------------------
if not os.path.isdir(outplotdir + signal_output_name):
    os.mkdir(outplotdir + signal_output_name)

if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast_physpwr_', 'ast_')))
ast_physpwr_aggfile_in = as_physpwr_outfile
ast_physpwr_statfile_out = "%s/%s_stat_phys.hd5" % (pwrout_root, signal_output_name)
ast_physpwr_outplotdir = "%s/%s/sim_phys" % (outplotdir, signal_output_name)

if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast_nobeam_', 'ast_')))
ast_nobeam_aggfile_in = as_nobeam_outfile
ast_nobeam_statfile_out = "%s/%s_stat_nobeam.hd5" % (pwrout_root, signal_output_name)
ast_nobeam_outplotdir = "%s/%s/sim_nobeam" % (outplotdir, signal_output_name)

if do_statistics:
    pipe_modules.append((aggregate_bulksim.AggregateStatistics, ('ast_wbeam_', 'ast_')))
ast_wbeam_aggfile_in = as_wbeam_outfile
ast_wbeam_statfile_out = "%s/%s_stat_wbeam.hd5" % (pwrout_root, signal_output_name)
ast_wbeam_outplotdir = "%s/%s/sim_wbeam" % (outplotdir, signal_output_name)
