# Input file for map maker testing.

import os

from core import dir_data
import scipy as sp

#sessions = range(41, 81)
#file_middles = tuple(dir_data.get_data_files(sessions, field='15hr', project="GBT10B_036", type = 'ralongmap'))

first_set = dir_data.get_data_files(range(80,91),field='1hr',project='GBT10B_036', type='ralongmap')
second_set = dir_data.get_data_files(range(0,14),field='1hr',project='GBT11B_055', type='ralongmap')
third_set = dir_data.get_data_files(range(15,19),field='1hr',project='GBT11B_055',type='ralongmap')
fourth_set = dir_data.get_data_files(range(1,28),field='1hr',project='GBT13B_352',type='ralongmap')
fourth_set = fourth_set[1:]
file_middles = tuple(first_set+second_set+third_set+fourth_set)
file_middles = file_middles[:-3]
print len(file_middles)

n_files = len(file_middles)
new_file_middles = []
for i in range(0,n_files):
#    if file_middles[i]=='GBT10B_036/44_wigglez15hrst_ralongmap_169-176':
#        print file_middles[i]
#    elif file_middles[i]=='GBT10B_036/47_wigglez15hrst_ralongmap_230-237':
#        print file_middles[i]
#    elif file_middles[i]=='GBT10B_036/47_wigglez15hrst_ralongmap_58-65':
#        print file_middles[i]
#    elif file_middles[i]=='GBT10B_036/47_wigglez15hrst_ralongmap_10-17':
#        print file_middles[i]
#    elif file_middles[i]=='GBT10B_036/47_wigglez15hrst_ralongmap_110-117':
#        print file_middles[i]
#    else : 
    new_file_middles.append(file_middles[i])
new_file_middles = tuple(new_file_middles)
n_files = len(new_file_middles)

middles_a = file_middles[:n_files//4]
middles_b = file_middles[n_files//4:2*n_files//4]
middles_c = file_middles[2*n_files//4:3*n_files//4]
middles_d = file_middles[3*n_files//4:n_files]


#file_middles = tuple(dir_data.get_data_files(range(80,91), field='1hr', project='GBT10B_036', type='ralongmap')+dir_data.get_data_files(range(0,14), field='1hr', project='GBT11B_055',type='ralongmap')+dir_data.get_data_files(range(15,19), field='1hr', project='GBT11B_055', type='ralongmap'))

# Use this line to shorten amount of data to use.
#file_middles = file_middles[:10]
# file_middles = file_middles[:1]

map_centre = (13.0, 1.85)
# Large problem size, full map.
map_shape = (161, 83)
map_spacing = .0627
# Standard problem size.
#map_shape = (72, 38)
#map_spacing = .0627
# Small problem size.
#map_shape = (44, 24)
#map_spacing = .0627
# Tiny problem size.
#map_shape = (24, 14)
#map_spacing = .0627

# Data paths
#raid_pro = os.getenv("RAID_PRO")
#input_data_dir = raid_pro + "kiyo/gbt_out_new/"
base_dir = os.getenv("GBT_OUT")
input_data_dir = base_dir+"rotated_to_I_Q_avg_fdgp_ptcorr/"
#map_dir = base_dir + 'maps/first_lockandwrite_test/'
#map_root = map_dir + "tmp_test_parallel_freqcorr_"
map_root = base_dir+"maps/1hr_parallel_test/1hr_80-28_ptcorr_"
#map_root = map_dir + "tmp_test_parallel_"
map_base = base_dir+'maps/1hr_parallel_test/'
map_prefix = '_1hr_80-28_ptcorr_'

# Map maker parameters.
dm_input_root = input_data_dir 
dm_file_middles = file_middles
dm_input_end = '.fits'
dm_output_root = map_root
dm_scans = ()
dm_IFs = (0,)
dm_polarizations = ('I',)
dm_field_centre = map_centre
dm_pixel_spacing = map_spacing
dm_map_shape = map_shape
dm_time_block = 'scan'
dm_n_files_group = 10  # tpb nodes.
dm_frequency_correlations = 'None'
#dm_frequency_correlations = 'None'
dm_number_frequency_modes = 0
#dm_number_frequency_modes_discard = 1
dm_noise_parameter_file = ''
dm_deweight_time_mean = True
dm_deweight_time_slope = True
dm_interpolation = 'cubic'
#dm_ts_foreground_mode_file = ''
#dm_n_ts_foreground_modes = 0

cm_input_root = dm_output_root
cm_output_root = cm_input_root
cm_polarizations = ('I',)
#cm_polarizations = ('I','Q','U','V')
cm_bands = (800,)
cm_save_noise_diag = True
#cm_mem_lim = (2)

# dirty_map
# Map A
dmA_input_root = input_data_dir
dmA_file_middles = middles_a
dmA_input_end = '.fits'
dmA_output_root = map_base + 'secA_' + map_prefix
dmA_scans = ()
dmA_IFs = ()

#dmA_polarizations = ('I','Q','U','V')
dmA_polarizations = ('I',)
dmA_field_centre = map_centre
dmA_pixel_spacing = map_spacing
dmA_map_shape = map_shape
dmA_time_block = 'scan'
#dmA_n_files_group = 420  # prawn
dmA_n_files_group = 10  # tpb nodes.
#dmA_n_files_group = 120
dmA_frequency_correlations = 'None'
#dmA_number_frequency_modes = 3
dmA_number_frequency_modes = 3  # Probably most appropriate.
dmA_number_frequency_modes_discard = 1
#dmA_noise_parameter_file = ''
dmA_noise_parameter_file = base_dir+'noise_measurements_sec/noise_parameters_take2.shelve'
dmA_deweight_time_mean = True
dmA_deweight_time_slope = True
dmA_interpolation = 'cubic'
dmA_ts_foreground_mode_file = ''
dmA_n_ts_foreground_modes = 0

# Other maps mostly copy parameters of map A.
dmB_file_middles = middles_b
dmB_output_root = map_base + 'secB_' + map_prefix

dmC_file_middles = middles_c
dmC_output_root = map_base + 'secC_' + map_prefix

dmD_file_middles = middles_d
dmD_output_root = map_base + 'secD_' + map_prefix

# clean_map
# Map A
cmA_input_root = dmA_output_root
cmA_output_root = cmA_input_root

cmA_polarizations = ('I',)
#cmA_polarizations = ('I','Q','U','V')
cmA_bands = (800,)
cmA_save_noise_diag = True
cmA_save_cholesky = False
cmA_from_eig = False

# Other maps
cmB_input_root = dmB_output_root
cmB_output_root = cmB_input_root

cmC_input_root = dmC_output_root
cmC_output_root = cmC_input_root

cmD_input_root = dmD_output_root
cmD_output_root = cmD_input_root

# Parameters that are set to be the same as the A case.
dmB_input_root = dmA_input_root
dmB_input_end = dmA_input_end
dmB_scans = dmA_scans
dmB_IFs = dmA_IFs
dmB_polarizations = dmA_polarizations
dmB_field_centre = dmA_field_centre
dmB_map_shape = dmA_map_shape
dmB_pixel_spacing = dmA_pixel_spacing
dmB_time_block = dmA_time_block
dmB_n_files_group = dmA_n_files_group
dmB_frequency_correlations =  dmA_frequency_correlations
dmB_number_frequency_modes = dmA_number_frequency_modes
dmB_number_frequency_modes_discard = dmA_number_frequency_modes_discard
dmB_noise_parameter_file = dmA_noise_parameter_file
dmB_deweight_time_mean = dmA_deweight_time_mean
dmB_deweight_time_slope = dmA_deweight_time_slope
dmB_interpolation = dmA_interpolation
dmB_ts_foreground_mode_file = dmA_ts_foreground_mode_file
dmB_n_ts_foreground_modes = dmA_n_ts_foreground_modes

dmC_input_root = dmA_input_root
dmC_input_end = dmA_input_end
dmC_scans = dmA_scans
dmC_IFs = dmA_IFs
dmC_polarizations = dmA_polarizations
dmC_field_centre = dmA_field_centre
dmC_map_shape = dmA_map_shape
dmC_pixel_spacing = dmA_pixel_spacing
dmC_time_block = dmA_time_block
dmC_n_files_group = dmA_n_files_group
dmC_frequency_correlations =  dmA_frequency_correlations
dmC_number_frequency_modes = dmA_number_frequency_modes
dmC_number_frequency_modes_discard = dmA_number_frequency_modes_discard
dmC_noise_parameter_file = dmA_noise_parameter_file
dmC_deweight_time_mean = dmA_deweight_time_mean
dmC_deweight_time_slope = dmA_deweight_time_slope
dmC_interpolation = dmA_interpolation
dmC_ts_foreground_mode_file = dmA_ts_foreground_mode_file
dmC_n_ts_foreground_modes = dmA_n_ts_foreground_modes

dmD_input_root = dmA_input_root
dmD_input_end = dmA_input_end
dmD_scans = dmA_scans
dmD_IFs = dmA_IFs
dmD_polarizations = dmA_polarizations
dmD_field_centre = dmA_field_centre
dmD_map_shape = dmA_map_shape
dmD_pixel_spacing = dmA_pixel_spacing
dmD_time_block = dmA_time_block
dmD_n_files_group = dmA_n_files_group
dmD_frequency_correlations =  dmA_frequency_correlations
dmD_number_frequency_modes = dmA_number_frequency_modes
dmD_number_frequency_modes_discard = dmA_number_frequency_modes_discard
dmD_noise_parameter_file = dmA_noise_parameter_file
dmD_deweight_time_mean = dmA_deweight_time_mean
dmD_deweight_time_slope = dmA_deweight_time_slope
dmD_interpolation = dmA_interpolation
dmD_ts_foreground_mode_file = dmA_ts_foreground_mode_file
dmD_n_ts_foreground_modes = dmA_n_ts_foreground_modes


cmB_polarizations = cmA_polarizations
cmB_bands = cmA_bands
cmB_save_noise_diag = cmA_save_noise_diag
cmB_save_cholesky = cmA_save_cholesky
cmB_from_eig = cmA_from_eig

cmC_polarizations = cmA_polarizations
cmC_bands = cmA_bands
cmC_save_noise_diag = cmA_save_noise_diag
cmC_save_cholesky = cmA_save_cholesky
cmC_from_eig = cmA_from_eig

cmD_polarizations = cmA_polarizations
cmD_bands = cmA_bands
cmD_save_noise_diag = cmA_save_noise_diag
cmD_save_cholesky = cmA_save_cholesky
cmD_from_eig = cmA_from_eig
 
