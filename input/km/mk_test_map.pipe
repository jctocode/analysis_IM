# Note that this input file for the pipeline (.pipe file) will also work as a
# valid input file for any of the called submodules (.ini file).  Thus the
# following are all valid calls:
# python pipeline/manager.py test.pipe
# python time_stream/hanning.py test.pipe
# python map/map_maker.py  test.pipe
#
# Each of these calls of course only uses the relevant parts of the .pipe file.

import os

from core import dir_data
field = '22hr'
mm_field_centre = (325.7, 0.0)
file_middles = tuple(dir_data.get_data_files([1], field))

pipe_modules = []
pipe_processes = 6

base_dir = os.getenv('GBT10B_OUT')
raw_data_dir = os.getenv('GBT10B_DATA')
prefix = 'test_map_'
IFs = ()

from time_stream import rebin_freq
#pipe_modules.append(rebin_freq.RebinFreq)
rf_input_root = raw_data_dir
rf_file_middles = file_middles
rf_input_end = ".raw.acs.fits"
rf_output_root = base_dir + 'rebinned/' + prefix
rf_output_end = '.fits'
rf_scans = ()
rf_IFs = ()

rf_channel_width = 2.0
rf_mean_instead_median = True

from time_stream import stitch_windows_crude
#pipe_modules.append(stitch_windows_crude.Stitch)
sw_input_root = rf_output_root
sw_file_middles = file_middles
sw_input_end = '.fits'
sw_output_root = base_dir + 'stitched/' + prefix
sw_output_end = '.fits'
sw_scans = ()
sw_IFs = ()

from time_stream import cal_scale
#pipe_modules.append(cal_scale.CalScale)
cs_input_root = sw_output_root
cs_file_middles = file_middles
cs_input_end = '.fits'
cs_output_root = base_dir + 'cal_scaled/' + prefix
cs_output_end = '.fits'
cs_scans = ()
cs_IFs = ()

cs_scale_time_average = True
cs_scale_freq_average = False
cs_subtract_time_median = True

from time_stream import calibrate
#pipe_modules.append(calibrate.Calibrate)
cl_input_root = cs_output_root
cl_file_middles = file_middles
cl_input_end = '.fits'
cl_output_root = base_dir + 'calibrated/' + prefix
cl_output_end = '.fits'
cl_scans = ()
cl_IFs = ()

cl_cal_temperature_files = (os.getenv('GBT10B_OUT') + 'kevin_cal/cal_21.fits',)

from time_stream import rotate_pol
#pipe_modules.append(rotate_pol.RotatePol)
rp_input_root = cl_output_root
rp_file_middles = file_middles
rp_input_end = '.fits'
rp_output_root = base_dir + 'pol/' + prefix
rp_output_end = '.fits'
rp_scans = ()
rp_IFs = ()

rp_new_pols = (1,)
rp_average_cals = True

from map import map_maker
pipe_modules.append(map_maker.MapMaker)
mm_input_root = rp_output_root
mm_file_middles = file_middles
mm_input_end = '.fits'
mm_output_root = './testfile_'
mm_output_end = '.fits'
mm_scans = ()
mm_IFs = (0,)

mm_map_shape = (22, 10)
mm_pixel_spacing = .2
mm_noise_model = 'disjoint_scans'

# Not acctually nessisary, but good do do anyway.
del file_middles
del base_dir
del prefix
del IFs
del raw_data_dir
