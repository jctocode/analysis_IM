# Input file for pol_cal module.

import os

from core import dir_data

# Here you choose which files to process.
field = '22hr'
#field = '1hr'
#field = '15hr'
# Sessions 2 and 4 seem to be bad.
#file_middles = tuple(dir_data.get_data_files([1,3,5,6,7,8,9,10,11,12,13,14,15],
#                                             field))
#file_middles = tuple(dir_data.get_data_files([21], field))
#file_middles = tuple(dir_data.get_data_files(range(0, 22), field))
#file_middles = tuple(dir_data.get_data_files(range(0, 35), field))
#file_middles = tuple(dir_data.get_data_files(range(0, 01), field))
#                     + dir_data.get_data_files(range(0, 36), '15hr')
#                     + dir_data.get_data_files(range(0, 36), '22hr'))
#Here I'm grabbing the cal data.
file_middles = tuple(dir_data.get_cal_files(range(24, 26)))
					 
pipe_modules = []
# Chime has 8 cores, but you should save a few for other people.  Use 6 max.
pipe_processes = 1
#pipe_processes = 6

base_dir = os.getenv('GBT10B_OUT')
raw_data_dir = os.getenv('GBT10B_DATA')
kiyo_dir = os.getenv('GBT10B_KM')
prefix = ''
IFs = ()

from time_stream import hanning 
# Comment this line to skip this step when running python pipeline/manager
pipe_modules.append(hanning.Hanning)
ha_input_root = raw_data_dir
ha_file_middles = file_middles
ha_input_end = ".raw.acs.fits"
ha_output_root = base_dir + 'hanning/' + prefix
ha_output_end = ".fits"
ha_scans = ()
# All following steps will inherit this choice by default (because these are
# the only IF's saved to the following fits files).
ha_IFs = IFs

from time_stream import flag_data
# Comment this line to skip this step when running python pipeline/manager
pipe_modules.append(flag_data.FlagData)
fd_input_root = ha_output_root
fd_file_middles = file_middles
fd_input_end = '.fits'
fd_output_root = base_dir + 'flagged/' + prefix
fd_output_end = '.fits'
fd_scans = ()
fd_IFs = ()

fd_sigma_thres = 8
fd_pol_thres = 8
fd_pol_width = 2
fd_flatten_pol = True
fd_derivative_cuts = 5
fd_derivative_width = 1

from time_stream import rebin_freq
# Comment this line to skip this step when running python pipeline/manager
pipe_modules.append(rebin_freq.RebinFreq)
rf_input_root = fd_output_root
rf_file_middles = file_middles
rf_input_end = '.fits'
rf_output_root = base_dir + 'rebinned/' + prefix
rf_output_end = '.fits'
rf_scans = ()
rf_IFs = ()

rf_channel_width = 2.0
rf_mean_instead_median = True


from time_stream import rotate_pol
# Comment this line to skip this step in pipline.
pipe_modules.append(rotate_pol.RotatePol)
rp_input_root = rf_output_root
rp_file_middles = file_middles
rp_input_end = '.fits'
rp_output_root = base_dir + 'rotated_for_pol_cal/' + prefix
rp_output_end = '.fits'
rp_scans = ()
rp_IFs = ()

rp_new_pols = (1,2,3,4)
rp_average_cals = False

from time_stream import pol_cal
# Comment this line to skip this step in pipline.
pipe_modules.append(pol_cal.Calibrate)
pc_input_root = rp_output_root
pc_file_middles = file_middles
pc_input_end = '.fits'
pc_output_root = base_dir + 'pol_cal/' + prefix
pc_output_end = '.fits'
pc_scans = ()
pc_IFs = ()

