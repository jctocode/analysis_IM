#########################################################################
#                                                                       #
#           This pipeline is used to get the reference for              #
#           cross transfer function using simulation maps               #
#                                                                       #
#########################################################################

import os
pipe_modules = []
pipe_processes = 1
WORKROOT = os.getenv('YICHAO_WORK_PS')

import data_paths
"""  simulation maps  """

print
print "="*50
print "reference for cross transfer function"
print

hour = int(os.getenv('HOUR'))
mode = int(os.getenv('MODE'))

map_sim = os.getenv('MAP_SIM')
map_cln = os.getenv('MAP_CLN')
map_wgz = os.getenv('MAP_WGZ')

resultf = 'simmaps_beam'

# get the maps dict
datadb = data_paths.DataPath()
if os.path.exists(map_sim):
    imaps_a = data_paths.get_mapdict(map_sim, selection='beammeansub')
else:
    imaps_a = datadb.fetch(map_sim + "_temperature", silent=True)

if os.path.exists(map_cln):
    nmaps_a = data_paths.get_mapdict(map_cln + 'mapmode_map/')
    output_root = WORKROOT + 'reference_cros_%s_%d/'%(map_cln.split('/')[-2],mode)
else:
    nmaps_a = datadb.fetch(map_cln + '_combined', silent=True)
    output_root = WORKROOT + 'reference_cors_%s_%d/'%(map_cln, mode)

if os.path.exists(map_sim):
    imaps_b = data_paths.get_mapdict(map_sim, selection='delta')
else:
    imaps_b = datadb.fetch(map_sim + "_delta", silent=True)

#nmaps_b = datadb.fetch(map_wgz + "_montecarlo", silent=True)
nmaps_b = datadb.fetch(map_wgz + "_selection", silent=True)

NUM = len(imaps_a[0])

imap_list = []
imap_root = []
nmap_list = []
nmap_root = []

pkc_imap_list = []
pkc_nmap_list = []

for i in range(NUM):
	mappath = imaps_a[1]['%d'%i]
	imap_list.append(mappath.split('/')[-1])
	imap_root.append(mappath.replace(mappath.split('/')[-1], ''))
	
	wetpath = nmaps_a[1]['weight;%dmodes'%mode]
	nmap_list.append(wetpath.split('/')[-1])
	nmap_root.append(wetpath.replace(wetpath.split('/')[-1], ''))
	
	print
	print mappath
	print wetpath
	
	mappath = imaps_b[1]['%d'%i]
	imap_list.append(mappath.split('/')[-1])
	imap_root.append(mappath.replace(mappath.split('/')[-1], ''))
	
	wetpath = nmaps_b
	nmap_list.append(wetpath.split('/')[-1])
	nmap_root.append(wetpath.replace(wetpath.split('/')[-1], ''))
	
	print
	print mappath
	print wetpath

	pkc_imap_list.append([imaps_a[1]['%d'%i].split('/')[-1], 
	                      imaps_b[1]['%d'%i].split('/')[-1]])
	pkc_nmap_list.append([nmaps_a[1]['weight;%dmodes'%mode].split('/')[-1], 
	                      nmaps_b.split('/')[-1]])

print pkc_imap_list[:]
print pkc_nmap_list[:]
	
if hour==15:
    cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
           107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
           187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
           212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
elif hour==22:
	cutlist = [1,  2,  80, 206,201,200,196,192,189,186,182,217,212,211,223,229,
				  252,253,254,255,156,159,191,193,199,204,210,214,219,240,250,209,
				  215,213,187,198,157,197]
elif hour==1:
    cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
               107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
               187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
               212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
else:
	print 'no cutlist'

FKPweight = False 
kmin = 0.003
kmax = 2.5
kbinNum = 45


print
print "-"*50
print
print

""" Pipe line """
from mkpower import prepare
pipe_modules.append(prepare.Prepare)

from mkpower import mkpower_combine
pipe_modules.append(mkpower_combine.PowerSpectrumMaker)

from mkpower import pycamb
pipe_modules.append(pycamb.CAMB)

""" End """

"""  Prepare """
#from mkpower import prepare
#pipe_modules.append(prepare.Prepare)
pre_processes = 5
pre_plot = False
#pre_plot = True
pre_output_root = output_root
pre_imap_root = imap_root
pre_nmap_root = nmap_root
pre_imap_list = imap_list
pre_nmap_list = nmap_list

pre_boxshape = (512, 128, 64)
pre_discrete = 2
pre_boxunit = 2.
pre_cutlist = cutlist
pre_window = 'blackman'

"""  Calculate the combined Pk  """
#from mkpower import mkpower_combine
#pipe_modules.append(mkpower_combine.CrossPowerSpectrumMaker)
pkc_processes = 5
if hour==1:
	pkc_processes = 2
pkc_plot = False 
pkc_saveweight = True
pkc_input_root = output_root
pkc_output_root = output_root
pkc_resultf = resultf

pkc_boxshape = pre_boxshape
pkc_discrete = pre_discrete
pkc_boxunit = pre_boxunit
pkc_kbinNum = kbinNum 
pkc_kmin = kmin
pkc_kmax = kmax

#pkc_FKPweight = True
pkc_FKPweight = FKPweight
pkc_OmegaHI = 1.e-3
pkc_Omegam = 0.24
pkc_OmegaL = 0.76

pkc_sme = False

"""  Calling CAMB """
#from mkpower import pycamb
#pipe_modules.append(pycamb.CAMB)
pcb_output_root = output_root + 'cambio/'
pcb_do_nonlinear = 1
pcb_transfer_redshift = 0.7
pcb_transfer_high_precision = 'T'
pcb_transfer_kmax = 1.5
#pcb_transfer_k_per_logint = 400

