# pipeline for  foreground clean

pipe_modules = []
pipe_processes = 1

from foreground_clean import pair_set_legendre
from foreground_clean import pair_set
#from quadratic_products import pwrspec_combinations
#from quadratic_products import pwrspec_compile
import os

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------

# This is the database key for the input map
#basemap = 'GBT_15hr_map_oldcal'
basemap = os.getenv('MAPFILE')

# control the main operations
do_test = False
do_cleaning_real = os.getenv('CLEAN_REAL')
do_cleaning_sim = os.getenv('CLEAN_SIM')

nfreq = 256
goodmodes = int(os.getenv('GOODMODES'))
simfilename = os.getenv('SIMFILE')

cutlist = [6, 7, 8, 15, 16, 18, 19, 20, 21, 22, 37, 80, 103, 104, 105, 106, \
           107, 108, 130, 131, 132, 133, 134, 171, 175, 177, 179, 182, 183, \
           187, 189, 192, 193, 194, 195, 196, 197, 198, 201, 204, 208, 209, \
           212, 213, 218, 219, 229, 233, 237, 244, 254, 255]
freq_list = tuple([ind for ind in range(nfreq) if ind not in cutlist])
mode_list = range(0, 105, 5)
common_res_convolution = False
sub_weighted_mean = True
simfile = '/mnt/raid-project/gmrt/eswitzer/GBT/simulations/15hr_oldmap_str/'
simfile = simfile + simfilename
sim_multiplier = 1.
output_root = '/mnt/raid-project/gmrt/ycli/foreground_cleand/'
output_root += basemap + '_legendre_modes_%dgwj'%goodmodes
#output_root += basemap + '_allsvd'

#-----------------------------------------------------------------------------
# use the base map parameters above to make a few map cleaning cases
#-----------------------------------------------------------------------------
# clean_{map} (map)
if do_cleaning_real:
    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs1_', 'fs_')))
fs1_map2 = basemap
fs1_map1 = basemap
fs1_noise_inv1 = basemap
fs1_noise_inv2 = basemap
fs1_output_root = output_root + "/mapmode_map/"
fs1_freq_list = freq_list
fs1_modes = mode_list
fs1_factorizable_noise = True
fs1_convolve = common_res_convolution
fs1_sub_weighted_mean = sub_weighted_mean
fs1_good_modes = goodmodes
fs1_freq_n_all = nfreq

# clean_{map+sim} (map+sim) 
if do_cleaning_sim:
    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs2_', 'fs_')))
fs2_map2 = basemap
fs2_map1 = basemap
fs2_noise_inv1 = basemap
fs2_noise_inv2 = basemap
fs2_output_root = output_root + "/simmapmode_simmap_%s/" % simfilename.split('.')[0]
fs2_freq_list = freq_list
fs2_modes = mode_list
fs2_factorizable_noise = True
fs2_convolve = common_res_convolution
fs2_sub_weighted_mean = sub_weighted_mean
fs2_simfile = simfile
fs2_sim_multiplier = sim_multiplier
fs2_subtract_inputmap_from_sim = False
fs2_subtract_sim_from_inputmap = False
fs2_good_modes = goodmodes
fs2_freq_n_all = nfreq
fs2_save_section = False

# clean_{map+sim} (sim)
#if do_cleaning:
#    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs3_', 'fs_')))
#fs3_map2 = basemap
#fs3_map1 = basemap
#fs3_noise_inv1 = basemap
#fs3_noise_inv2 = basemap
#fs3_output_root = output_root + "/simmapmode_sim/"
#fs3_freq_list = freq_list
#fs3_modes = mode_list
#fs3_factorizable_noise = True
#fs3_convolve = common_res_convolution
#fs3_sub_weighted_mean = sub_weighted_mean
#fs3_simfile = simfile
#fs3_sim_multiplier = sim_multiplier
#fs3_subtract_inputmap_from_sim = True
#fs3_subtract_sim_from_inputmap = False
#fs3_good_modes = goodmodes
#fs3_freq_n_all = nfreq
#
## clean_{map+sim} (map)
#if do_cleaning:
#    pipe_modules.append((pair_set_legendre.PairSet_LegendreSVD, ('fs4_', 'fs_')))
#fs4_map2 = basemap
#fs4_map1 = basemap
#fs4_noise_inv1 = basemap
#fs4_noise_inv2 = basemap
#fs4_output_root = output_root + "/simmapmode_map/"
#fs4_freq_list = freq_list
#fs4_modes = mode_list
#fs4_factorizable_noise = True
#fs4_convolve = common_res_convolution
#fs4_sub_weighted_mean = sub_weighted_mean
#fs4_simfile = simfile
#fs4_sim_multiplier = sim_multiplier
#fs4_subtract_inputmap_from_sim = False
#fs4_subtract_sim_from_inputmap = True
#fs4_good_modes = goodmodes
#fs4_freq_n_all = nfreq
#
