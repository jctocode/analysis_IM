# pipeline for  foreground clean

pipe_modules = []
pipe_processes = 1


#from foreground_clean import pair_set_legendre
from foreground_clean import pair_set

#from quadratic_products import pwrspec_combinations
#from quadratic_products import pwrspec_compile

from map import simulate_gbt
import struct
import os


do_diag_noise = False
do_inv_diag_noise = False
do_IQUclean_themselves = True
do_simulation = False
do_simulation_IQUV = False

#-----------------------------------------------------------------------------
# main parameters that define the run
#-----------------------------------------------------------------------------

# This is the database key for the input map
basemap = os.getenv('MAPFILE')
simroot = os.getenv('SIMROOT') # simulation file root
simfile = os.getenv('SIMFILE') # simulation file number
subreal = bool(os.getenv('SUBREAL'))

goodmodes = int(os.getenv('GOODMODES'))

nfreq = 215
freq_list = (
  0,  1  ,8  ,9  ,10 ,12 ,13 ,14 ,16 ,17 ,20 ,21 ,22 ,23 ,24 ,25 ,27 ,30,
  31 ,34 ,35 ,37 ,38 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47 ,48 ,51 ,52 ,53 ,54,
  59 ,60 ,61 ,63 ,65 ,66 ,67 ,68 ,69 ,70 ,74 ,76 ,77 ,78 ,79 ,80 ,82 ,83,
  84 ,85 ,86 , 88 ,89 ,91 ,92 ,93 ,94 ,95 ,96 ,97 ,101,102,103,105,106,113,
  115,123,124,125,126,127,129,130,131,132,133,135,136,137,139,140,141,142,
  143,145,146,148,149,151,152,158,159,160,161,163,164,165,166,167,169,170,
  171,172,173,174,175,176,177,178,181,182,183,184,186,187,188,189,190,191,
  192,193,196,197,198,199,202,203,208,209,212,213,214)

mode_list = range(0, 5, 1) 
common_res_convolution = False
degrade_factor = 1.4
sub_weighted_mean = True
sim_multiplier = 1.
simnum = 100

if simfile != 'None':
    do_diag_noise = False
    do_IQUclean_themselves = False

    do_simulation = False
    do_simulation_IQUV = True
else:
    do_simulation = False
    do_simulation_IQU = False

#output_folder = 'DRACO_AA_dirty_map/'
output_folder = '3C286/'
output_root = '/home/ycli/data/cln_result/'
output_root += output_folder

#-----------------------------------------------------------------------------
# use the base map parameters above to make a few map cleaning cases
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# clean extended IQUV map
#-----------------------------------------------------------------------------

pairlist = ['A_with_A',]
pairdict = {}
pairdict['A_with_A'] = {}
pairdict['A_with_A']['map1'] = basemap
pairdict['A_with_A']['map1']+= '3C286-4000-DIR.npy'
pairdict['A_with_A']['map2'] = basemap
pairdict['A_with_A']['map2']+= '3C286-4000-DIR.npy'
pairdict['A_with_A']['noise_inv1'] = basemap + '3C286-4000-NOI.npy'
pairdict['A_with_A']['noise_inv2'] = basemap + '3C286-4000-NOI.npy'
pairdict['A_with_A']['tag1'] = 'A'
pairdict['A_with_A']['tag2'] = 'A'


#pairlist = ['A_with_A',]
#pairdict = {}
#pairdict['A_with_A'] = {}
#pairdict['A_with_A']['map1'] = basemap
#pairdict['A_with_A']['map1']+= 'DRACO-0908-FLATN-4000-DIR.npy'
#pairdict['A_with_A']['map2'] = basemap
#pairdict['A_with_A']['map2']+= 'DRACO-0908-FLATN-4000-DIR.npy'
#pairdict['A_with_A']['noise_inv1'] = basemap + 'DRACO-0908-FLATN-4000-NOI.npy'
#pairdict['A_with_A']['noise_inv2'] = basemap + 'DRACO-0908-FLATN-4000-NOI.npy'
#pairdict['A_with_A']['tag1'] = 'A'
#pairdict['A_with_A']['tag2'] = 'A'

if do_IQUclean_themselves:
    pipe_modules.append((pair_set.PairSet, ('fs2_', 'fs_')))

    fs2_pairlist = pairlist
    fs2_pairdict = pairdict
    #fs2_calc_diagnal = True
    fs2_output_root = output_root + "/Emap_clean_themselves/"
    fs2_freq_list1 = freq_list
    fs2_freq_list2 = freq_list
    fs2_modes = mode_list
    fs2_factorizable_noise = False
    fs2_convolve = common_res_convolution
    fs2_degrade_factor = degrade_factor
    fs2_clip_weight_percent = 50
    fs2_weighted_SVD = True
    fs2_sub_weighted_mean = sub_weighted_mean
    if goodmodes == 1:
        fs2_good_modes = 0
    else:
        fs2_good_modes = goodmodes
    fs2_freq_n_all1 = nfreq
    fs2_freq_n_all2 = nfreq

#-----------------------------------------------------------------------------
# generate simulation maps for GBT and WiggleZ
#-----------------------------------------------------------------------------

if do_simulation_IQUV:
    sg1_output_root = simroot
    sg1_outfile_meansub = "sim_beammeansub_%03d.npy"
    #sg1_outfile_meansub = "sim_degradebeam_%03d.npy"

    pipe_modules.append((pair_set.PairSet, ('fs3_', 'fs_')))

    freq_list_iquv = freq_list
    freq_list_iquv+= tuple([ind +   nfreq for ind in freq_list])
    freq_list_iquv+= tuple([ind + 2*nfreq for ind in freq_list])
    #freq_list_iquv+= tuple([ind + 3*nfreq for ind in freq_list])

    fs3_pairlist = pairlist
    fs3_pairdict = pairdict
    #fs3_calc_diagnal = True
    fs3_output_root = output_root + "/simmapmode_simmap_beam_%03d/"
    fs3_freq_list1 = freq_list
    fs3_freq_list2 = freq_list
    fs3_modes = mode_list
    fs3_simnum = simnum
    fs3_simfile1  = sg1_output_root + sg1_outfile_meansub
    fs3_simfile2  = sg1_output_root + sg1_outfile_meansub
    #fs3_simfile2 = basemap + sg1_outfile_meansub
    fs3_sim_multiplier = sim_multiplier
    fs3_subtract_inputmap_from_sim = False
    fs3_subtract_sim_from_inputmap = False
    fs3_subtract_realmap_from_sim = subreal
    fs3_realmap_dir = output_root + "/Emap_clean_themselves/"
    if subreal:
        fs3_output_root = fs3_output_root[:-1] + "_subreal/"
    fs3_factorizable_noise = True
    fs3_convolve = common_res_convolution
    fs3_clip_weight_percent = 50
    fs3_weighted_SVD = True
    fs3_degrade_factor = degrade_factor
    fs3_sub_weighted_mean = sub_weighted_mean
    fs3_good_modes = goodmodes
    fs3_freq_n_all1 = nfreq
    fs3_freq_n_all2 = nfreq

    
