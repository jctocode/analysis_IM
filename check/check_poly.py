#! /usr/bin/env python

import os
import scipy as sp
import numpy as np
import cPickle
import matplotlib.pyplot as plt
import data_paths
import file_tools as ft
from core import algebra
#from foregroundclean import gs
#from foregroundclean import replace_svd_mode as rm
from foreground_clean import gs
from foreground_clean import replace_svd_mode as rm

#path_key = 'GBT_15hr_map_oldcal_cleaned_noconv'
path_key = '/mnt/raid-project/gmrt/ycli/foreground_cleand/GBT_15hr_map_oldcal_legendre_modes_5gwj/'

save_key = path_key
if os.path.exists(path_key):
    save_key = path_key.split('/')[-2]

freq_list = range(50,60)
freq_n_all = 256
if True :
  freq_list = range(freq_n_all)
  freq_list.remove(6)
  freq_list.remove(7)
  freq_list.remove(8)
  freq_list.remove(15)
  freq_list.remove(16)
  freq_list.remove(18)
  freq_list.remove(19)
  freq_list.remove(20)
  freq_list.remove(21)
  freq_list.remove(22)
  freq_list.remove(37)
  freq_list.remove(80)
  freq_list.remove(103)
  freq_list.remove(104)
  freq_list.remove(105)
  freq_list.remove(106)
  freq_list.remove(107)
  freq_list.remove(108)
  freq_list.remove(130)
  freq_list.remove(131)
  freq_list.remove(132)
  freq_list.remove(133)
  freq_list.remove(134)
  freq_list.remove(171)
  freq_list.remove(175)
  freq_list.remove(177)
  freq_list.remove(179)
  freq_list.remove(182)
  freq_list.remove(183)
  freq_list.remove(187)
  freq_list.remove(189)
  freq_list.remove(192)
  freq_list.remove(193)
  freq_list.remove(194)
  freq_list.remove(195)
  freq_list.remove(196)
  freq_list.remove(197)
  freq_list.remove(198)
  freq_list.remove(201)
  freq_list.remove(204)
  freq_list.remove(208)
  freq_list.remove(209)
  freq_list.remove(212)
  freq_list.remove(213)
  freq_list.remove(218)
  freq_list.remove(219)
  freq_list.remove(229)
  freq_list.remove(233)
  freq_list.remove(237)
  freq_list.remove(244)
  freq_list.remove(254)
  freq_list.remove(255)
freq_list = tuple(freq_list)

def get_svd_modes(path_key, pairitem):
    if os.path.exists(path_key):
        root = data_paths.get_mapdict(path_key)
    else:
        datapath_db = data_paths.DataPath()
        root = datapath_db.fetch(path_key, silent=True)

    filename_svd = root[1]['%s;SVD'%pairitem]
    svd_info = ft.load_pickle(filename_svd)

    return svd_info
    


def process_mode_files(path_key):
    if os.path.exists(path_key):
        root = data_paths.get_mapdict(path_key)
    else:
        datapath_db = data_paths.DataPath()
        root = datapath_db.fetch(path_key, silent=True)
        #print root[1]['A_with_B;SVD']

    pairs = ["A_with_B", "A_with_C", "A_with_D",
             "B_with_C", "B_with_D", "C_with_D"]

    # open one file to get the dimensions
    modepkl = cPickle.load(open(root[1]['%s;SVD'%pairs[0]], "r"))
    (amp_ind, mode0_ind, mode1_ind) = (0,1,2)
    num_modes = len(modepkl[amp_ind])
    num_freq = len(modepkl[mode0_ind][0])
    num_pairs = len(pairs)

    amplitudes = np.zeros((num_modes, num_pairs))
    mode_functions_l = np.zeros((num_modes, num_freq, num_pairs))
    mode_functions_r = np.zeros((num_modes, num_freq, num_pairs))

    for pair, pairind in zip(pairs, range(num_pairs)):
        modepkl = cPickle.load(open(root[1]['%s;SVD'%pair], "r"))
        amplitudes[:,pairind] = modepkl[amp_ind]
        for modeind in range(num_modes):
            mode_functions_l[modeind, :, pairind] = modepkl[mode0_ind][modeind]
            mode_functions_r[modeind, :, pairind] = modepkl[mode1_ind][modeind]


    return (amplitudes, mode_functions_l, mode_functions_r)

def get_mode_functions(path_key):
    (amplitudes, mode_functions_l, mode_functions_r) = process_mode_files(path_key)
    mode_functions_l_avg = np.mean(mode_functions_l, axis=2)
    return mode_functions_l_avg

def plot_mode_functions(path_key, n=6):
    functions = get_mode_functions(path_key)
    (n_mode, n_freq) = functions.shape
    x = range(n_freq)
    if n>n_mode: n=n_mode
    plt.figure(figsize=(8,7))
    for i in range(n):
        plt.plot(x, functions[i])
    plt.savefig('./png/%s_%dmode.png'%(save_key, n))
    #plt.show()

def test_orthogonality(mode_set):
    mode_n = len(mode_set)
    result = np.ones(shape=(mode_n, mode_n))
    for i in range(mode_n):
        for j in range(mode_n):
            u = mode_set[i]
            v = mode_set[j]
            result[i][j] = np.dot(u,v)
            #result[i][j] = gs.fdot(u,v)
    #return result
    return np.log10(np.fabs(result))
    #return np.log10(result)

def test_legendre_orthogonality(m):
    r"""
    This function used for test the orthogonality of the 
    legendre polynamial generated by scipy. 
    Also compair with the re-orthogonalized legendre
    polynamial by gs.discrete_leg_array()
    """
    from scipy.special import eval_legendre as leg
    freq_n = 2040
    x = np.linspace(-1,1,freq_n)
    p = []

    plt.figure(figsize=(12,4))

    plt.subplot(131)
    for i in range(m):
        #p.append(leg(i, x) - leg(i, x).mean())
        p.append(leg(i, x))
    result = test_orthogonality(p)
    plt.imshow(result, interpolation='nearest')
    plt.title('scipy')
    plt.colorbar()

    plt.subplot(132)
    p = gs.discrete_leg_array(m, freq_n)
    result = test_orthogonality(p)
    plt.imshow(result, interpolation='nearest')
    plt.title('re-orthogonal')
    plt.colorbar()

    plt.subplot(133)
    f = range(0, 2040, 10)
    p2 = np.take(p, f, axis=1)
    print p2.shape
    result = test_orthogonality(p2)
    plt.imshow(result, interpolation='nearest')
    plt.title('re-orthogonal resize')
    plt.colorbar()


    plt.savefig('./png/legendre_orthogonality_%d.png'%m)
    plt.show()

def test_mode_orthogonality(m):
    # ---- original svd modes ----
    svd_info = get_svd_modes(path_key, 'A_with_B')
    mode_n = len(svd_info[1])
    freq_n = len(svd_info[1][0])
    

    # ---- polynalmial modes all freq ----
    svd_info_all = np.zeros(shape=(2, mode_n, freq_n_all))
    for i in range(mode_n):
        np.put(svd_info_all[0][i], freq_list, svd_info[1][i])
        np.put(svd_info_all[1][i], freq_list, svd_info[2][i])
    svd_info_new_all = (svd_info[0], 
                        rm.replace_modes(svd_info_all[0], 4, m=m),
                        rm.replace_modes(svd_info_all[1], 4, m=m))
    svd_info_new = (svd_info[0],
                    np.take(svd_info_new_all[1], freq_list, axis=1),
                    np.take(svd_info_new_all[2], freq_list, axis=1),)

    # ---- polynalmial modes all freq weighted by svd[0] ----
    svd_info_all = np.zeros(shape=(2, mode_n, freq_n_all))
    for i in range(mode_n):
        np.put(svd_info_all[0][i], freq_list, svd_info[1][i])
        np.put(svd_info_all[1][i], freq_list, svd_info[2][i])
    svd_info_new_all_weighted = (svd_info[0], 
               rm.replace_modes(svd_info_all[0], 4, weight=svd_info_all[0][0], m=m),
               rm.replace_modes(svd_info_all[1], 4, weight=svd_info_all[1][0], m=m))
    svd_info_new_weighted = (svd_info[0],
                    np.take(svd_info_new_all_weighted[1], freq_list, axis=1),
                    np.take(svd_info_new_all_weighted[2], freq_list, axis=1),)

    # ---- polynalmial modes  ----
    svd_info_new_nojump = (svd_info[0],
                        rm.replace_modes(svd_info[1], 4, m=m),
                        rm.replace_modes(svd_info[2], 4, m=m))

    # ---- test orthogonality ----
    plt.figure(figsize=(8,8))

    plt.subplot(221)
    result = test_orthogonality(svd_info[1])
    plt.imshow(result, interpolation='nearest')
    plt.title('svd modes')
    plt.colorbar()

    plt.subplot(222)
    result = test_orthogonality(svd_info_new[1])
    plt.imshow(result, interpolation='nearest')
    plt.title('legendre modes jump')
    plt.colorbar()

    plt.subplot(223)
    result = test_orthogonality(svd_info_new_weighted[1])
    plt.imshow(result, interpolation='nearest')
    plt.title('legendre modes jump weight')
    plt.colorbar()

    plt.subplot(224)
    result = test_orthogonality(svd_info_new_nojump[1])
    plt.imshow(result, interpolation='nearest')
    plt.title('legendre modes no jump')
    plt.colorbar()

    plt.savefig('./png/%s_orthogonality.png'%(save_key))
    plt.show()

def test_svd_egval():
    # ---- original svd modes ----
    svd_info = get_svd_modes(path_key, 'A_with_B')
    mode_n = len(svd_info[1])
    freq_n = len(svd_info[1][0])
    x = range(mode_n)
    plt.figure(figsize=(8,5))
    plt.scatter(x, svd_info[0], s=20, c='w', marker='o')
    plt.semilogy()
    plt.xlim(xmin=-1, xmax=210)
    plt.ylim(ymin=1.e-10)
    plt.savefig('./png/%s_egval.png'%(save_key))
    plt.show()

def test_legendre_mode(m, m_start=0):
    from scipy.special import eval_legendre as leg
    freq_n = 204
    x = np.linspace(-1,1,freq_n)

    p = []
    for i in range(m):
        p.append(leg(i, x))

    p_new = gs.discrete_leg_array(m, freq_n)

    plt.figure(figsize=(10,12))

    for i in range(6):
        plt.subplot(int("32%d"%(i+1)))
        plt.plot(x, p[i+m_start], label='scipy')
        plt.plot(x, p_new[i+m_start], label='new')
        plt.title('%d mode'%i)
    plt.savefig('./png/legendre_%d_%d.png'%(m_start, m_start+5))
    plt.show()


def test_svd_legendre_mode(m):
    # ---- original svd modes ----
    svd_info = get_svd_modes(path_key, 'A_with_B')
    mode_n = len(svd_info[1])
    freq_n = len(svd_info[1][0])
    

    ## ---- polynalmial modes all freq ----
    #svd_info_all = np.zeros(shape=(2, mode_n, freq_n_all))
    #for i in range(mode_n):
    #    np.put(svd_info_all[0][i], freq_list, svd_info[1][i])
    #    np.put(svd_info_all[1][i], freq_list, svd_info[2][i])
    #svd_info_new_all = (svd_info[0], 
    #                    rm.replace_modes(svd_info_all[0], 4, m=m),
    #                    rm.replace_modes(svd_info_all[1], 4, m=m))
    #svd_info_new = (svd_info[0],
    #                np.take(svd_info_new_all[1], freq_list, axis=1),
    #                np.take(svd_info_new_all[2], freq_list, axis=1),)

    # ---- polynalmial modes all freq weighted by svd[0] ----
    svd_info_all = np.zeros(shape=(2, mode_n, freq_n_all))
    for i in range(mode_n):
        np.put(svd_info_all[0][i], freq_list, svd_info[1][i])
        np.put(svd_info_all[1][i], freq_list, svd_info[2][i])
    svd_info_new_all_weighted = (svd_info[0], 
               rm.replace_modes(svd_info_all[0], 4, weight=svd_info_all[0][0], m=m),
               rm.replace_modes(svd_info_all[1], 4, weight=svd_info_all[1][0], m=m))
    svd_info_new_weighted = (svd_info[0],
                    np.take(svd_info_new_all_weighted[1], freq_list, axis=1),
                    np.take(svd_info_new_all_weighted[2], freq_list, axis=1),)

    ## ---- polynalmial modes  ----
    #svd_info_new_nojump = (svd_info[0],
    #                    rm.replace_modes(svd_info[1], 4, m=m),
    #                    rm.replace_modes(svd_info[2], 4, m=m))
    #x = range(freq_n_all)
    x = range(freq_n)

    plt.figure(figsize=(8,9))
    fig_n = 6
    for i in range(fig_n):
        plt.subplot(int('%d%d%d'%(fig_n, 1, i+1)))
        j = i + 5
        #plt.plot(x, svd_info_all[0][j], label='svd mode %d'%j)
        plt.plot(x, svd_info[1][j], label='svd mode %d'%j)
        #plt.plot(x, svd_info_new[1][j], label='leg mode %d (jump)'%j)
        #plt.plot(x, svd_info_new_nojump[1][j], label='leg mode %d (no jump)'%j)
        plt.plot(x, svd_info_new_weighted[1][j], label='leg mode %d (jump weighted)'%j)
        plt.legend(frameon=False)
    plt.savefig('./png/%s.png'%(save_key))
    plt.show()

    
if __name__=='__main__':
    # plot SVD modes
    #plot_mode_functions(path_key, n=6)

    m = 200
    # ---- test legendre orthogonality ----
    #test_legendre_orthogonality(m)
    #exit()

    # ---- test mode orthogonality ----
    #test_mode_orthogonality(m)
    #exit()

    # ---- test eg val ----
    #test_svd_egval()
    #exit()
    
    # ---- test legendre mode ----
    #test_svd_legendre_mode(m)
    #test_legendre_mode(m, m_start=198)
    #exit()

